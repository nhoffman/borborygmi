<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>borborygmi - unknown</title><link href="https://nhoffman.github.io/borborygmi/" rel="alternate"></link><link href="https://nhoffman.github.io/borborygmi/feeds/unknown.atom.xml" rel="self"></link><id>https://nhoffman.github.io/borborygmi/</id><updated>2025-05-30T00:00:00-07:00</updated><entry><title>Mac Sequoia setup</title><link href="https://nhoffman.github.io/borborygmi/mac-setup-sequoia.html" rel="alternate"></link><published>2025-05-30T00:00:00-07:00</published><updated>2025-05-30T00:00:00-07:00</updated><author><name>unknown</name></author><id>tag:nhoffman.github.io,2025-05-30:/borborygmi/mac-setup-sequoia.html</id><summary type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org87c2da2"&gt;bootstrapping from another system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org882d882"&gt;system update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org83cb666"&gt;Developer tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org7ed1ef2"&gt;system settings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org23a874a"&gt;turn off spelling autocorrect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org80fff37"&gt;unmap Control + left,right&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgf677182"&gt;Turn on FileVault&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orge47bfbd"&gt;Window management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgc0a748c"&gt;homebrew&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org8eb1df1"&gt;CLI applications&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgbecaab2"&gt;mactex (takes forever)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org43e44d3"&gt;iTerm2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgfe954f5"&gt;zsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgf77892f"&gt;python&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org0f7a478"&gt;pyvenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org59a1f1e"&gt;pipx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orga49dae2"&gt;emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org3c4cc2c"&gt;R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgea5e982"&gt;postgresql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org54d3d19"&gt;Docker desktop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Yet another installation of my personal notes for …&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org87c2da2"&gt;bootstrapping from another system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org882d882"&gt;system update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org83cb666"&gt;Developer tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org7ed1ef2"&gt;system settings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org23a874a"&gt;turn off spelling autocorrect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org80fff37"&gt;unmap Control + left,right&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgf677182"&gt;Turn on FileVault&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orge47bfbd"&gt;Window management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgc0a748c"&gt;homebrew&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org8eb1df1"&gt;CLI applications&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgbecaab2"&gt;mactex (takes forever)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org43e44d3"&gt;iTerm2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgfe954f5"&gt;zsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgf77892f"&gt;python&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org0f7a478"&gt;pyvenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org59a1f1e"&gt;pipx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orga49dae2"&gt;emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org3c4cc2c"&gt;R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgea5e982"&gt;postgresql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org54d3d19"&gt;Docker desktop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Yet another installation of my personal notes for setting up a new (or
cleanly installed) MacOS computer. I will try really hard to reproduce
the steps in an order that make then easiest to execute.
&lt;/p&gt;

&lt;p&gt;
Note that none of the steps below require an Apple ID, but I did sign
in from the start to make it easier to transfer links etc from a
laptop during setup.
&lt;/p&gt;

&lt;div id="outline-container-org87c2da2" class="outline-2"&gt;
&lt;h2 id="org87c2da2"&gt;bootstrapping from another system&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org87c2da2"&gt;
&lt;p&gt;
I do copy some things over from my previous computer, but it's pretty
minimal. Here's the command to gather up what I need to transfer.
&lt;/p&gt;

&lt;pre class="example"&gt;
tar --exclude '.gnupg/S.*' -cf dotfiles.tar .aws .gitconfig .gnupg .netrc .pypirc .saml2aws .ssh
&lt;/pre&gt;


&lt;p&gt;
It's also handy to know all of the projects I'm working on:
&lt;/p&gt;

&lt;pre class="example"&gt;
cd ~/src
for dname in */.git; do git -C $(dirname $dname) remote -v; done &amp;gt; ~/remotes.txt
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org882d882" class="outline-2"&gt;
&lt;h2 id="org882d882"&gt;system update&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org882d882"&gt;
&lt;p&gt;
The first thing I did this time around was to perform a system software update
to get all of that waiting out of the way.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org83cb666" class="outline-2"&gt;
&lt;h2 id="org83cb666"&gt;Developer tools&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org83cb666"&gt;
&lt;p&gt;
Also takes a while. This can be done from the command line:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;xcode-select --install
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7ed1ef2" class="outline-2"&gt;
&lt;h2 id="org7ed1ef2"&gt;system settings&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7ed1ef2"&gt;
&lt;p&gt;
The new iOS-style System Settings takes a bit of getting used to.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org23a874a" class="outline-3"&gt;
&lt;h3 id="org23a874a"&gt;turn off spelling autocorrect&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org23a874a"&gt;
&lt;pre class="example"&gt;
Search for "spelling" --&amp;gt; Spelling and Prediction --&amp;gt; unselect "Correct spelling automatically" and others
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org80fff37" class="outline-3"&gt;
&lt;h3 id="org80fff37"&gt;unmap Control + left,right&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org80fff37"&gt;
&lt;p&gt;
TODO: still necessary?
&lt;/p&gt;

&lt;p&gt;
I use Control plus the left and right arrow keys to move between
windows in emacs and tmux. Disable the default mapping to mission
control:
&lt;/p&gt;

&lt;pre class="example"&gt;
System Settings --&amp;gt; Keyboard Shortcuts pane --&amp;gt; Keyboard Shortcuts button --&amp;gt; Mission Control -&amp;gt; uncheck mission control: move left/right a space
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf677182" class="outline-3"&gt;
&lt;h3 id="orgf677182"&gt;Turn on FileVault&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf677182"&gt;
&lt;pre class="example"&gt;
System Settings --&amp;gt; Security &amp;amp; privacy --&amp;gt; FileVault
&lt;/pre&gt;


&lt;p&gt;
(this was actually enabled by work IT, but leaving here as a reminder)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge47bfbd" class="outline-3"&gt;
&lt;h3 id="orge47bfbd"&gt;Window management&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge47bfbd"&gt;
&lt;p&gt;
Remove the default window margins
&lt;/p&gt;

&lt;pre class="example"&gt;
Desktop &amp;amp; Dock --&amp;gt; unselect "tiled windows have margins"
&lt;/pre&gt;


&lt;p&gt;
I have Ccontrol-Option-Command-m in muscle memory to maximize a window, so add a keyboard shortcut:
&lt;/p&gt;

&lt;pre class="example"&gt;
Keyboard --&amp;gt; Keyboard Shortcuts --&amp;gt; App Shortcuts --&amp;gt; + 
Menu title: Fill
Shortcut: ⌃⌥⌘M
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc0a748c" class="outline-2"&gt;
&lt;h2 id="orgc0a748c"&gt;homebrew&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc0a748c"&gt;
&lt;p&gt;
Still a one-liner, now bash rather than ruby:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
brew doctor
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Homebrew is installed to &lt;code&gt;/opt/local&lt;/code&gt; on an Apple Silicon Mac. I add the path in my zsh profile like this:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;if [[ -d /opt/homebrew ]]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
fi
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8eb1df1" class="outline-3"&gt;
&lt;h3 id="org8eb1df1"&gt;CLI applications&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org8eb1df1"&gt;
&lt;p&gt;
Many packages are installed later with additional elaboration or in as
dependencies for other applications; here are some more or less
standalone packages that I routinely install up front.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install duckdb &amp;amp;&amp;amp; \
brew install fd &amp;amp;&amp;amp; \
brew install fswatch &amp;amp;&amp;amp; \
brew install fzf &amp;amp;&amp;amp; \
brew install gcc &amp;amp;&amp;amp; \
brew install git &amp;amp;&amp;amp; \
brew install graphviz &amp;amp;&amp;amp; \
brew install htop &amp;amp;&amp;amp; \
brew install jq &amp;amp;&amp;amp; \
brew install latex2rtf &amp;amp;&amp;amp; \
brew install mcfly &amp;amp;&amp;amp; \
brew install node &amp;amp;&amp;amp; \
brew install pandoc &amp;amp;&amp;amp; \
brew install pngpaste &amp;amp;&amp;amp; \
brew install rg &amp;amp;&amp;amp; \
brew install tmux &amp;amp;&amp;amp; \
brew install tree &amp;amp;&amp;amp; \
brew install wget &amp;amp;&amp;amp; \
brew install xsv
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbecaab2" class="outline-4"&gt;
&lt;h4 id="orgbecaab2"&gt;mactex (takes forever)&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgbecaab2"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install --cask mactex
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org43e44d3" class="outline-2"&gt;
&lt;h2 id="org43e44d3"&gt;iTerm2&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org43e44d3"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install --cask iterm2
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Install using homebrew above. Update a few settings.
&lt;/p&gt;

&lt;p&gt;
Settings &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Keys and do these things:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;General: select "Left/right option key acts as": +Esc&lt;/li&gt;
&lt;li&gt;Key Mappings: + &amp;#x2013;&amp;gt; Keyboard shortcut "OPT+&amp;lt;left arrow&amp;gt;": Send Escape sequence "b"&lt;/li&gt;
&lt;li&gt;Key Mappings: + &amp;#x2013;&amp;gt; Keyboard shortcut "OPT+&amp;lt;right arrow&amp;gt;": Send Escape sequence "f"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
(may have to delete or replace an existing mapping)
&lt;/p&gt;

&lt;p&gt;
Default appearance:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Settings &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Colors &amp;#x2013;&amp;gt; Color Presets &amp;#x2013;&amp;gt; Light Background&lt;/li&gt;
&lt;li&gt;Settings &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Text &amp;#x2013;&amp;gt; Change Font &amp;#x2013;&amp;gt; 14 point&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Tabs on left:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Settings &amp;#x2013;&amp;gt; Appearance &amp;#x2013;&amp;gt; Tab Bar Location &amp;#x2013;&amp;gt; Left&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Install shell integration:
&lt;/p&gt;

&lt;pre class="example"&gt;
curl -L https://iterm2.com/shell_integration/install_shell_integration.sh | bash
&lt;/pre&gt;


&lt;ul class="org-ul"&gt;
&lt;li&gt;Install python runtime by selecting "Scripts" &amp;#x2013;&amp;gt; "Manage" &amp;#x2013;&amp;gt; "Install Python Runtime".&lt;/li&gt;
&lt;li&gt;Enable the Python API under "Preferences" &amp;#x2013;&amp;gt; "General" &amp;#x2013;&amp;gt; "Magic"&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgfe954f5" class="outline-2"&gt;
&lt;h2 id="orgfe954f5"&gt;zsh&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgfe954f5"&gt;
&lt;p&gt;
zsh is the default shell on MacOS.
&lt;/p&gt;

&lt;p&gt;
Install my dotfiles.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~
git clone git@github.com:nhoffman/dotfiles.git
dotfiles/mac/bin/install_dotfiles.zsh
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf77892f" class="outline-2"&gt;
&lt;h2 id="orgf77892f"&gt;python&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf77892f"&gt;
&lt;p&gt;
Sonoma ships with Python 3.9.6 as &lt;code&gt;/usr/bin/python3&lt;/code&gt; with no &lt;code&gt;python&lt;/code&gt;
executable (or maybe it's installed with xcode tools - I forgot to
check). I avoid using the system python for the most part.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0f7a478" class="outline-3"&gt;
&lt;h3 id="org0f7a478"&gt;pyvenv&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0f7a478"&gt;
&lt;p&gt;
My current method for managing python interpreters is to
use pyenv. See &lt;a href="https://realpython.com/intro-to-pyenv/"&gt;https://realpython.com/intro-to-pyenv/&lt;/a&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install zlib
brew install pyenv
brew install pyenv-virtualenv
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Install pyenv-update plugin:
&lt;/p&gt;

&lt;pre class="example"&gt;
git clone https://github.com/pyenv/pyenv-update.git $(pyenv root)/plugins/pyenv-update
&lt;/pre&gt;


&lt;p&gt;
added dotfiles/mac/zsh/pyenv.plugin.zsh
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;if [[ -d "$HOME/.pyenv" ]]; then
    # echo "using pyenv"
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init --path)"
fi
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Install the most recent versions of 3.8, 3.9 and 3.10 and set 3.10 as the default.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;pyenv install $(pyenv install -l | grep '^  3.9' | tail -n1)
pyenv install $(pyenv install -l | grep '^  3.10' | tail -n1)
pyenv install $(pyenv install -l | grep '^  3.11' | tail -n1)
pyenv global $(pyenv install -l | grep '^  3.11' | tail -n1)
python3 -m pip install -U pip wheel
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
pyenv seems not to install a &lt;code&gt;python&lt;/code&gt; entrypoint. I'll see how it goes with
&lt;code&gt;python3&lt;/code&gt; only.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org59a1f1e" class="outline-3"&gt;
&lt;h3 id="org59a1f1e"&gt;pipx&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org59a1f1e"&gt;
&lt;p&gt;
&lt;a href="https://github.com/pypa/pipx"&gt;pipx&lt;/a&gt; is great for installing standalone python-language commands
outside of project-level virtual environments.
&lt;/p&gt;

&lt;p&gt;
Last time I installed pipx using homebrew, but at this time homebrew
python is at 3.12 and I am primarily using 3.11. So I installed pipx
into the pyenv global environment:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-shell"&gt;python3 -m pip install pipx
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Install some globally useful packages:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-shell"&gt;pipx install awscli
pipx install pgcli
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga49dae2" class="outline-2"&gt;
&lt;h2 id="orga49dae2"&gt;emacs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga49dae2"&gt;
&lt;p&gt;
Since I moved off of Intel macs, I have been using the &lt;a href="https://github.com/d12frosted/homebrew-emacs-plus"&gt;Homebrew
emacs-plus&lt;/a&gt; project, which seems great so far.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install libressl
brew install aspell
brew install gpg
brew tap d12frosted/emacs-plus
brew install emacs-plus
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Edit: after emacs 39.1 came out, I updated with:
&lt;/p&gt;

&lt;pre class="example"&gt;
brew uninstall emacs-plus
brew install emacs-plus@29 --with-imagemagick --with-native-comp
&lt;/pre&gt;


&lt;p&gt;
Check out my .emacs.d and run setup scripts.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~
git clone git@github.com:nhoffman/emacs-config.git .emacs.d
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Run setup scripts:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~/.emacs.d
bin/python-setup.sh
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The main inconvenience was having to adapt my &lt;a href="https://github.com/nhoffman/emacs-config/blob/master/init.bash"&gt;startup script&lt;/a&gt; to juggle M1 Mac,
x86 Mac, and linux. Here's the relevant portion.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;if [[ $(uname) == 'Darwin' ]]; then
    if [[ $(uname -m) == 'arm64' ]]; then
	# assume we are using emacs-plus
	EMACS=/opt/homebrew/bin/emacs
	EMACS_BIN=/opt/homebrew/bin/emacsclient
    else
	EMACS=/Applications/Emacs.app/Contents/MacOS/Emacs
	EMACS_BIN=/Applications/Emacs.app/Contents/MacOS/bin
    fi
    alias emacs="$EMACS"
    # provides emacsclient
    export PATH=$EMACS_BIN:$PATH
else
    EMACS=$(readlink -f emacs)
fi
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3c4cc2c" class="outline-2"&gt;
&lt;h2 id="org3c4cc2c"&gt;R&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3c4cc2c"&gt;
&lt;p&gt;
Installed the arm64 package from &lt;a href="https://cran.r-project.org/bin/macosx/"&gt;https://cran.r-project.org/bin/macosx/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Some packages that I know I'll need:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;R --slave &amp;lt;&amp;lt; EOF
packages &amp;lt;- c("lattice", "RSQLite", "latticeExtra", "argparse", "data.table", "tidyverse")
install.packages(packages, repos="http://cran.fhcrc.org/", dependencies=TRUE, clean=TRUE, Ncpus=4)
EOF
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Also:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install --cask rstudio
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgea5e982" class="outline-2"&gt;
&lt;h2 id="orgea5e982"&gt;postgresql&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgea5e982"&gt;
&lt;p&gt;
Install from &lt;a href="https://postgresapp.com/downloads.html"&gt;https://postgresapp.com/downloads.html&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
This installs multiple versions of postgres. My zsh profiile includes the path
to the CLI for the latest version, eg:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;PATH="/Applications/Postgres.app/Contents/Versions/latest/bin:$PATH"
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org54d3d19" class="outline-2"&gt;
&lt;h2 id="org54d3d19"&gt;Docker desktop&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org54d3d19"&gt;
&lt;p&gt;
Use Homebrew.
&lt;/p&gt;

&lt;pre class="example"&gt;
brew install --cask docker
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="notes"></category><category term="mac"></category></entry><entry><title>Notes on Pelican hosting with GitHub Pages</title><link href="https://nhoffman.github.io/borborygmi/pelican-gh-pages.html" rel="alternate"></link><published>2024-12-25T00:00:00-08:00</published><updated>2024-12-25T00:00:00-08:00</updated><author><name>unknown</name></author><id>tag:nhoffman.github.io,2024-12-25:/borborygmi/pelican-gh-pages.html</id><summary type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgd31bb14"&gt;Add themes as git submodules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org462636a"&gt;Use nelsonjchen/gh-pages-pelican-action&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I've set up several Pelican sites on GitHub Pages and each time I seem
to run into way more trouble than seems necessary. Here are a few details that I seem to need to rediscover each time.
&lt;/p&gt;

&lt;div id="outline-container-orgd31bb14" class="outline-2"&gt;
&lt;h2 id="orgd31bb14"&gt;Add themes …&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgd31bb14"&gt;Add themes as git submodules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org462636a"&gt;Use nelsonjchen/gh-pages-pelican-action&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I've set up several Pelican sites on GitHub Pages and each time I seem
to run into way more trouble than seems necessary. Here are a few details that I seem to need to rediscover each time.
&lt;/p&gt;

&lt;div id="outline-container-orgd31bb14" class="outline-2"&gt;
&lt;h2 id="orgd31bb14"&gt;Add themes as git submodules&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd31bb14"&gt;
&lt;p&gt;
For example, to use Flex:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;git submodule add https://github.com/alexandrevicenzi/Flex.git Flex
git commit -am "Added Flex submodule"
git push origin main
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org462636a" class="outline-2"&gt;
&lt;h2 id="org462636a"&gt;Use nelsonjchen/gh-pages-pelican-action&lt;/h2&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="python"></category></entry><entry><title>Mac M2 Sonoma setup</title><link href="https://nhoffman.github.io/borborygmi/mac-setup-sonoma.html" rel="alternate"></link><published>2024-04-17T00:00:00-07:00</published><updated>2024-04-17T00:00:00-07:00</updated><author><name>unknown</name></author><id>tag:nhoffman.github.io,2024-04-17:/borborygmi/mac-setup-sonoma.html</id><summary type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org0164305"&gt;bootstrapping from another system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orga62db8d"&gt;system update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgea6caaf"&gt;Developer tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org56f57dd"&gt;system settings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgc4bbf65"&gt;turn off spelling autocorrect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org995b990"&gt;unmap Control + left,right&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org8e7b466"&gt;Turn on FileVault&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgf2974f6"&gt;homebrew&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org5ef8206"&gt;CLI applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org72e11f6"&gt;desktop applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org19c8dde"&gt;iTerm2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org72af57f"&gt;zsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org59fdb17"&gt;python&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org346d80e"&gt;pyvenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org197d3e2"&gt;pipx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgedc4689"&gt;emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org7e7191a"&gt;R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgb82a2dd"&gt;postgresql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org77051a0"&gt;Docker desktop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Yet another installation of my personal notes for setting up a …&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org0164305"&gt;bootstrapping from another system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orga62db8d"&gt;system update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgea6caaf"&gt;Developer tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org56f57dd"&gt;system settings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgc4bbf65"&gt;turn off spelling autocorrect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org995b990"&gt;unmap Control + left,right&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org8e7b466"&gt;Turn on FileVault&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgf2974f6"&gt;homebrew&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org5ef8206"&gt;CLI applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org72e11f6"&gt;desktop applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org19c8dde"&gt;iTerm2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org72af57f"&gt;zsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org59fdb17"&gt;python&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org346d80e"&gt;pyvenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org197d3e2"&gt;pipx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgedc4689"&gt;emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org7e7191a"&gt;R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgb82a2dd"&gt;postgresql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org77051a0"&gt;Docker desktop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Yet another installation of my personal notes for setting up a new (or
cleanly installed) MacOS computer. Not too many changes since
Ventura. I will try really hard to reproduce the steps in an order
that make then easiest to execute.
&lt;/p&gt;

&lt;p&gt;
Note that none of the steps below require an Apple ID, but I did sign
in from the start to make it easier to transfer links etc from a
laptop during setup.
&lt;/p&gt;

&lt;div id="outline-container-org0164305" class="outline-2"&gt;
&lt;h2 id="org0164305"&gt;bootstrapping from another system&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0164305"&gt;
&lt;p&gt;
I do copy some things over from my previous computer, but it's pretty
minimal. Here's the command to gather up what I need to transfer.
&lt;/p&gt;

&lt;pre class="example"&gt;
tar --exclude '.gnupg/S.*' -cf dotfiles.tar .aws .gitconfig .gnupg .netrc .pypirc .saml2aws .ssh
&lt;/pre&gt;


&lt;p&gt;
It's also handy to know all of the projects I'm working on:
&lt;/p&gt;

&lt;pre class="example"&gt;
cd ~/src
for dname in */.git; do git -C $(dirname $dname) remote -v; done &amp;gt; remotes.txt
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga62db8d" class="outline-2"&gt;
&lt;h2 id="orga62db8d"&gt;system update&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga62db8d"&gt;
&lt;p&gt;
The first thing I did this time around was to perform a system software update
to get all of that waiting out of the way.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgea6caaf" class="outline-2"&gt;
&lt;h2 id="orgea6caaf"&gt;Developer tools&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgea6caaf"&gt;
&lt;p&gt;
Also takes a while. This can be done from the command line:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;xcode-select --install
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org56f57dd" class="outline-2"&gt;
&lt;h2 id="org56f57dd"&gt;system settings&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org56f57dd"&gt;
&lt;p&gt;
The new iOS-style System Settings takes a bit of getting used to.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc4bbf65" class="outline-3"&gt;
&lt;h3 id="orgc4bbf65"&gt;turn off spelling autocorrect&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc4bbf65"&gt;
&lt;pre class="example"&gt;
Search for "spelling" --&amp;gt; Keyboard --&amp;gt; Text tab --&amp;gt; unselect "Correct spelling automatically" and others
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org995b990" class="outline-3"&gt;
&lt;h3 id="org995b990"&gt;unmap Control + left,right&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org995b990"&gt;
&lt;p&gt;
I use Control plus the left and right arrow keys to move between
windows in emacs and tmux. Disable the default mapping to mission
control:
&lt;/p&gt;

&lt;pre class="example"&gt;
System Settings --&amp;gt; Keyboard Shortcuts pane --&amp;gt; Keyboard Shortcuts button --&amp;gt; Mission Control -&amp;gt; uncheck mission control: move left/right a space
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8e7b466" class="outline-3"&gt;
&lt;h3 id="org8e7b466"&gt;Turn on FileVault&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org8e7b466"&gt;
&lt;pre class="example"&gt;
System Settings --&amp;gt; Security &amp;amp; privacy --&amp;gt; FileVault
&lt;/pre&gt;


&lt;p&gt;
I used a recovery key option rather than iCloud for my work machine, iCloud for personal
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf2974f6" class="outline-2"&gt;
&lt;h2 id="orgf2974f6"&gt;homebrew&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf2974f6"&gt;
&lt;p&gt;
Still a one-liner, now bash rather than ruby:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
brew doctor
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Homebrew is installed to &lt;code&gt;/opt/local&lt;/code&gt; on an M1 Mac. This required
updating my PATH configuration. I added the following to my login
profile:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;if [[ -d /opt/homebrew ]]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
fi
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The new location required a number of changes to various login steps configuring
homebrew-installed components.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5ef8206" class="outline-3"&gt;
&lt;h3 id="org5ef8206"&gt;CLI applications&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5ef8206"&gt;
&lt;p&gt;
Many packages are installed later with additional elaboration or in as
dependencies for other applications; here are some more or less
standalone packages that I routinely install up front.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install duckdb &amp;amp;&amp;amp; \
brew install fd &amp;amp;&amp;amp; \
brew install fswatch &amp;amp;&amp;amp; \
brew install fzf &amp;amp;&amp;amp; \
brew install gcc &amp;amp;&amp;amp; \
brew install git &amp;amp;&amp;amp; \
brew install graphviz &amp;amp;&amp;amp; \
brew install htop &amp;amp;&amp;amp; \
brew install jq &amp;amp;&amp;amp; \
brew install latex2rtf &amp;amp;&amp;amp; \
brew install mcfly &amp;amp;&amp;amp; \
brew install node &amp;amp;&amp;amp; \
brew install pandoc &amp;amp;&amp;amp; \
brew install pngpaste &amp;amp;&amp;amp; \
brew install rg &amp;amp;&amp;amp; \
brew install tmux &amp;amp;&amp;amp; \
brew install tree &amp;amp;&amp;amp; \
brew install wget &amp;amp;&amp;amp; \
brew install xsv
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org72e11f6" class="outline-3"&gt;
&lt;h3 id="org72e11f6"&gt;desktop applications&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org72e11f6"&gt;
&lt;p&gt;
Homebrew installs desktop apps too! (the syntax has changed a bit)
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;for pkg in iterm2 rectangle dash google-chrome mactex; do brew install --cask $pkg; done
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Some applications (eg, dash) require licenses and credentials that
must be installed interactively.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org19c8dde" class="outline-2"&gt;
&lt;h2 id="org19c8dde"&gt;iTerm2&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org19c8dde"&gt;
&lt;p&gt;
Install using homebrew above. Update a few settings.
&lt;/p&gt;

&lt;p&gt;
Settings &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Keys and do these things:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;General: select "Left/right option key acts as": +Esc&lt;/li&gt;
&lt;li&gt;Key Mappings: + &amp;#x2013;&amp;gt; Keyboard shortcut "OPT+&amp;lt;left arrow&amp;gt;": Send Escape sequence "b"&lt;/li&gt;
&lt;li&gt;Key Mappings: + &amp;#x2013;&amp;gt; Keyboard shortcut "OPT+&amp;lt;right arrow&amp;gt;": Send Escape sequence "f"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
(may have to delete or replace an existing mapping)
&lt;/p&gt;

&lt;p&gt;
Default appearance:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Settings &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Colors &amp;#x2013;&amp;gt; Color Presets &amp;#x2013;&amp;gt; Light Background&lt;/li&gt;
&lt;li&gt;Settings &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Text &amp;#x2013;&amp;gt; Change Font &amp;#x2013;&amp;gt; 14 point&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Tabs on left:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Settings &amp;#x2013;&amp;gt; Appearance &amp;#x2013;&amp;gt; Tab Bar Location &amp;#x2013;&amp;gt; Left&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Install shell integration:
&lt;/p&gt;

&lt;pre class="example"&gt;
curl -L https://iterm2.com/shell_integration/install_shell_integration.sh | bash
&lt;/pre&gt;


&lt;ul class="org-ul"&gt;
&lt;li&gt;Install python runtime by selecting "Scripts" &amp;#x2013;&amp;gt; "Manage" &amp;#x2013;&amp;gt; "Install Python Runtime".&lt;/li&gt;
&lt;li&gt;Enable the Python API under "Preferences" &amp;#x2013;&amp;gt; "General" &amp;#x2013;&amp;gt; "Magic"&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org72af57f" class="outline-2"&gt;
&lt;h2 id="org72af57f"&gt;zsh&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org72af57f"&gt;
&lt;p&gt;
zsh is the default shell on MacOS.
&lt;/p&gt;

&lt;p&gt;
Install my dotfiles.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~
git clone git@github.com:nhoffman/dotfiles.git
dotfiles/mac/bin/install_dotfiles.zsh
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org59fdb17" class="outline-2"&gt;
&lt;h2 id="org59fdb17"&gt;python&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org59fdb17"&gt;
&lt;p&gt;
Sonoma ships with Python 3.9.6 as &lt;code&gt;/usr/bin/python3&lt;/code&gt; with no &lt;code&gt;python&lt;/code&gt;
executable (or maybe it's installed with xcode tools - I forgot to
check). I avoid using the system python for the most part.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org346d80e" class="outline-3"&gt;
&lt;h3 id="org346d80e"&gt;pyvenv&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org346d80e"&gt;
&lt;p&gt;
My current method for managing python interpreters is to
use pyenv. See &lt;a href="https://realpython.com/intro-to-pyenv/"&gt;https://realpython.com/intro-to-pyenv/&lt;/a&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install zlib
brew install pyenv
brew install pyenv-virtualenv
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Install pyenv-update plugin:
&lt;/p&gt;

&lt;pre class="example"&gt;
git clone https://github.com/pyenv/pyenv-update.git $(pyenv root)/plugins/pyenv-update
&lt;/pre&gt;


&lt;p&gt;
added dotfiles/mac/zsh/pyenv.plugin.zsh
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;if [[ -d "$HOME/.pyenv" ]]; then
    # echo "using pyenv"
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init --path)"
fi
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Install the most recent versions of 3.8, 3.9 and 3.10 and set 3.10 as the default.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;pyenv install $(pyenv install -l | grep '^  3.9' | tail -n1)
pyenv install $(pyenv install -l | grep '^  3.10' | tail -n1)
pyenv install $(pyenv install -l | grep '^  3.11' | tail -n1)
pyenv global $(pyenv install -l | grep '^  3.11' | tail -n1)
python3 -m pip install -U pip wheel
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
pyenv seems not to install a &lt;code&gt;python&lt;/code&gt; entrypoint. I'll see how it goes with
&lt;code&gt;python3&lt;/code&gt; only.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org197d3e2" class="outline-3"&gt;
&lt;h3 id="org197d3e2"&gt;pipx&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org197d3e2"&gt;
&lt;p&gt;
&lt;a href="https://github.com/pypa/pipx"&gt;pipx&lt;/a&gt; is great for installing standalone python-language commands
outside of project-level virtual environments.
&lt;/p&gt;

&lt;p&gt;
Last time I installed pipx using homebrew, but at this time homebrew
python is at 3.12 and I am primarily using 3.11. So I installed pipx
into the pyenv global environment:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-shell"&gt;python3 -m pip install pipx
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Install some globally useful packages:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-shell"&gt;pipx install awscli
pipx install pgcli
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgedc4689" class="outline-2"&gt;
&lt;h2 id="orgedc4689"&gt;emacs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgedc4689"&gt;
&lt;p&gt;
Since I moved off of Intel macs, I have been using the &lt;a href="https://github.com/d12frosted/homebrew-emacs-plus"&gt;Homebrew
emacs-plus&lt;/a&gt; project, which seems great so far.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install libressl
brew install aspell
brew install gpg
brew tap d12frosted/emacs-plus
brew install emacs-plus
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Edit: after emacs 39.1 came out, I updated with:
&lt;/p&gt;

&lt;pre class="example"&gt;
brew uninstall emacs-plus
brew install emacs-plus@29 --with-imagemagick --with-native-comp
&lt;/pre&gt;


&lt;p&gt;
Check out my .emacs.d and run setup scripts.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~
git clone git@github.com:nhoffman/emacs-config.git .emacs.d
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Run setup scripts:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~/.emacs.d
bin/python-setup.sh
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The main inconvenience was having to adapt my &lt;a href="https://github.com/nhoffman/emacs-config/blob/master/init.bash"&gt;startup script&lt;/a&gt; to juggle M1 Mac,
x86 Mac, and linux. Here's the relevant portion.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;if [[ $(uname) == 'Darwin' ]]; then
    if [[ $(uname -m) == 'arm64' ]]; then
	# assume we are using emacs-plus
	EMACS=/opt/homebrew/bin/emacs
	EMACS_BIN=/opt/homebrew/bin/emacsclient
    else
	EMACS=/Applications/Emacs.app/Contents/MacOS/Emacs
	EMACS_BIN=/Applications/Emacs.app/Contents/MacOS/bin
    fi
    alias emacs="$EMACS"
    # provides emacsclient
    export PATH=$EMACS_BIN:$PATH
else
    EMACS=$(readlink -f emacs)
fi
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7e7191a" class="outline-2"&gt;
&lt;h2 id="org7e7191a"&gt;R&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7e7191a"&gt;
&lt;p&gt;
Installed the arm64 package from &lt;a href="https://cran.r-project.org/bin/macosx/"&gt;https://cran.r-project.org/bin/macosx/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Some packages that I know I'll need:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;R --slave &amp;lt;&amp;lt; EOF
packages &amp;lt;- c("lattice", "RSQLite", "latticeExtra", "argparse", "data.table", "tidyverse")
install.packages(packages, repos="http://cran.fhcrc.org/", dependencies=TRUE, clean=TRUE, Ncpus=4)
EOF
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Also:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install --cask rstudio
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb82a2dd" class="outline-2"&gt;
&lt;h2 id="orgb82a2dd"&gt;postgresql&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb82a2dd"&gt;
&lt;p&gt;
Install from &lt;a href="https://postgresapp.com/downloads.html"&gt;https://postgresapp.com/downloads.html&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
This installs multiple versions of postgres. My zsh profiile includes the path
to the CLI for the latest version, eg:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;PATH="/Applications/Postgres.app/Contents/Versions/latest/bin:$PATH"
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org77051a0" class="outline-2"&gt;
&lt;h2 id="org77051a0"&gt;Docker desktop&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org77051a0"&gt;
&lt;p&gt;
Use Homebrew.
&lt;/p&gt;

&lt;pre class="example"&gt;
brew install --cask docker
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="notes"></category><category term="mac"></category></entry><entry><title>Python on an Arduino Nano RP2040 Connect</title><link href="https://nhoffman.github.io/borborygmi/arduino-nano-install-python.html" rel="alternate"></link><published>2023-06-10T00:00:00-07:00</published><updated>2023-06-10T00:00:00-07:00</updated><author><name>unknown</name></author><id>tag:nhoffman.github.io,2023-06-10:/borborygmi/arduino-nano-install-python.html</id><summary type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgfb0b93d"&gt;Installing the .u2f file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org2df4fcb"&gt;s/MicroPython/CircuitPython&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I recently purchased an &lt;a href="https://store-usa.arduino.cc/products/arduino-nano-rp2040-connect-with-headers"&gt;Arduino Nano RP2040 Connect&lt;/a&gt; with the hope of
running &lt;a href="https://micropython.org"&gt;MicroPython&lt;/a&gt; (one of the useful side effects of having kids is
an excuse to buy stuff for projects). It's worth noting a couple of
the issues that …&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgfb0b93d"&gt;Installing the .u2f file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org2df4fcb"&gt;s/MicroPython/CircuitPython&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I recently purchased an &lt;a href="https://store-usa.arduino.cc/products/arduino-nano-rp2040-connect-with-headers"&gt;Arduino Nano RP2040 Connect&lt;/a&gt; with the hope of
running &lt;a href="https://micropython.org"&gt;MicroPython&lt;/a&gt; (one of the useful side effects of having kids is
an excuse to buy stuff for projects). It's worth noting a couple of
the issues that came up.
&lt;/p&gt;

&lt;div id="outline-container-orgfb0b93d" class="outline-2"&gt;
&lt;h2 id="orgfb0b93d"&gt;Installing the .u2f file&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgfb0b93d"&gt;
&lt;p&gt;
First, there appears to be a known problem with the documented method
for copying .uf2 files to a connected board from a Mac running MacOS
13 Ventura. This involves placing the board into boot mode, and simply
dropping the .uf2 file into the mounted volume in the Finder. The
problem (and the solution that I'll mention below) is documented in
the &lt;a href="https://blog.smittytone.net/2022/11/12/how-to-copy-files-to-a-pico-on-a-ventura-mac-error-free"&gt;smittytone blog&lt;/a&gt;. Actually, the author offers a few possible
solutions, but the one I used was to run the command
&lt;/p&gt;

&lt;pre class="example"&gt;
stty -f /dev/cu.usbmodem1101 1200
&lt;/pre&gt;


&lt;p&gt;
Where &lt;code&gt;/dev/cu.usbmodem1101&lt;/code&gt; was the file matching the expected
pattern that appeared when the board was connected. After I ran this
command, a volume appeared in the Finder, and I was simply able to
copy the .u2f file from the command line:
&lt;/p&gt;

&lt;pre class="example"&gt;
cp ~/Downloads/adafruit-circuitpython-arduino_nano_rp2040_connect-en_US-8.1.0.uf2 /Volumes/RPI-RP2
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2df4fcb" class="outline-2"&gt;
&lt;h2 id="org2df4fcb"&gt;s/MicroPython/CircuitPython&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2df4fcb"&gt;
&lt;p&gt;
You may notice from the command above that I'm not installing
MicroPython at all. Well, after many attempts to connect to the python
interpreter after installing MicroPython, I found various reports of
difficulties getting it to run on the RP2040. Luckily, AdaFruit
maintains a project derived from MicroPython called &lt;a href="https://learn.adafruit.com/welcome-to-circuitpython"&gt;CircuitPython&lt;/a&gt;, and
provides a build for many boards, including &lt;a href="https://circuitpython.org/board/arduino_nano_rp2040_connect/"&gt;mine&lt;/a&gt;. So after downloading and installing this build as described above, I was able to connect!
&lt;/p&gt;

&lt;p&gt;
So far so good&amp;#x2026; hopefully in the next post will I'll be able to
describe doing something interesting.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="projects"></category><category term="python"></category><category term="arduino"></category></entry><entry><title>Mac M2 Ventura setup</title><link href="https://nhoffman.github.io/borborygmi/mac-setup-ventura.html" rel="alternate"></link><published>2023-04-19T00:00:00-07:00</published><updated>2023-04-19T00:00:00-07:00</updated><author><name>unknown</name></author><id>tag:nhoffman.github.io,2023-04-19:/borborygmi/mac-setup-ventura.html</id><summary type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orga772140"&gt;bootstrapping from another system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgbeea7b5"&gt;system update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org9695e19"&gt;Developer tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgac934b6"&gt;system settings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org39148c9"&gt;turn off spelling autocorrect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgc25b9c6"&gt;unmap Control + left,right&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org2601dbd"&gt;Turn on FileVault&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org9dea2d8"&gt;homebrew&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org54ffab6"&gt;CLI applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orga0e9de5"&gt;desktop applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orge46ea4f"&gt;iTerm2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orge59e279"&gt;zsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org2d0a793"&gt;python&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgacf4485"&gt;pyvenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org39b89ac"&gt;pipx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org0906bad"&gt;emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org57c4060"&gt;R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org61692bb"&gt;postgresql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgf301302"&gt;Docker desktop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Yet another installation of my personal notes for setting up a …&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orga772140"&gt;bootstrapping from another system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgbeea7b5"&gt;system update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org9695e19"&gt;Developer tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgac934b6"&gt;system settings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org39148c9"&gt;turn off spelling autocorrect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgc25b9c6"&gt;unmap Control + left,right&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org2601dbd"&gt;Turn on FileVault&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org9dea2d8"&gt;homebrew&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org54ffab6"&gt;CLI applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orga0e9de5"&gt;desktop applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orge46ea4f"&gt;iTerm2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orge59e279"&gt;zsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org2d0a793"&gt;python&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgacf4485"&gt;pyvenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org39b89ac"&gt;pipx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org0906bad"&gt;emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org57c4060"&gt;R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org61692bb"&gt;postgresql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgf301302"&gt;Docker desktop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Yet another installation of my personal notes for setting up a new (or
cleanly installed) MacOS computer. Not too many changes since
Monterey. I will try really hard to reproduce the steps in an order
that make then easiest to execute.
&lt;/p&gt;

&lt;p&gt;
Note that none of the steps below require an Apple ID - I held off on
signing in until the very end just to see if it was possible.
&lt;/p&gt;

&lt;div id="outline-container-orga772140" class="outline-2"&gt;
&lt;h2 id="orga772140"&gt;bootstrapping from another system&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga772140"&gt;
&lt;p&gt;
I do copy some things over from my previous computer, but it's pretty
minimal. Here's the command to gather up what I need to transfer.
&lt;/p&gt;

&lt;pre class="example"&gt;
tar --exclude '.gnupg/S.*' -cf dotfiles.tar .aws .gitconfig .gnupg .netrc .pypirc .saml2aws .ssh
&lt;/pre&gt;


&lt;p&gt;
It's also handy to know all of the projects I'm working on:
&lt;/p&gt;

&lt;pre class="example"&gt;
cd ~/src
for dname in */.git; do git -C $(dirname $dname) remote -v; done &amp;gt; remotes.txt
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbeea7b5" class="outline-2"&gt;
&lt;h2 id="orgbeea7b5"&gt;system update&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbeea7b5"&gt;
&lt;p&gt;
The first thing I did this time around was to perform a system software update
to get all of that waiting out of the way.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9695e19" class="outline-2"&gt;
&lt;h2 id="org9695e19"&gt;Developer tools&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9695e19"&gt;
&lt;p&gt;
Also takes a while. This can be done from the command line:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;xcode-select --install
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgac934b6" class="outline-2"&gt;
&lt;h2 id="orgac934b6"&gt;system settings&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgac934b6"&gt;
&lt;p&gt;
The new iOS-style System Settings takes a bit of getting used to.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org39148c9" class="outline-3"&gt;
&lt;h3 id="org39148c9"&gt;turn off spelling autocorrect&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org39148c9"&gt;
&lt;pre class="example"&gt;
Search for "spelling" --&amp;gt; Keyboard --&amp;gt; Text tab --&amp;gt; unselect "Correct spelling automatically" and others
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc25b9c6" class="outline-3"&gt;
&lt;h3 id="orgc25b9c6"&gt;unmap Control + left,right&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc25b9c6"&gt;
&lt;p&gt;
I use Control plus the left and right arrow keys to move between
windows in emacs and tmux. Disable the default mapping to mission
control:
&lt;/p&gt;

&lt;pre class="example"&gt;
System Settings --&amp;gt; Keyboard Shortcuts pane --&amp;gt; Keyboard Shortcuts button --&amp;gt; uncheck mission control: move left/right a space
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2601dbd" class="outline-3"&gt;
&lt;h3 id="org2601dbd"&gt;Turn on FileVault&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2601dbd"&gt;
&lt;pre class="example"&gt;
System Settings --&amp;gt; Security &amp;amp; privacy --&amp;gt; FileVault
&lt;/pre&gt;


&lt;p&gt;
I used a recovery key option rather than iCloud for my work machine, iCloud for personal
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9dea2d8" class="outline-2"&gt;
&lt;h2 id="org9dea2d8"&gt;homebrew&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9dea2d8"&gt;
&lt;p&gt;
Still a one-liner, now bash rather than ruby:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
brew doctor
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Homebrew is installed to &lt;code&gt;/opt/local&lt;/code&gt; on an M1 Mac. This required
updating my PATH configuration. I added the following to my login
profile:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;if [[ -d /opt/homebrew ]]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
fi
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The new location required a number of changes to various login steps configuring
homebrew-installed components.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org54ffab6" class="outline-3"&gt;
&lt;h3 id="org54ffab6"&gt;CLI applications&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org54ffab6"&gt;
&lt;p&gt;
Many packages are installed later with additional elaboration or in as
dependencies for other applications; here are some more or less
standalone packages that I routinely install up front.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install git &amp;amp;&amp;amp; \
brew install wget &amp;amp;&amp;amp; \
brew install autojump &amp;amp;&amp;amp; \
brew install gcc &amp;amp;&amp;amp; \
brew install graphviz &amp;amp;&amp;amp; \
brew install latex2rtf &amp;amp;&amp;amp; \
brew install mcfly &amp;amp;&amp;amp; \
brew install pandoc &amp;amp;&amp;amp; \
brew install pngpaste &amp;amp;&amp;amp; \
brew install tmux &amp;amp;&amp;amp; \
brew install tree &amp;amp;&amp;amp; \
brew install fd &amp;amp;&amp;amp; \
brew install xsv &amp;amp;&amp;amp; \
brew install fzf &amp;amp;&amp;amp; \
brew install saml2aws &amp;amp;&amp;amp; \
brew install jq &amp;amp;&amp;amp; \
brew install duckdb &amp;amp;&amp;amp; \
brew install fswatch &amp;amp;&amp;amp; \
brew install node &amp;amp;&amp;amp; \
brew install htop
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga0e9de5" class="outline-3"&gt;
&lt;h3 id="orga0e9de5"&gt;desktop applications&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga0e9de5"&gt;
&lt;p&gt;
Homebrew installs desktop apps too! (the syntax has changed a bit)
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;for pkg in sizeup dash google-chrome mactex iterm2; do brew install --cask $pkg; done
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Some of the above (eg, sizeup, dropbox, dash) require licenses and
credentials that must be installed interactively.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge46ea4f" class="outline-2"&gt;
&lt;h2 id="orge46ea4f"&gt;iTerm2&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge46ea4f"&gt;
&lt;p&gt;
Install using homebrew above. Update a few settings.
&lt;/p&gt;

&lt;p&gt;
Preferences &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Keys and do these things:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;select "Left/right option key acts as": +Esc&lt;/li&gt;
&lt;li&gt;+ &amp;#x2013;&amp;gt; Keyboard shortcut "OPT+&amp;lt;left arrow&amp;gt;": Send Escape sequence "b"&lt;/li&gt;
&lt;li&gt;+ &amp;#x2013;&amp;gt; Keyboard shortcut "OPT+&amp;lt;right arrow&amp;gt;": Send Escape sequence "f"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
(may have to delete or replace an existing mapping)
&lt;/p&gt;

&lt;p&gt;
Default appearance:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Preferences &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Colors &amp;#x2013;&amp;gt; Color Presets &amp;#x2013;&amp;gt; Light Background&lt;/li&gt;
&lt;li&gt;Preferences &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Text &amp;#x2013;&amp;gt; Change Font &amp;#x2013;&amp;gt; 14 point&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Install shell integration:
&lt;/p&gt;

&lt;pre class="example"&gt;
curl -L https://iterm2.com/shell_integration/install_shell_integration.sh | bash
&lt;/pre&gt;


&lt;ul class="org-ul"&gt;
&lt;li&gt;Install python runtime by selecting "Scripts" &amp;#x2013;&amp;gt; "Manage" &amp;#x2013;&amp;gt; "Install Python Runtime".&lt;/li&gt;
&lt;li&gt;Enable the Python API under "Preferences" &amp;#x2013;&amp;gt; "General" &amp;#x2013;&amp;gt; "Magic"&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge59e279" class="outline-2"&gt;
&lt;h2 id="orge59e279"&gt;zsh&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge59e279"&gt;
&lt;p&gt;
zsh is the default shell on MacOS.
&lt;/p&gt;

&lt;p&gt;
Install my dotfiles.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~
git clone git@github.com:nhoffman/dotfiles.git
~/dotfiles/mac/install.py
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2d0a793" class="outline-2"&gt;
&lt;h2 id="org2d0a793"&gt;python&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2d0a793"&gt;
&lt;p&gt;
Ventura ships with Python 3.9.6 as &lt;code&gt;/usr/bin/python3&lt;/code&gt; with no
&lt;code&gt;python&lt;/code&gt; executable (or maybe it's installed with xcode tools - I forgot to check). That's nice, but I avoid using the system python for the most part.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgacf4485" class="outline-3"&gt;
&lt;h3 id="orgacf4485"&gt;pyvenv&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgacf4485"&gt;
&lt;p&gt;
My current method for managing python interpreters is to
use pyenv. See &lt;a href="https://realpython.com/intro-to-pyenv/"&gt;https://realpython.com/intro-to-pyenv/&lt;/a&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install zlib
brew install pyenv
brew install pyenv-virtualenv
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Install pyenv-update plugin:
&lt;/p&gt;

&lt;pre class="example"&gt;
git clone https://github.com/pyenv/pyenv-update.git $(pyenv root)/plugins/pyenv-update
&lt;/pre&gt;


&lt;p&gt;
added dotfiles/mac/zsh/pyenv.plugin.zsh
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-bash"&gt;if [[ -d "$HOME/.pyenv" ]]; then
    # echo "using pyenv"
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init --path)"
fi
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Install the most recent versions of 3.8, 3.9 and 3.10 and set 3.10 as the default.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;pyenv install $(pyenv install -l | grep '^  3.8' | tail -n1)
pyenv install $(pyenv install -l | grep '^  3.9' | tail -n1)
pyenv install $(pyenv install -l | grep '^  3.10' | tail -n1)
pyenv install $(pyenv install -l | grep '^  3.11' | tail -n1)
pyenv global $(pyenv install -l | grep '^  3.11' | tail -n1)
python3 -m pip install -U pip wheel
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
pyenv seems not to install a &lt;code&gt;python&lt;/code&gt; entrypoint. I'll see how it goes with
&lt;code&gt;python3&lt;/code&gt; only.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org39b89ac" class="outline-3"&gt;
&lt;h3 id="org39b89ac"&gt;pipx&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org39b89ac"&gt;
&lt;p&gt;
I'm trying out &lt;a href="https://github.com/pypa/pipx"&gt;pipx&lt;/a&gt; for installing standalone python-language commands outside
of project-level virtual environments.
&lt;/p&gt;

&lt;p&gt;
pipx recommends installation from homebrew, so that's what we'll go with:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-shell"&gt;brew install pipx
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The installation instructions include running &lt;code&gt;pipx ensurepath&lt;/code&gt;, but
this appears not to be necessary if &lt;code&gt;~/.local/bin&lt;/code&gt; is already added to
your PATH.
&lt;/p&gt;

&lt;p&gt;
Install some globally useful packages:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-shell"&gt;pipx install awscli
pipx install pgcli
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0906bad" class="outline-2"&gt;
&lt;h2 id="org0906bad"&gt;emacs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0906bad"&gt;
&lt;p&gt;
Since I moved off of Intel macs, I have been using the &lt;a href="https://github.com/d12frosted/homebrew-emacs-plus"&gt;Homebrew
emacs-plus&lt;/a&gt; project, which seems great so far.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install libressl
brew install aspell
brew install gpg
brew tap d12frosted/emacs-plus
brew install emacs-plus
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Edit: after emacs 39.1 came out, I updated with:
&lt;/p&gt;

&lt;pre class="example"&gt;
brew uninstall emacs-plus
brew install emacs-plus@29 --with-imagemagick --with-native-comp
&lt;/pre&gt;


&lt;p&gt;
Check out my .emacs.d and run setup scripts.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~
git clone git@github.com:nhoffman/emacs-config.git .emacs.d
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Run setup scripts:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~/.emacs.d
bin/python-setup.sh
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The main inconvenience was having to adapt my &lt;a href="https://github.com/nhoffman/emacs-config/blob/master/init.bash"&gt;startup script&lt;/a&gt; to juggle M1 Mac,
x86 Mac, and linux. Here's the relevant portion.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;if [[ $(uname) == 'Darwin' ]]; then
    if [[ $(uname -m) == 'arm64' ]]; then
	# assume we are using emacs-plus
	EMACS=/opt/homebrew/bin/emacs
	EMACS_BIN=/opt/homebrew/bin/emacsclient
    else
	EMACS=/Applications/Emacs.app/Contents/MacOS/Emacs
	EMACS_BIN=/Applications/Emacs.app/Contents/MacOS/bin
    fi
    alias emacs="$EMACS"
    # provides emacsclient
    export PATH=$EMACS_BIN:$PATH
else
    EMACS=$(readlink -f emacs)
fi
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org57c4060" class="outline-2"&gt;
&lt;h2 id="org57c4060"&gt;R&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org57c4060"&gt;
&lt;p&gt;
Installed with &lt;code&gt;brew install --cask r&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Some packages that I know I'll need:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;R --slave &amp;lt;&amp;lt; EOF
packages &amp;lt;- c("lattice", "RSQLite", "latticeExtra", "argparse", "data.table", "tidyverse")
install.packages(packages, repos="http://cran.fhcrc.org/", dependencies=TRUE, clean=TRUE, Ncpus=4)
EOF
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Wow, this takes a long time!
&lt;/p&gt;

&lt;p&gt;
Also:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install --cask rstudio
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org61692bb" class="outline-2"&gt;
&lt;h2 id="org61692bb"&gt;postgresql&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org61692bb"&gt;
&lt;p&gt;
Install from &lt;a href="https://postgresapp.com/downloads.html"&gt;https://postgresapp.com/downloads.html&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
This installs multiple versions of postgres. My zsh profiile includes the path
to the CLI for the latest version, eg:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;PATH="/Applications/Postgres.app/Contents/Versions/latest/bin:$PATH"
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf301302" class="outline-2"&gt;
&lt;h2 id="orgf301302"&gt;Docker desktop&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf301302"&gt;
&lt;p&gt;
Use Homebrew.
&lt;/p&gt;

&lt;pre class="example"&gt;
brew install --cask docker
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="notes"></category><category term="mac"></category></entry><entry><title>Remap keys for emacs on a remote Windows machine</title><link href="https://nhoffman.github.io/borborygmi/remap-keys-for-emacs.html" rel="alternate"></link><published>2023-04-02T00:00:00-07:00</published><updated>2023-04-02T00:00:00-07:00</updated><author><name>unknown</name></author><id>tag:nhoffman.github.io,2023-04-02:/borborygmi/remap-keys-for-emacs.html</id><summary type="html">&lt;p&gt;
I have been working on a Windows machine via remote desktop, and am
gradually making it bearable. Emacs is miraculously easy to install to
my user's account, but it was not immediately obvious how to reproduce
my usual configuration of mapping Option to ESC. One solution is
provided by &lt;a href="https://karabiner-elements.pqrs.org"&gt;Karabiner-Elements …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;
I have been working on a Windows machine via remote desktop, and am
gradually making it bearable. Emacs is miraculously easy to install to
my user's account, but it was not immediately obvious how to reproduce
my usual configuration of mapping Option to ESC. One solution is
provided by &lt;a href="https://karabiner-elements.pqrs.org"&gt;Karabiner-Elements&lt;/a&gt;, which supports complex rules for
keyboard remapping. Crucially, it's possible to remap keys only in the
context of a specific application. There are many community-provided
rules to use as a starting point: I adapted &lt;a href="https://ke-complex-modifications.pqrs.org/json/virtual_machine.json"&gt;this one&lt;/a&gt; to simply remap
left option to ESC. I created
&lt;code&gt;~/.config/karabiner/assets/complex_modifications/rdp_option_to_esc.json&lt;/code&gt;
with the following contents:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-json"&gt;{
  "title": "Remote Desktop - Left Option sends ESC",
  "rules": [
    {
      "description": "Left option key sends ESC in remote desktop only",
      "manipulators": [
	{
	  "type": "basic",
	  "from": {
	    "key_code": "left_option",
	    "modifiers": {
	      "optional": [
		"any"
	      ]
	    }
	  },
	  "to": [
	    {
	      "key_code": "escape"
	    }
	  ],
	  "conditions": [
	    {
	      "type": "frontmost_application_if",
	      "bundle_identifiers": [
		"^com\\.microsoft\\.rdc$",
		"^com\\.microsoft\\.rdc\\.",
		"^net\\.sf\\.cord$",
		"^com\\.thinomenon\\.RemoteDesktopConnection$",
		"^com\\.itap-mobile\\.qmote$",
		"^com\\.nulana\\.remotixmac$",
		"^com\\.p5sys\\.jump\\.mac\\.viewer$",
		"^com\\.p5sys\\.jump\\.mac\\.viewer\\.",
		"^com\\.teamviewer\\.TeamViewer$",
		"^com\\.vmware\\.horizon$",
		"^com\\.2X\\.Client\\.Mac$",
		"^com\\.OpenText\\.Exceed-TurboX-Client$",
		"^com\\.realvnc\\.vncviewer$",
		"^com\\.vmware\\.fusion$",
		"^com\\.vmware\\.horizon$",
		"^com\\.vmware\\.view$",
		"^com\\.parallels\\.desktop$",
		"^com\\.parallels\\.vm$",
		"^com\\.parallels\\.desktop\\.console$",
		"^org\\.virtualbox\\.app\\.VirtualBoxVM$",
		"^com\\.citrix\\.XenAppViewer$",
		"^com\\.vmware\\.proxyApp\\.",
		"^com\\.parallels\\.winapp\\.",
		"^com\\.geekspiff\\.chickenofthevnc$",
		"^net\\.sourceforge\\.chicken$",
		"^de\\.jinx\\.JollysFastVNC\\.",
		"^com\\.realvnc\\.vncviewer\\."
	      ]
	    }
	  ]
	}
      ]
    }
  ]
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
After adding the file, open the Karabiner-Elements settings from menu
bar icon, choose "Complex Modification", and enable "Remote Desktop -
Left Option sends ESC".
&lt;/p&gt;
</content><category term="notes"></category><category term="emacs"></category><category term="windows"></category></entry><entry><title>Mac M1 Monterey setup</title><link href="https://nhoffman.github.io/borborygmi/mac-setup-monterey-m1.html" rel="alternate"></link><published>2022-07-23T00:00:00-07:00</published><updated>2022-07-23T00:00:00-07:00</updated><author><name>unknown</name></author><id>tag:nhoffman.github.io,2022-07-23:/borborygmi/mac-setup-monterey-m1.html</id><summary type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgfaff838"&gt;system update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgc24342f"&gt;Developer tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgbcd5a63"&gt;system settings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org513faeb"&gt;turn off spelling autocorrect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orga7962c4"&gt;unmap Control + left,right&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org5c390e4"&gt;Turn on FileVault&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org34f6bf1"&gt;homebrew&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org743857d"&gt;CLI applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgf7e8c19"&gt;desktop applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgdf1543a"&gt;iTerm2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgc94ea75"&gt;zsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org368af73"&gt;python&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgf74c071"&gt;pyvenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org11eb363"&gt;pipx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgf91d11b"&gt;emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org2e2aa1e"&gt;R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgf9fba69"&gt;postgresql&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Yet another installation of my personal notes for setting up a new (or
cleanly installed) MacOS computer …&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgfaff838"&gt;system update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgc24342f"&gt;Developer tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgbcd5a63"&gt;system settings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org513faeb"&gt;turn off spelling autocorrect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orga7962c4"&gt;unmap Control + left,right&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org5c390e4"&gt;Turn on FileVault&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org34f6bf1"&gt;homebrew&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org743857d"&gt;CLI applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgf7e8c19"&gt;desktop applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgdf1543a"&gt;iTerm2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgc94ea75"&gt;zsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org368af73"&gt;python&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgf74c071"&gt;pyvenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org11eb363"&gt;pipx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgf91d11b"&gt;emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org2e2aa1e"&gt;R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgf9fba69"&gt;postgresql&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Yet another installation of my personal notes for setting up a new (or
cleanly installed) MacOS computer. The process changes just a bit with
each new OS version. I will try really hard to reproduce the steps in
an order that make then easiest to execute.
&lt;/p&gt;

&lt;p&gt;
This was not a re-installation (new laptop!), so no need to jump through the
hoops of downloading an installer, etc. Note that none of the steps below
require an Apple ID - I held off on signing in until the very end just to see if
it was possible.
&lt;/p&gt;

&lt;p&gt;
I do copy some things over from my previous computer, but it's pretty
minimal. Here's the command to gather up what I need to transfer.
&lt;/p&gt;

&lt;pre class="example"&gt;
tar -cf dotfiles.tar .gitconfig .gnupg .netrc .psqlrc .pypirc .ssh .aws .saml2aws .psqlrc .zprofile
&lt;/pre&gt;


&lt;p&gt;
It's also handy to know all of the projects I'm working on:
&lt;/p&gt;

&lt;pre class="example"&gt;
cd ~/src
for dname in */.git; do git -C $(dirname $dname) remote -v; done &amp;gt; remotes.txt
&lt;/pre&gt;

&lt;div id="outline-container-orgfaff838" class="outline-2"&gt;
&lt;h2 id="orgfaff838"&gt;system update&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgfaff838"&gt;
&lt;p&gt;
The first thing I did this time around was to perform a system software update
to get all of that waiting out of the way.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc24342f" class="outline-2"&gt;
&lt;h2 id="orgc24342f"&gt;Developer tools&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc24342f"&gt;
&lt;p&gt;
Also takes a while. This can be done from the command line:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;xcode-select --install
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbcd5a63" class="outline-2"&gt;
&lt;h2 id="orgbcd5a63"&gt;system settings&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbcd5a63"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org513faeb" class="outline-3"&gt;
&lt;h3 id="org513faeb"&gt;turn off spelling autocorrect&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org513faeb"&gt;
&lt;pre class="example"&gt;
System Preferences --&amp;gt; Keyboard --&amp;gt; Text tab --&amp;gt; unselect "Correct spelling automatically" and others
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga7962c4" class="outline-3"&gt;
&lt;h3 id="orga7962c4"&gt;unmap Control + left,right&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga7962c4"&gt;
&lt;p&gt;
I use Control plus the left and right arrow keys to move between
windows in emacs and tmux, so I disable the defaults.
&lt;/p&gt;

&lt;pre class="example"&gt;
System Preferences --&amp;gt; Keyboard --&amp;gt; Shortcuts --&amp;gt; uncheck mission control: move left/right a space
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5c390e4" class="outline-3"&gt;
&lt;h3 id="org5c390e4"&gt;Turn on FileVault&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5c390e4"&gt;
&lt;pre class="example"&gt;
System Preferences --&amp;gt; Security &amp;amp; privacy --&amp;gt; FileVault
&lt;/pre&gt;


&lt;p&gt;
I used a recovery key option rather than iCloud for my work machine, iCloud for personal
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org34f6bf1" class="outline-2"&gt;
&lt;h2 id="org34f6bf1"&gt;homebrew&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org34f6bf1"&gt;
&lt;p&gt;
Still a one-liner, now bash rather than ruby:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
brew doctor
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Homebrew is installed to &lt;code&gt;/opt/local&lt;/code&gt; on an M1 Mac. This required updating my PATH configuration. I added the following to my login profile:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;if [[ -d /opt/homebrew ]]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
fi
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The new location required a number of changes to various login steps configuring
homebrew-installed components.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org743857d" class="outline-3"&gt;
&lt;h3 id="org743857d"&gt;CLI applications&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org743857d"&gt;
&lt;p&gt;
Many packages are installed later with additional elaboration or in as
dependencies for other applications; here are some more or less
standalone packages that I routinely install up front.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install git &amp;amp;&amp;amp; \
brew install wget &amp;amp;&amp;amp; \
brew install autojump &amp;amp;&amp;amp; \
brew install gcc &amp;amp;&amp;amp; \
brew install graphviz &amp;amp;&amp;amp; \
brew install latex2rtf &amp;amp;&amp;amp; \
brew install mcfly &amp;amp;&amp;amp; \
brew install pandoc &amp;amp;&amp;amp; \
brew install pngpaste &amp;amp;&amp;amp; \
brew install tmux &amp;amp;&amp;amp; \
brew install tree &amp;amp;&amp;amp; \
brew install fd &amp;amp;&amp;amp; \
brew install xsv &amp;amp;&amp;amp; \
brew install fzf &amp;amp;&amp;amp; \
brew install saml2aws &amp;amp;&amp;amp; \
brew install jq &amp;amp;&amp;amp; \
brew install duckdb &amp;amp;&amp;amp; \
brew install fswatch &amp;amp;&amp;amp; \
brew install node
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf7e8c19" class="outline-3"&gt;
&lt;h3 id="orgf7e8c19"&gt;desktop applications&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf7e8c19"&gt;
&lt;p&gt;
Homebrew installs desktop apps too! (the syntax has changed a bit)
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;for pkg in dropbox sizeup dash google-chrome mactex iterm2; do brew install --cask $pkg; done
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Some of the above (eg, sizeup, dropbox, dash) require licenses and
credentials that must be installed interactively.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgdf1543a" class="outline-2"&gt;
&lt;h2 id="orgdf1543a"&gt;iTerm2&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdf1543a"&gt;
&lt;p&gt;
Install using homebrew above. Update a few settings.
&lt;/p&gt;

&lt;p&gt;
Preferences &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Keys and do these things:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;select "Left/right option key acts as": +Esc&lt;/li&gt;
&lt;li&gt;+ &amp;#x2013;&amp;gt; Keyboard shortcut "OPT+&amp;lt;left arrow&amp;gt;": Send Escape sequence "b"&lt;/li&gt;
&lt;li&gt;+ &amp;#x2013;&amp;gt; Keyboard shortcut "OPT+&amp;lt;right arrow&amp;gt;": Send Escape sequence "f"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
(may have to delete or replace an existing mapping)
&lt;/p&gt;

&lt;p&gt;
Default appearance:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Preferences &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Colors &amp;#x2013;&amp;gt; Color Presets &amp;#x2013;&amp;gt; Light Background&lt;/li&gt;
&lt;li&gt;Preferences &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Text &amp;#x2013;&amp;gt; Change Font &amp;#x2013;&amp;gt; 14 point&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Install shell integration:
&lt;/p&gt;

&lt;pre class="example"&gt;
curl -L https://iterm2.com/shell_integration/install_shell_integration.sh | bash
&lt;/pre&gt;


&lt;ul class="org-ul"&gt;
&lt;li&gt;Install python runtime by selecting "Scripts" &amp;#x2013;&amp;gt; "Manage" &amp;#x2013;&amp;gt; "Install Python Runtime".&lt;/li&gt;
&lt;li&gt;Enable the Python API under "Preferences" &amp;#x2013;&amp;gt; "General" &amp;#x2013;&amp;gt; "Magic"&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc94ea75" class="outline-2"&gt;
&lt;h2 id="orgc94ea75"&gt;zsh&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc94ea75"&gt;
&lt;p&gt;
zsh is the default shell on MacOS.
&lt;/p&gt;

&lt;p&gt;
Install my dotfiles.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~
git clone git@bitbucket.org:nhoffman/dotfiles.git
~/dotfiles/mac/install.py
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org368af73" class="outline-2"&gt;
&lt;h2 id="org368af73"&gt;python&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org368af73"&gt;
&lt;p&gt;
Monterey apparently provides Python 3.8.9 as &lt;code&gt;=/usr/bin/python3=&lt;/code&gt; with no
&lt;code&gt;=python=&lt;/code&gt; executable. I'm a little bit puzzled by this since my notes say that
Big Sur provided 3.9.5.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf74c071" class="outline-3"&gt;
&lt;h3 id="orgf74c071"&gt;pyvenv&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf74c071"&gt;
&lt;p&gt;
My current method for managing python interpreters is to
use pyenv. See &lt;a href="https://realpython.com/intro-to-pyenv/"&gt;https://realpython.com/intro-to-pyenv/&lt;/a&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install zlib
brew install pyenv
brew install pyenv-virtualenv
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Install pyenv-update plugin:
&lt;/p&gt;

&lt;pre class="example"&gt;
git clone https://github.com/pyenv/pyenv-update.git $(pyenv root)/plugins/pyenv-update
&lt;/pre&gt;


&lt;p&gt;
added dotfiles/mac/zsh/pyenv.plugin.zsh
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;if [[ -d "$HOME/.pyenv" ]]; then
    # echo "using pyenv"
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init --path)"
fi
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Install the most recent versions of 3.8, 3.9 and 3.10 and set 3.10 as the default.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;pyenv install $(pyenv install -l | grep '^  3.8' | tail -n1)
pyenv install $(pyenv install -l | grep '^  3.9' | tail -n1)
pyenv install $(pyenv install -l | grep '^  3.10' | tail -n1)
pyenv global $(pyenv install -l | grep '^  3.10' | tail -n1)
python3 -m pip install -U pip wheel
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
pyenv seems not to install a &lt;code&gt;=python=&lt;/code&gt; entrypoint. I'll see how it goes with
&lt;code&gt;=python3=&lt;/code&gt; only.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org11eb363" class="outline-3"&gt;
&lt;h3 id="org11eb363"&gt;pipx&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org11eb363"&gt;
&lt;p&gt;
I'm trying out &lt;a href="https://github.com/pypa/pipx"&gt;pipx&lt;/a&gt; for installing standalone python-language commands outside
of project-level virtual environments.
&lt;/p&gt;

&lt;p&gt;
pipx recommends installation from homebrew, so that's what we'll go with:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-shell"&gt;brew install pipx
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The installation instructions include running &lt;code&gt;=pipx ensurepath=&lt;/code&gt;, but this appears not to be necessary if &lt;code&gt;=~/.local/bin=&lt;/code&gt; is already added to your PATH.
&lt;/p&gt;

&lt;p&gt;
Install some globally useful packages:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-shell"&gt;pipx install awscli
pipx install pgcli
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf91d11b" class="outline-2"&gt;
&lt;h2 id="orgf91d11b"&gt;emacs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf91d11b"&gt;
&lt;p&gt;
This required a bit of a change. For a long time I have been installing binaries
from &lt;a href="http://emacsformacosx.com/"&gt;http://emacsformacosx.com/&lt;/a&gt;. This project provides universal binaries, and
the command line executables are found within the Emacs.app application bundle.
Unfortunately I ran into some errors in which magit seemed to load precompiled
code for the wrong architecture - this seemed like too much effort to figure out
given that there are alternatives out there. I wound up using the &lt;a href="https://github.com/d12frosted/homebrew-emacs-plus"&gt;Homebrew
emacs-plus&lt;/a&gt; project, which seems great so far.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install libressl
brew install aspell
brew install gpg
brew tap d12frosted/emacs-plus
brew install emacs-plus
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Check out my .emacs.d and run setup scripts.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~
git clone git@github.com:nhoffman/emacs-config.git .emacs.d
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Run setup scripts:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~/.emacs.d
bin/python-setup.sh
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The main inconvenience was having to adapt my startup script to juggle M1 Mac,
x86 Mac, and linux:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;if [[ $(uname) == 'Darwin' ]]; then
    if [[ $(uname -m) == 'arm64' ]]; then
	# assume we are using emacs-plus
	EMACS=/opt/homebrew/bin/emacs
	EMACS_BIN=/opt/homebrew/bin/emacsclient
    else
	EMACS=/Applications/Emacs.app/Contents/MacOS/Emacs
	EMACS_BIN=/Applications/Emacs.app/Contents/MacOS/bin
    fi
    alias emacs="$EMACS"
    # provides emacsclient
    export PATH=$EMACS_BIN:$PATH
else
    EMACS=$(readlink -f emacs)
fi
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2e2aa1e" class="outline-2"&gt;
&lt;h2 id="org2e2aa1e"&gt;R&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2e2aa1e"&gt;
&lt;p&gt;
I had to give up on installing R with homebrew because it seemed to result in an
interpreter that always wanted to install packages from source. So I used the
arm64 binary from &lt;a href="https://cran.r-project.org/bin/macosx/"&gt;https://cran.r-project.org/bin/macosx/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
For next time: pretty sure &lt;code&gt;=brew install --cask r=&lt;/code&gt; is equivalent.
&lt;/p&gt;

&lt;p&gt;
Some packages that I know I'll need:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;R --slave &amp;lt;&amp;lt; EOF
packages &amp;lt;- c("lattice", "RSQLite", "latticeExtra", "argparse", "data.table", "tidyverse")
install.packages(packages, repos="http://cran.fhcrc.org/", dependencies=TRUE, clean=TRUE, Ncpus=4)
EOF
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Wow, this takes a long time!
&lt;/p&gt;

&lt;p&gt;
Also:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install --cask rstudio
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf9fba69" class="outline-2"&gt;
&lt;h2 id="orgf9fba69"&gt;postgresql&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf9fba69"&gt;
&lt;p&gt;
Install from &lt;a href="https://postgresapp.com/downloads.html"&gt;https://postgresapp.com/downloads.html&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
This installs multiple versions of postgres. My zsh profiile includes the path
to the CLI for the latest version, eg:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;PATH="/Applications/Postgres.app/Contents/Versions/latest/bin:$PATH"
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="notes"></category><category term="mac"></category></entry><entry><title>Clean install of MacOS Big Sur</title><link href="https://nhoffman.github.io/borborygmi/mac-setup-big-sur.html" rel="alternate"></link><published>2021-05-20T00:00:00-07:00</published><updated>2021-05-20T00:00:00-07:00</updated><author><name>unknown</name></author><id>tag:nhoffman.github.io,2021-05-20:/borborygmi/mac-setup-big-sur.html</id><summary type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org642e869"&gt;system settings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org8cb430e"&gt;turn off spelling autocorrect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org18a9d71"&gt;unmap Control + left,right&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org5d8d381"&gt;Turn on FileVault&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org0255b45"&gt;Developer tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org307d19b"&gt;homebrew&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org624fb23"&gt;homebrew API token&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orge13d4d7"&gt;CLI applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org2a4b70f"&gt;desktop applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgcc463bf"&gt;iTerm2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org7b682c5"&gt;zsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org7a3e890"&gt;python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org7462a7c"&gt;emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgf550fa8"&gt;R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org84d03e8"&gt;postgresql&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Yet another installation of my personal notes for setting up a new (or
cleanly installed) MacOS computer. The …&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org642e869"&gt;system settings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org8cb430e"&gt;turn off spelling autocorrect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org18a9d71"&gt;unmap Control + left,right&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org5d8d381"&gt;Turn on FileVault&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org0255b45"&gt;Developer tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org307d19b"&gt;homebrew&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org624fb23"&gt;homebrew API token&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orge13d4d7"&gt;CLI applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org2a4b70f"&gt;desktop applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgcc463bf"&gt;iTerm2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org7b682c5"&gt;zsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org7a3e890"&gt;python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org7462a7c"&gt;emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgf550fa8"&gt;R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org84d03e8"&gt;postgresql&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Yet another installation of my personal notes for setting up a new (or
cleanly installed) MacOS computer. The process changes just a bit with
each new OS version. I will try really hard to reproduce the steps in
an order that make then easiest to execute.
&lt;/p&gt;

&lt;p&gt;
This time I need to document some details of the actual clean install
process: it seems to have become more complicated to boot from a
startup disk containing the Big Sur installer. It was necessary to
restart into recovery mode (hold down Command+r) and use the Startup
Security Utility (under the Utilities menu) to allow booting from
external media and not to require an internet connection to verify the
boot media. After this, I was able to select a startup disk by
restarting while holding down Option. After running that gauntlet, on
to the actual installation process (after which I restarted again in
recovery mode and restored the default security settings).
&lt;/p&gt;

&lt;p&gt;
I do copy some things over from my old computer, but it's pretty
minimal. Here's the command to gather up what I need to transfer.
&lt;/p&gt;

&lt;pre class="example"&gt;
tar -cf dotfiles.tar .gitconfig .gnupg .pypirc .ssh .aws .saml2aws .psqlrc .zprofile
&lt;/pre&gt;


&lt;p&gt;
It's also handy to know all of the projects I'm working on:
&lt;/p&gt;

&lt;pre class="example"&gt;
cd ~/src
for dname in */.git; do git -C $(dirname $dname) remote -v; done &amp;gt; remotes.txt
&lt;/pre&gt;


&lt;p&gt;
Note that none of the steps below require an Apple ID - I held off on
signing in until the very end just to see if it was possible.
&lt;/p&gt;

&lt;div id="outline-container-org642e869" class="outline-2"&gt;
&lt;h2 id="org642e869"&gt;system settings&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org642e869"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8cb430e" class="outline-3"&gt;
&lt;h3 id="org8cb430e"&gt;turn off spelling autocorrect&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org8cb430e"&gt;
&lt;pre class="example"&gt;
System Preferences --&amp;gt; Keyboard --&amp;gt; Text tab --&amp;gt; unselect "Correct spelling automatically" and others
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org18a9d71" class="outline-3"&gt;
&lt;h3 id="org18a9d71"&gt;unmap Control + left,right&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org18a9d71"&gt;
&lt;p&gt;
I use Control plus the left and right arrow keys to move between
windows in emacs and tmux, so I disable the defaults.
&lt;/p&gt;

&lt;pre class="example"&gt;
System Preferences --&amp;gt; Keyboard --&amp;gt; Shortcuts --&amp;gt; uncheck mission control: move left/right a space
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5d8d381" class="outline-3"&gt;
&lt;h3 id="org5d8d381"&gt;Turn on FileVault&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5d8d381"&gt;
&lt;pre class="example"&gt;
System Preferences --&amp;gt; Security &amp;amp; privacy --&amp;gt; FileVault
&lt;/pre&gt;


&lt;p&gt;
I used a recovery key option rather than iCloud for my work machine, iCloud for personal
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0255b45" class="outline-2"&gt;
&lt;h2 id="org0255b45"&gt;Developer tools&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0255b45"&gt;
&lt;p&gt;
Pretty much the first thing that needs to happen. This can be done
from the command line:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;xcode-select --install
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org307d19b" class="outline-2"&gt;
&lt;h2 id="org307d19b"&gt;homebrew&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org307d19b"&gt;
&lt;p&gt;
Homebrew no longer requires user-ownership of /usr/local, so things
are pretty easy now:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
brew doctor
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org624fb23" class="outline-3"&gt;
&lt;h3 id="org624fb23"&gt;homebrew API token&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org624fb23"&gt;
&lt;p&gt;
Apparently lots of requests to GitHub via homebrew can hit a rate limit. There's a higher limit if you create an API token. See &lt;a href="https://gist.github.com/christopheranderton/8644743"&gt;https://gist.github.com/christopheranderton/8644743&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Here's the url for the token creation dialog:
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://github.com/settings/tokens/new?scopes=&amp;amp;description=Homebrew"&gt;https://github.com/settings/tokens/new?scopes=&amp;amp;description=Homebrew&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Make sure that all 'scopes' are unchecked. Once you generate the token, add to your shell profile:
&lt;/p&gt;

&lt;pre class="example"&gt;
export HOMEBREW_GITHUB_API_TOKEN=token_here
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge13d4d7" class="outline-3"&gt;
&lt;h3 id="orge13d4d7"&gt;CLI applications&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge13d4d7"&gt;
&lt;p&gt;
Many packages are installed later with additional elaboration or in as
dependencies for other applications; here are some more or less
standalone packages that I routinely install.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install git &amp;amp;&amp;amp; \
brew install wget &amp;amp;&amp;amp; \
brew install autojump &amp;amp;&amp;amp; \
brew install gcc &amp;amp;&amp;amp; \
brew install graphviz &amp;amp;&amp;amp; \
brew install latex2rtf &amp;amp;&amp;amp; \
brew install pandoc &amp;amp;&amp;amp; \
brew install tmux &amp;amp;&amp;amp; \
brew install tree &amp;amp;&amp;amp; \
brew install fd &amp;amp;&amp;amp; \
brew install xsv &amp;amp;&amp;amp; \
brew install fzf &amp;amp;&amp;amp; \
brew install saml2aws &amp;amp;&amp;amp; \
brew install jq
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2a4b70f" class="outline-3"&gt;
&lt;h3 id="org2a4b70f"&gt;desktop applications&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2a4b70f"&gt;
&lt;p&gt;
Homebrew installs desktop apps too! (the syntax has changed a bit)
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;for pkg in dropbox sizeup dash google-chrome mactex iterm2; do brew install --cask $pkg; done
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Some of the above (eg, sizeup, dropbox, dash) require licenses and
credentials that must be installed interactively.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgcc463bf" class="outline-2"&gt;
&lt;h2 id="orgcc463bf"&gt;iTerm2&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgcc463bf"&gt;
&lt;p&gt;
Install using homebrew above. Update a few settings.
&lt;/p&gt;

&lt;p&gt;
Preferences &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Keys and do these things:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;select "Left/right option key acts as": +Esc&lt;/li&gt;
&lt;li&gt;+ &amp;#x2013;&amp;gt; Keyboard shortcut "OPT+&amp;lt;left arrow&amp;gt;": Send Escape sequence "b"&lt;/li&gt;
&lt;li&gt;+ &amp;#x2013;&amp;gt; Keyboard shortcut "OPT+&amp;lt;right arrow&amp;gt;": Send Escape sequence "f"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
(may have to delete or replace an existing mapping)
&lt;/p&gt;

&lt;p&gt;
Default appearance:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Preferences &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Colors &amp;#x2013;&amp;gt; Color Presets &amp;#x2013;&amp;gt; Light Background&lt;/li&gt;
&lt;li&gt;Preferences &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Text &amp;#x2013;&amp;gt; Change Font &amp;#x2013;&amp;gt; 14 point&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Install shell integration:
&lt;/p&gt;

&lt;pre class="example"&gt;
curl -L https://iterm2.com/shell_integration/install_shell_integration.sh | bash
&lt;/pre&gt;


&lt;ul class="org-ul"&gt;
&lt;li&gt;Install python runtime by selecting "Scripts" &amp;#x2013;&amp;gt; "Manage" &amp;#x2013;&amp;gt; "Install Python Runtime".&lt;/li&gt;
&lt;li&gt;Enable the Python API under "Preferences" &amp;#x2013;&amp;gt; "General" &amp;#x2013;&amp;gt; "Magic"&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7b682c5" class="outline-2"&gt;
&lt;h2 id="org7b682c5"&gt;zsh&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7b682c5"&gt;
&lt;p&gt;
Change shell to zsh. I'll just use the zsh shipped with the OS.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;chsh -s /bin/zsh $USER
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Install my dotfiles (relevant only to me)
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~
git clone git@bitbucket.org:nhoffman/dotfiles.git
~/dotfiles/mac/install.py
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7a3e890" class="outline-2"&gt;
&lt;h2 id="org7a3e890"&gt;python&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7a3e890"&gt;
&lt;p&gt;
My version of Big Sur provided Python 2.7.16 and 3.9.5. My most recent evolution of managing python interpreters is to use pyenv. See &lt;a href="https://realpython.com/intro-to-pyenv/"&gt;https://realpython.com/intro-to-pyenv/&lt;/a&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install zlib
brew install pyenv
brew install pyenv-virtualenv
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Install pyenv-update plugin:
&lt;/p&gt;

&lt;pre class="example"&gt;
git clone https://github.com/pyenv/pyenv-update.git $(pyenv root)/plugins/pyenv-update
&lt;/pre&gt;


&lt;p&gt;
added dotfiles/mac/zsh/pyenv.plugin.zsh
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;if [[ -d "$HOME/.pyenv" ]]; then
    # echo "using pyenv"
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init --path)"
fi
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Even though the OS version of python3 (3.9.5) is up to date, also
install this version via pyenv to avoid installing packages to create
a strict a separation from the system version as possible.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;pyenv install -v 3.9.5
pyenv global 3.9.5
pip3 install -U pip wheel
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Install 3.8.8 for projects expecting python 3.8
&lt;/p&gt;

&lt;pre class="example"&gt;
pyenv install -v 3.8.8
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7462a7c" class="outline-2"&gt;
&lt;h2 id="org7462a7c"&gt;emacs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7462a7c"&gt;
&lt;p&gt;
Install latest emacs binary from &lt;a href="http://emacsformacosx.com/"&gt;http://emacsformacosx.com/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Emacs needs a few homebrew packages
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install libressl
brew install aspell
brew install gpg
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Check out my .emacs.d and run setup scripts.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~
git clone git@github.com:nhoffman/emacs-config.git .emacs.d
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Run setup scripts:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~/.emacs.d
bin/python-setup.sh
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf550fa8" class="outline-2"&gt;
&lt;h2 id="orgf550fa8"&gt;R&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf550fa8"&gt;
&lt;p&gt;
I had to give up on installing R with homebrew because it seemed to
result in an interpreter that always wanted to install packages from
source. So I used the binary from &lt;a href="https://cran.r-project.org/bin/macosx/"&gt;https://cran.r-project.org/bin/macosx/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Some packages that I know I'll need:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;R --slave &amp;lt;&amp;lt; EOF
packages &amp;lt;- c("lattice", "RSQLite", "latticeExtra", "argparse", "data.table", "tidyverse")
install.packages(packages, repos="http://cran.fhcrc.org/", dependencies=TRUE, clean=TRUE, Ncpus=4)
EOF
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Wow, this takes a long time!
&lt;/p&gt;

&lt;p&gt;
Also:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install --cask rstudio
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org84d03e8" class="outline-2"&gt;
&lt;h2 id="org84d03e8"&gt;postgresql&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org84d03e8"&gt;
&lt;p&gt;
Install from &lt;a href="https://postgresapp.com/downloads.html"&gt;https://postgresapp.com/downloads.html&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
This installs multiple versions of postgres. You'll need to add the
path to the CLI for the version you want to use to your PATH, eg:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;export PATH=/Applications/Postgres.app/Contents/Versions/9.6/bin:$PATH
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="notes"></category><category term="mac"></category></entry><entry><title>Clean install of MacOS Catalina</title><link href="https://nhoffman.github.io/borborygmi/mac-setup-catalina.html" rel="alternate"></link><published>2020-04-11T00:00:00-07:00</published><updated>2020-04-11T00:00:00-07:00</updated><author><name>unknown</name></author><id>tag:nhoffman.github.io,2020-04-11:/borborygmi/mac-setup-catalina.html</id><summary type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org8e8f205"&gt;system settings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org9068f1a"&gt;turn off spelling autocorrect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgbaf17a9"&gt;unmap Control + left,right&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org093ddc8"&gt;Turn on FileVault&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org999b108"&gt;Developer tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org2f24e65"&gt;homebrew&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org290c52b"&gt;homebrew API token&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgd2502d5"&gt;CLI applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org057a5b5"&gt;desktop applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org36a2af1"&gt;packages in 3rd party taps&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orga9f72d7"&gt;saml2aws&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org4cadf64"&gt;iTerm2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org84f190b"&gt;python&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orga398f63"&gt;dependencies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org972c985"&gt;emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orga0dcb8c"&gt;zsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgfbdcf07"&gt;R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org02ea943"&gt;postgresql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org6db20b2"&gt;X11&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Another installation of my personal notes for setting up a …&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org8e8f205"&gt;system settings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org9068f1a"&gt;turn off spelling autocorrect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgbaf17a9"&gt;unmap Control + left,right&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org093ddc8"&gt;Turn on FileVault&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org999b108"&gt;Developer tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org2f24e65"&gt;homebrew&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org290c52b"&gt;homebrew API token&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgd2502d5"&gt;CLI applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org057a5b5"&gt;desktop applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org36a2af1"&gt;packages in 3rd party taps&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orga9f72d7"&gt;saml2aws&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org4cadf64"&gt;iTerm2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org84f190b"&gt;python&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orga398f63"&gt;dependencies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org972c985"&gt;emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orga0dcb8c"&gt;zsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgfbdcf07"&gt;R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org02ea943"&gt;postgresql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org6db20b2"&gt;X11&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Another installation of my personal notes for setting up a new (or
cleanly installed) MacOS computer. The process changes just a bit with
each new OS version. This time I will try really hard to reproduce the
steps in order.
&lt;/p&gt;

&lt;p&gt;
I definitely carry some things over from my old computer, but it's
pretty minimal. Here's the command to gather up what I need to transfer.
&lt;/p&gt;

&lt;pre class="example"&gt;
tar -cf dotfiles.tar .Xmodmap .gitconfig .gnupg .pypirc .ssh .aws .saml2aws
&lt;/pre&gt;


&lt;p&gt;
It's also handy to know all of the projects I'm working on:
&lt;/p&gt;

&lt;pre class="example"&gt;
cd ~/src
for dname in */.git; do git -C $(dirname $dname) remote -v; done &amp;gt; remotes.txt
&lt;/pre&gt;


&lt;p&gt;
Note that none of these steps require an Apple ID - I held off on
signing in until the very end just to see if it was possible.
&lt;/p&gt;

&lt;div id="outline-container-org8e8f205" class="outline-2"&gt;
&lt;h2 id="org8e8f205"&gt;system settings&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8e8f205"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9068f1a" class="outline-3"&gt;
&lt;h3 id="org9068f1a"&gt;turn off spelling autocorrect&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org9068f1a"&gt;
&lt;pre class="example"&gt;
System Preferences --&amp;gt; Keyboard --&amp;gt; Text tab --&amp;gt; unselect "Correct spelling automatically" and others
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgbaf17a9" class="outline-3"&gt;
&lt;h3 id="orgbaf17a9"&gt;unmap Control + left,right&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgbaf17a9"&gt;
&lt;p&gt;
I use Control plus the left and right arrow keys to move between
windows in emacs and tmux.
&lt;/p&gt;

&lt;pre class="example"&gt;
System Preferences --&amp;gt; Keyboard --&amp;gt; Shortcuts --&amp;gt; uncheck mission control: move left/right a space
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org093ddc8" class="outline-3"&gt;
&lt;h3 id="org093ddc8"&gt;Turn on FileVault&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org093ddc8"&gt;
&lt;pre class="example"&gt;
System Preferences --&amp;gt; Security &amp;amp; privacy --&amp;gt; FileVault
&lt;/pre&gt;


&lt;p&gt;
I used a recovery key option rather than iCloud for my work machine, iCloud for personal
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org999b108" class="outline-2"&gt;
&lt;h2 id="org999b108"&gt;Developer tools&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org999b108"&gt;
&lt;p&gt;
Pretty much the first thing that needs to happen. This can be done
from the command line:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;xcode-select --install
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2f24e65" class="outline-2"&gt;
&lt;h2 id="org2f24e65"&gt;homebrew&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2f24e65"&gt;
&lt;p&gt;
Homebrew no longer requires user-ownership of /usr/local, so things
are pretty easy now:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
brew doctor
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org290c52b" class="outline-3"&gt;
&lt;h3 id="org290c52b"&gt;homebrew API token&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org290c52b"&gt;
&lt;p&gt;
Apparently lots of requests to GutHub via homebrew can hit a rate limit. There's a higher limit if you create an API token. See &lt;a href="https://gist.github.com/christopheranderton/8644743"&gt;https://gist.github.com/christopheranderton/8644743&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Here's the url for the token creation dialog:
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://github.com/settings/tokens/new?scopes=&amp;amp;description=Homebrew"&gt;https://github.com/settings/tokens/new?scopes=&amp;amp;description=Homebrew&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Make sure that all 'scopes' are unchecked. Once you generate the token, add to your shell profile:
&lt;/p&gt;

&lt;pre class="example"&gt;
export HOMEBREW_GITHUB_API_TOKEN=token_here
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd2502d5" class="outline-3"&gt;
&lt;h3 id="orgd2502d5"&gt;CLI applications&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgd2502d5"&gt;
&lt;p&gt;
Many packages are installed later with additional elaboration or in as
dependencies for other applications; here are some more or less
standalone packages that I routinely install.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install git &amp;amp;&amp;amp; \
brew install wget &amp;amp;&amp;amp; \
brew install autojump &amp;amp;&amp;amp; \
brew install gcc &amp;amp;&amp;amp; \
brew install graphviz &amp;amp;&amp;amp; \
brew install latex2rtf &amp;amp;&amp;amp; \
brew install pandoc &amp;amp;&amp;amp; \
brew install tmux &amp;amp;&amp;amp; \
brew install tree &amp;amp;&amp;amp; \
brew install fd &amp;amp;&amp;amp; \
brew install xsv
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org057a5b5" class="outline-3"&gt;
&lt;h3 id="org057a5b5"&gt;desktop applications&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org057a5b5"&gt;
&lt;p&gt;
Homebrew installs desktop apps too!
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew cask install dropbox
brew cask install sizeup
brew cask install dash
brew cask install google-chrome
brew cask install java
brew cask install mactex
brew cask install texmaker
brew cask install firefox
brew cask install docker
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Some of the above (eg, sizeup, dropbox, dash) require licenses and
credentials that must be installed interactively.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org36a2af1" class="outline-3"&gt;
&lt;h3 id="org36a2af1"&gt;packages in 3rd party taps&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org36a2af1"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga9f72d7" class="outline-4"&gt;
&lt;h4 id="orga9f72d7"&gt;saml2aws&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orga9f72d7"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew tap versent/homebrew-taps
brew install saml2aws
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4cadf64" class="outline-2"&gt;
&lt;h2 id="org4cadf64"&gt;iTerm2&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4cadf64"&gt;
&lt;p&gt;
The homebrew version gave an error on launch with a message about not
being supported on Catalina, and rather than fight with it, I just
downloaded an installer from the project site.
&lt;/p&gt;

&lt;p&gt;
Update a few settings.
&lt;/p&gt;

&lt;p&gt;
Preferences &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Keys and do these things:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;select "Left/right option key acts as": +Esc&lt;/li&gt;
&lt;li&gt;+ &amp;#x2013;&amp;gt; Keyboard shortcut "OPT+&amp;lt;left arrow&amp;gt;": Send Escape sequence "b"&lt;/li&gt;
&lt;li&gt;+ &amp;#x2013;&amp;gt; Keyboard shortcut "OPT+&amp;lt;right arrow&amp;gt;": Send Escape sequence "f"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Default appearance:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Preferences &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Colors &amp;#x2013;&amp;gt; Color Presets &amp;#x2013;&amp;gt; Light Background&lt;/li&gt;
&lt;li&gt;Preferences &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Text &amp;#x2013;&amp;gt; Change Font &amp;#x2013;&amp;gt; 14 point&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org84f190b" class="outline-2"&gt;
&lt;h2 id="org84f190b"&gt;python&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org84f190b"&gt;
&lt;p&gt;
My version of Catalina provided Python 2.7.16 and 3.7.3, so let's use
homebrew to get recent version of python3.
&lt;/p&gt;

&lt;p&gt;
I try to limit packages installed to the system to utilities that are
very frequently used outside of the context of a virtualenv.
&lt;/p&gt;

&lt;p&gt;
See
&lt;a href="https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/Homebrew-and-Python.md"&gt;https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/Homebrew-and-Python.md&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga398f63" class="outline-3"&gt;
&lt;h3 id="orga398f63"&gt;dependencies&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga398f63"&gt;
&lt;p&gt;
Run &lt;code&gt;brew info python&lt;/code&gt; for required and optional dependencies
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;for pkg in sphinx-doc pkg-config readline sqlite gdbm berkeley-db@4 tcl-tk xz; do brew install $pkg; done
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Note that "python" corresponds to the python3 homebrew recipe.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install python
/usr/local/bin/pip3 install -U pip wheel
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
A limited selection of packages - better to use virtualenvs!
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;pip3 install --user ansible
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org972c985" class="outline-2"&gt;
&lt;h2 id="org972c985"&gt;emacs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org972c985"&gt;
&lt;p&gt;
Install latest emacs binary from &lt;a href="http://emacsformacosx.com/"&gt;http://emacsformacosx.com/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Emacs needs a few homebrew packages
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install libressl
brew install aspell
brew install gpg
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Check out my .emacs.d and run setup scripts.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~
git clone git@github.com:nhoffman/emacs-config.git .emacs.d
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Run setup scripts:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~/.emacs.d

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga0dcb8c" class="outline-2"&gt;
&lt;h2 id="orga0dcb8c"&gt;zsh&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga0dcb8c"&gt;
&lt;p&gt;
Install zsh with Homebrew
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install zsh
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Change shell to zsh
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;sudo -s
echo /usr/local/bin/zsh &amp;gt;&amp;gt; /etc/shells
exit
chsh -s /usr/local/bin/zsh $USER
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Install my dotfiles (relevant only to me)
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~
git clone git@bitbucket.org:nhoffman/dotfiles.git
~/dotfiles/mac/install.py
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgfbdcf07" class="outline-2"&gt;
&lt;h2 id="orgfbdcf07"&gt;R&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgfbdcf07"&gt;
&lt;p&gt;
I had to give up on installing R with homebrew because it seemed to
result in an interpreter that always wanted to install packages from
source. So I used the binary from &lt;a href="https://cran.r-project.org/bin/macosx/"&gt;https://cran.r-project.org/bin/macosx/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Some packages that I know I'll need:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;R --slave &amp;lt;&amp;lt; EOF
packages &amp;lt;- c("lattice", "RSQLite", "latticeExtra", "argparse", "data.table", "tidyverse")
install.packages(packages, repos="http://cran.fhcrc.org/", dependencies=TRUE, clean=TRUE, Ncpus=4)
EOF
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Wow, this takes a long time!
&lt;/p&gt;

&lt;p&gt;
Also:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew cask install rstudio
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org02ea943" class="outline-2"&gt;
&lt;h2 id="org02ea943"&gt;postgresql&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org02ea943"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew cask install postgres
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This installs multiple versions of postgres. You'll need to add the
path to the CLI for the version you want to use to your PATH, eg:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;export PATH=/Applications/Postgres.app/Contents/Versions/9.6/bin:$PATH
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6db20b2" class="outline-2"&gt;
&lt;h2 id="org6db20b2"&gt;X11&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6db20b2"&gt;
&lt;p&gt;
install Xquartz
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install caskroom/cask/xquartz
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
X11 key bindings so that the option key is used for Meta. Not so
relevant any more now that I rarely use emacs via X11 for remote
sessions.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cat &amp;gt; ~/.Xmodmap &amp;lt;&amp;lt;EOF
clear Mod1
clear Mod2
keycode 63 = Mode_switch
keycode 66 = Meta_L
add Mod1 = Meta_L
add Mod2 = Mode_switch
EOF
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="notes"></category><category term="mac"></category></entry><entry><title>Clean install of MacOS Mojave</title><link href="https://nhoffman.github.io/borborygmi/mac-setup-mojave.html" rel="alternate"></link><published>2019-02-15T00:00:00-08:00</published><updated>2019-02-15T00:00:00-08:00</updated><author><name>unknown</name></author><id>tag:nhoffman.github.io,2019-02-15:/borborygmi/mac-setup-mojave.html</id><summary type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orge49e610"&gt;system settings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org19c2bb7"&gt;turn off spelling autocorrect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org066f6dd"&gt;unmap Control + left,right&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgbc2d2dc"&gt;Turn on FileVault&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgeadfc11"&gt;Developer tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org07ac198"&gt;iTerm2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgf636cab"&gt;homebrew&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgf8f2f70"&gt;homebrew API token&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org7fac6be"&gt;Terminal applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org99a7257"&gt;desktop applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org7eee63c"&gt;python&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org47802db"&gt;dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org8c93011"&gt;python2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org3ad634d"&gt;python3&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgc59b758"&gt;scons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgf2cff91"&gt;emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgf9fa22d"&gt;zsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgbbdc778"&gt;R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org4124e35"&gt;postgresql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org8fa89c7"&gt;X11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org8b791fa"&gt;virtualbox and vagrant&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgbcd2a3f"&gt;install an ubuntu16.04 VM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Another installation of my personal …&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orge49e610"&gt;system settings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org19c2bb7"&gt;turn off spelling autocorrect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org066f6dd"&gt;unmap Control + left,right&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgbc2d2dc"&gt;Turn on FileVault&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgeadfc11"&gt;Developer tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org07ac198"&gt;iTerm2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgf636cab"&gt;homebrew&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgf8f2f70"&gt;homebrew API token&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org7fac6be"&gt;Terminal applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org99a7257"&gt;desktop applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org7eee63c"&gt;python&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org47802db"&gt;dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org8c93011"&gt;python2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org3ad634d"&gt;python3&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgc59b758"&gt;scons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgf2cff91"&gt;emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgf9fa22d"&gt;zsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgbbdc778"&gt;R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org4124e35"&gt;postgresql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org8fa89c7"&gt;X11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org8b791fa"&gt;virtualbox and vagrant&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgbcd2a3f"&gt;install an ubuntu16.04 VM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Another installation of my personal notes for setting up a new (or
cleanly installed) MacOS computer. The process changes just a bit with
each new OS version. I have made an attempt to record the steps in
order (for example, even entering commands is somewhat painful until I
have iTerm with familiar keyboard settings).
&lt;/p&gt;

&lt;p&gt;
Somewhat glossed over here are manual steps used to transfer
non-public dotfiles, credentials, etc. Here's a partial list of files
and directories that I copied directly from my old laptop:
&lt;/p&gt;

&lt;pre class="example"&gt;
tar -cf dotfiles.tar .Xmodmap .gitconfig .gnupg .pypirc .ssh
&lt;/pre&gt;


&lt;p&gt;
Note that none of these steps require an Apple ID - I held off on
signing in until the very end just to see if it was possible.
&lt;/p&gt;

&lt;div id="outline-container-orge49e610" class="outline-2"&gt;
&lt;h2 id="orge49e610"&gt;system settings&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge49e610"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org19c2bb7" class="outline-3"&gt;
&lt;h3 id="org19c2bb7"&gt;turn off spelling autocorrect&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org19c2bb7"&gt;
&lt;pre class="example"&gt;
System Preferences --&amp;gt; Keyboard --&amp;gt; Text tab --&amp;gt; unselect "Correct spelling automatically" and others
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org066f6dd" class="outline-3"&gt;
&lt;h3 id="org066f6dd"&gt;unmap Control + left,right&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org066f6dd"&gt;
&lt;p&gt;
I use Control plus the left and right arrow keys to move between
windows in emacs and tmux.
&lt;/p&gt;

&lt;pre class="example"&gt;
System Preferences --&amp;gt; Keyboard --&amp;gt; Shortcuts --&amp;gt; uncheck mission control: move left/right a space
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbc2d2dc" class="outline-3"&gt;
&lt;h3 id="orgbc2d2dc"&gt;Turn on FileVault&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgbc2d2dc"&gt;
&lt;pre class="example"&gt;
System Preferences --&amp;gt; Security &amp;amp; privacy --&amp;gt; FileVault
&lt;/pre&gt;


&lt;p&gt;
I used a recovery key option rather than iCloud for my work machine, iCloud for personal
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgeadfc11" class="outline-2"&gt;
&lt;h2 id="orgeadfc11"&gt;Developer tools&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgeadfc11"&gt;
&lt;p&gt;
Pretty much the first thing that needs to happen. This can be done
from the command line:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;xcode-select --install
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org07ac198" class="outline-2"&gt;
&lt;h2 id="org07ac198"&gt;iTerm2&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org07ac198"&gt;
&lt;pre class="example"&gt;
brew cask install iterm2
&lt;/pre&gt;

&lt;p&gt;
Update a few settings.
&lt;/p&gt;

&lt;p&gt;
Preferences &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Keys and do these things:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;select "Left/right option key acts as": +Esc&lt;/li&gt;
&lt;li&gt;+ &amp;#x2013;&amp;gt; Keyboard shortcut "OPT+&amp;lt;left arrow&amp;gt;": Send Escape sequence "b"&lt;/li&gt;
&lt;li&gt;+ &amp;#x2013;&amp;gt; Keyboard shortcut "OPT+&amp;lt;right arrow&amp;gt;": Send Escape sequence "f"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Default appearance:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Preferences &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Colors &amp;#x2013;&amp;gt; Load Presets &amp;#x2013;&amp;gt; Light Background&lt;/li&gt;
&lt;li&gt;Preferences &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Text &amp;#x2013;&amp;gt; Change Font &amp;#x2013;&amp;gt; 14 point&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf636cab" class="outline-2"&gt;
&lt;h2 id="orgf636cab"&gt;homebrew&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf636cab"&gt;
&lt;p&gt;
Homebrew no longer requires user-ownership of /usr/local, so things
are pretty easy now:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
brew doctor
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf8f2f70" class="outline-3"&gt;
&lt;h3 id="orgf8f2f70"&gt;homebrew API token&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf8f2f70"&gt;
&lt;p&gt;
Apparently lots of requests to GutHub via homebrew can hit a rate limit. There's a higher limit if you create an API token. See &lt;a href="https://gist.github.com/christopheranderton/8644743"&gt;https://gist.github.com/christopheranderton/8644743&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Here's the url for the token creation dialog:
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://github.com/settings/tokens/new?scopes=&amp;amp;description=Homebrew"&gt;https://github.com/settings/tokens/new?scopes=&amp;amp;description=Homebrew&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Make sure that all 'scopes' are unchecked. Once you generate the token, add to your shell profile:
&lt;/p&gt;

&lt;pre class="example"&gt;
export HOMEBREW_GITHUB_API_TOKEN=token_here
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7fac6be" class="outline-3"&gt;
&lt;h3 id="org7fac6be"&gt;Terminal applications&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7fac6be"&gt;
&lt;p&gt;
Many packages are installed later with additional elaboration or in as
dependencies for other applications; here are some more or less
standalone packages that I routinely install.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install git &amp;amp;&amp;amp; \
brew install wget &amp;amp;&amp;amp; \
brew install autojump &amp;amp;&amp;amp; \
brew install gcc &amp;amp;&amp;amp; \
brew install graphviz &amp;amp;&amp;amp; \
brew install latex2rtf &amp;amp;&amp;amp; \
brew install pandoc &amp;amp;&amp;amp; \
brew install tmux &amp;amp;&amp;amp; \
brew install tree &amp;amp;&amp;amp; \
brew install fd &amp;amp;&amp;amp; \
brew install xsv
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org99a7257" class="outline-3"&gt;
&lt;h3 id="org99a7257"&gt;desktop applications&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org99a7257"&gt;
&lt;p&gt;
Homebrew installs desktop apps too!
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew cask install dropbox
brew cask install sizeup
brew cask install dash
brew cask install google-chrome
brew cask install java
brew cask install mactex
brew cask install texmaker
brew cask install firefox
brew cask install docker
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Some of the above (eg, sizeup, dropbox, dash) require licenses and
credentials that must be installed interactively.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7eee63c" class="outline-2"&gt;
&lt;h2 id="org7eee63c"&gt;python&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7eee63c"&gt;
&lt;p&gt;
Mojave seems to ship with Python 2.7.10 and no python3, so let's use
homebrew to get recent versions of both.
&lt;/p&gt;

&lt;p&gt;
I try to limit packages installed to the system to utilities that are
very frequently used outside of the context of a virtualenv.
&lt;/p&gt;

&lt;p&gt;
See
&lt;a href="https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/Homebrew-and-Python.md"&gt;https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/Homebrew-and-Python.md&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org47802db" class="outline-3"&gt;
&lt;h3 id="org47802db"&gt;dependencies&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org47802db"&gt;
&lt;p&gt;
Run &lt;code&gt;brew info python&lt;/code&gt; for required and optional dependencies
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;for pkg in sphinx-doc pkg-config readline sqlite gdbm berkeley-db@4 tcl-tk xz; do brew install $pkg; done
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8c93011" class="outline-3"&gt;
&lt;h3 id="org8c93011"&gt;python2&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org8c93011"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install python@2
/usr/local/bin/pip2 install -U pip setuptools virtualenv wheel
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3ad634d" class="outline-3"&gt;
&lt;h3 id="org3ad634d"&gt;python3&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3ad634d"&gt;
&lt;p&gt;
Note that "python" corresponds to the python3 homebrew recipe.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install python
/usr/local/bin/pip3 install -U pip wheel
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
A limited selection of packages - better to use virtualenvs!
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;pip3 install ansible
pip3 install csvkit
pip3 install pgcli
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc59b758" class="outline-4"&gt;
&lt;h4 id="orgc59b758"&gt;scons&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgc59b758"&gt;
&lt;p&gt;
Note that &lt;code&gt;scons&lt;/code&gt; wants to install man pages to &lt;code&gt;/usr/local/man&lt;/code&gt;, which is owned by root. You'll need to do this first:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;sudo mkdir -p /usr/local/man
sudo chown $(whoami) /usr/local/man
pip3 install scons
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf2cff91" class="outline-2"&gt;
&lt;h2 id="orgf2cff91"&gt;emacs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf2cff91"&gt;
&lt;p&gt;
Install latest emacs binary from &lt;a href="http://emacsformacosx.com/"&gt;http://emacsformacosx.com/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Emacs needs a few homebrew packages
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install libressl
brew install aspell
brew install gpg
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Check out my .emacs.d and run setup scripts.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~
git clone --recurse-submodules git@github.com:nhoffman/.emacs.d.git
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
For elpy:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~/.emacs.d
bin/venv.sh
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf9fa22d" class="outline-2"&gt;
&lt;h2 id="orgf9fa22d"&gt;zsh&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf9fa22d"&gt;
&lt;p&gt;
Install zsh with Homebrew
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install zsh
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Change shell to zsh
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;sudo -s
echo /usr/local/bin/zsh &amp;gt;&amp;gt; /etc/shells
exit
chsh -s /usr/local/bin/zsh $USER
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Install my dotfiles (relevant only to me)
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~
git clone git@bitbucket.org:nhoffman/dotfiles.git
~/dotfiles/mac/install.py
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbbdc778" class="outline-2"&gt;
&lt;h2 id="orgbbdc778"&gt;R&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbbdc778"&gt;
&lt;p&gt;
I had to give up on installing R with homebrew because it seemed to
result in an interpreter that always wanted to install packages from
source. So I used the binary from &lt;a href="https://cran.r-project.org/bin/macosx/"&gt;https://cran.r-project.org/bin/macosx/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Some packages that I know I'll need:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;R --slave &amp;lt;&amp;lt; EOF
packages &amp;lt;- c("lattice", "RSQLite", "latticeExtra", "argparse", "data.table", "tidyverse")
install.packages(packages, repos="http://cran.fhcrc.org/", dependencies=TRUE, clean=TRUE, Ncpus=4)
EOF
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Wow, this takes a long time!
&lt;/p&gt;

&lt;p&gt;
Also:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew cask install rstudio
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4124e35" class="outline-2"&gt;
&lt;h2 id="org4124e35"&gt;postgresql&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4124e35"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew cask install postgres
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This installs multiple versions of postgres. You'll need to add the
path to the CLI for the version you want to use to your PATH, eg:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;export PATH=/Applications/Postgres.app/Contents/Versions/9.6/bin:$PATH
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8fa89c7" class="outline-2"&gt;
&lt;h2 id="org8fa89c7"&gt;X11&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8fa89c7"&gt;
&lt;p&gt;
install Xquartz
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install caskroom/cask/xquartz
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
X11 key bindings so that the option key is used for Meta. Not so
relevant any more now that I rarely use emacs via X11 for remote
sessions.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cat &amp;gt; ~/.Xmodmap &amp;lt;&amp;lt;EOF
clear Mod1
clear Mod2
keycode 63 = Mode_switch
keycode 66 = Meta_L
add Mod1 = Meta_L
add Mod2 = Mode_switch
EOF
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8b791fa" class="outline-2"&gt;
&lt;h2 id="org8b791fa"&gt;virtualbox and vagrant&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8b791fa"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew cask install virtualbox
brew cask install vagrant
brew cask install vagrant-manager
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The command to install virtualbox will prompt you to allow a kernel
extension in system preferences.
&lt;/p&gt;

&lt;p&gt;
After virtualbox is installed, launch the application, go to
preferences, and change default machine folder to ~/VirtualBox
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;available vagrant images:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;a href="https://app.vagrantup.com/boxes/search"&gt;https://app.vagrantup.com/boxes/search&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbcd2a3f" class="outline-3"&gt;
&lt;h3 id="orgbcd2a3f"&gt;install an ubuntu16.04 VM&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgbcd2a3f"&gt;
&lt;p&gt;
see &lt;a href="https://app.vagrantup.com/ubuntu/boxes/xenial64"&gt;https://app.vagrantup.com/ubuntu/boxes/xenial64&lt;/a&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;mkdir -p ~/vagrant/xenial64
cd ~/vagrant/xenial64
vagrant init ubuntu/xenial64
vagrant up
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="notes"></category><category term="mac"></category></entry><entry><title>Clean install of MacOS High Sierra</title><link href="https://nhoffman.github.io/borborygmi/mac-setup-high-sierra.html" rel="alternate"></link><published>2017-11-17T00:00:00-08:00</published><updated>2017-11-17T00:00:00-08:00</updated><author><name>unknown</name></author><id>tag:nhoffman.github.io,2017-11-17:/borborygmi/mac-setup-high-sierra.html</id><summary type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org1e06852"&gt;system settings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orga1b77c8"&gt;turn off spelling autocorrect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org390527b"&gt;unmap Control + left,right&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org10a7537"&gt;Turn on FileVault&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org2c4eb9c"&gt;Developer tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org893c499"&gt;homebrew&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgcdee0c6"&gt;homebrew API token&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org42756f3"&gt;python&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org5ed7850"&gt;dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org1e4b0f5"&gt;python2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org1e164dd"&gt;python3&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgd8b21bf"&gt;scons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org4ce9f7e"&gt;emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgef6e48e"&gt;zsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgf813be8"&gt;desktop apps&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org89b4fac"&gt;iTerm2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org65b239d"&gt;postgresql&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org24f5c15"&gt;R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org53eb21e"&gt;X11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org38a56bf"&gt;virtualbox and vagrant&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgb61fbda"&gt;install an ubuntu16.04 VM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I make it a practice to blow …&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org1e06852"&gt;system settings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orga1b77c8"&gt;turn off spelling autocorrect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org390527b"&gt;unmap Control + left,right&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org10a7537"&gt;Turn on FileVault&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org2c4eb9c"&gt;Developer tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org893c499"&gt;homebrew&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgcdee0c6"&gt;homebrew API token&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org42756f3"&gt;python&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org5ed7850"&gt;dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org1e4b0f5"&gt;python2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org1e164dd"&gt;python3&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgd8b21bf"&gt;scons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org4ce9f7e"&gt;emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgef6e48e"&gt;zsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgf813be8"&gt;desktop apps&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org89b4fac"&gt;iTerm2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org65b239d"&gt;postgresql&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org24f5c15"&gt;R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org53eb21e"&gt;X11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org38a56bf"&gt;virtualbox and vagrant&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgb61fbda"&gt;install an ubuntu16.04 VM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I make it a practice to blow away previous versions of the OS and
start with a clean install each time there's a major update. Why do
this?
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;In my experience, clean installs result in a more stable system.&lt;/li&gt;
&lt;li&gt;I try to maintain a system that is easily bootstrapped, and this is
pretty much the only way to reliably test that process.&lt;/li&gt;
&lt;li&gt;I want to make sure that everything that I really care about on my
computer is replicated someplace, either using a cloud service
(mostly Dropbox), or in git repositories. This forces the issue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Once again, homebrew is the foundation of my setup. I used homebrew to
install not only command line programs and languages (python, R), but
also as many desktop apps as I could (Chrome, x11) that would
otherwise have been installed manually by hunting down an
installer. Each time I go through this, homebrew takes care of more
and more apps.
&lt;/p&gt;

&lt;p&gt;
Somewhat glossed over here are manual steps used to transfer
non-public dotfiles, credentials, etc. Here's a partial list of files
and directories that I copied directly from my old laptop:
&lt;/p&gt;

&lt;pre class="example"&gt;
tar -cf dotfiles.tar .Xmodmap .gitconfig .gnupg .pypirc .ssh
&lt;/pre&gt;


&lt;p&gt;
Note that none of these steps require an Apple ID - I held off on
signing in until the very end just to see if it was possible.
&lt;/p&gt;

&lt;div id="outline-container-org1e06852" class="outline-2"&gt;
&lt;h2 id="org1e06852"&gt;system settings&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1e06852"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga1b77c8" class="outline-3"&gt;
&lt;h3 id="orga1b77c8"&gt;turn off spelling autocorrect&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga1b77c8"&gt;
&lt;pre class="example"&gt;
System Preferences --&amp;gt; Keyboard --&amp;gt; Text tab --&amp;gt; unselect "Correct spelling automatically" and others
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org390527b" class="outline-3"&gt;
&lt;h3 id="org390527b"&gt;unmap Control + left,right&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org390527b"&gt;
&lt;p&gt;
I use Control plus the left and right arrow keys to move between
windows in emacs and tmux.
&lt;/p&gt;

&lt;pre class="example"&gt;
System Preferences --&amp;gt; Keyboard --&amp;gt; Shortcuts --&amp;gt; uncheck mission control: move left/right a space
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org10a7537" class="outline-3"&gt;
&lt;h3 id="org10a7537"&gt;Turn on FileVault&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org10a7537"&gt;
&lt;pre class="example"&gt;
System Preferences --&amp;gt; Security &amp;amp; privacy --&amp;gt; FileVault
&lt;/pre&gt;


&lt;p&gt;
I used a recovery key option rather than iCloud for my work machine, iCloud for personal
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2c4eb9c" class="outline-2"&gt;
&lt;h2 id="org2c4eb9c"&gt;Developer tools&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2c4eb9c"&gt;
&lt;p&gt;
Pretty much the first thing that needs to happen. This can be done
from the command line:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;xcode-select --install
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org893c499" class="outline-2"&gt;
&lt;h2 id="org893c499"&gt;homebrew&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org893c499"&gt;
&lt;p&gt;
Homebrew no longer requires user-ownership of /usr/local, so things
are pretty easy now:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
brew doctor
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Many packages are installed later with additional elaboration or in as
dependencies for other applications; here are some more or less
standalone packages that I routinely install.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install git &amp;amp;&amp;amp; \
brew install wget &amp;amp;&amp;amp; \
brew install autojump &amp;amp;&amp;amp; \
brew install gcc &amp;amp;&amp;amp; \
brew install graphviz &amp;amp;&amp;amp; \
brew install latex2rtf &amp;amp;&amp;amp; \
brew install pandoc &amp;amp;&amp;amp; \
brew install tmux &amp;amp;&amp;amp; \
brew install tree &amp;amp;&amp;amp; \
brew install fd &amp;amp;&amp;amp; \
brew install xsv
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgcdee0c6" class="outline-3"&gt;
&lt;h3 id="orgcdee0c6"&gt;homebrew API token&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgcdee0c6"&gt;
&lt;p&gt;
Apparently lots of requests to GutHub via homebrew can hit a rate limit. There's a higher limit if you create an API token. See &lt;a href="https://gist.github.com/christopheranderton/8644743"&gt;https://gist.github.com/christopheranderton/8644743&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Here's the url for the token creation dialog:
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://github.com/settings/tokens/new?scopes=&amp;amp;description=Homebrew"&gt;https://github.com/settings/tokens/new?scopes=&amp;amp;description=Homebrew&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Make sure that all 'scopes' are unchecked. Once you generate the token, add to your shell profile:
&lt;/p&gt;

&lt;pre class="example"&gt;
export HOMEBREW_GITHUB_API_TOKEN=token_here
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org42756f3" class="outline-2"&gt;
&lt;h2 id="org42756f3"&gt;python&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org42756f3"&gt;
&lt;p&gt;
I'm in the midst of the transition from python2 to python3, so as I
wrote this it wasn't clear which packages (if any) I would need to
install to the system. I decided to go with mostly python3, and really
tried to limit these to utilities that are used outside of the context
of a virtualenv.
&lt;/p&gt;

&lt;p&gt;
Use homebrew - see
&lt;a href="https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/Homebrew-and-Python.md"&gt;https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/Homebrew-and-Python.md&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5ed7850" class="outline-3"&gt;
&lt;h3 id="org5ed7850"&gt;dependencies&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5ed7850"&gt;
&lt;p&gt;
Run &lt;code&gt;brew info python&lt;/code&gt; for required and optional dependencies
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;for pkg in sphinx-doc pkg-config readline sqlite gdbm berkeley-db@4 tcl-tk; do brew install $pkg; done
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1e4b0f5" class="outline-3"&gt;
&lt;h3 id="org1e4b0f5"&gt;python2&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1e4b0f5"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install python@2 --with-tcl-tk
/usr/local/bin/pip2 install -U pip setuptools virtualenv wheel
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1e164dd" class="outline-3"&gt;
&lt;h3 id="org1e164dd"&gt;python3&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1e164dd"&gt;
&lt;p&gt;
Note that "python" corresponds to the python3 homebrew recipe.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install python --with-tcl-tk
/usr/local/bin/pip3 install -U pip wheel
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
A limited selection of packages - better to use virtualenvs!
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;pip3 install ansible
pip3 install csvkit
pip3 install pgcli
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd8b21bf" class="outline-4"&gt;
&lt;h4 id="orgd8b21bf"&gt;scons&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgd8b21bf"&gt;
&lt;p&gt;
Note that &lt;code&gt;scons&lt;/code&gt; wants to install man pages to &lt;code&gt;/usr/local/man&lt;/code&gt;, which is owned by root. You'll need to do this first:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;sudo mkdir -p /usr/local/man
sudo chown $(whoami) /usr/local/man
pip3 install scons
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4ce9f7e" class="outline-2"&gt;
&lt;h2 id="org4ce9f7e"&gt;emacs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4ce9f7e"&gt;
&lt;p&gt;
Install latest emacs binary from &lt;a href="http://emacsformacosx.com/"&gt;http://emacsformacosx.com/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Emacs needs a few homebrew packages
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install libressl
brew install aspell
brew install gpg
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Check out my .emacs.d and run setup scripts.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~
git clone --recurse-submodules git@github.com:nhoffman/.emacs.d.git
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
For elpy:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~/.emacs.d
bin/venv.sh
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgef6e48e" class="outline-2"&gt;
&lt;h2 id="orgef6e48e"&gt;zsh&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgef6e48e"&gt;
&lt;p&gt;
Install zsh with Homebrew
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install zsh
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Change shell to zsh
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;sudo -s
echo /usr/local/bin/zsh &amp;gt;&amp;gt; /etc/shells
exit
chsh -s /usr/local/bin/zsh $USER
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Install my dotfiles (relevant only to me)
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~
git clone git@bitbucket.org:nhoffman/dotfiles.git
~/dotfiles/mac/install.py
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf813be8" class="outline-2"&gt;
&lt;h2 id="orgf813be8"&gt;desktop apps&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf813be8"&gt;
&lt;p&gt;
Homebrew installs desktop apps too!
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew cask install dropbox
brew cask install sizeup
brew cask install dash
brew cask install hipchat
brew cask install google-chrome
brew cask install java
brew cask install mactex
brew cask install texmaker
brew cask install wkhtmltopdf
brew cask install firefox
brew cask install docker
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Some of the above (eg, sizeup, dropbox, dash) require licenses and
credentials that must be installed interactively.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org89b4fac" class="outline-3"&gt;
&lt;h3 id="org89b4fac"&gt;iTerm2&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org89b4fac"&gt;
&lt;pre class="example"&gt;
brew cask install iterm2
&lt;/pre&gt;

&lt;p&gt;
Update a few settings.
&lt;/p&gt;

&lt;p&gt;
Preferences &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Keys and do these things:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;select "Left/right option key acts as": +Esc&lt;/li&gt;
&lt;li&gt;+ &amp;#x2013;&amp;gt; Keyboard shortcut "OPT+&amp;lt;left arrow&amp;gt;": Send Escape sequence "b"&lt;/li&gt;
&lt;li&gt;+ &amp;#x2013;&amp;gt; Keyboard shortcut "OPT+&amp;lt;right arrow&amp;gt;": Send Escape sequence "f"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Default appearance:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Preferences &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Colors &amp;#x2013;&amp;gt; Load Presets &amp;#x2013;&amp;gt; Light Background&lt;/li&gt;
&lt;li&gt;Preferences &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Text &amp;#x2013;&amp;gt; Change Font &amp;#x2013;&amp;gt; 14 point&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org65b239d" class="outline-3"&gt;
&lt;h3 id="org65b239d"&gt;postgresql&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org65b239d"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew cask install postgres
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This installs multiple versions of postgres. You'll need to add the
path to the CLI for the version you want to use to your PATH, eg:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;export PATH=/Applications/Postgres.app/Contents/Versions/9.6/bin:$PATH
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org24f5c15" class="outline-2"&gt;
&lt;h2 id="org24f5c15"&gt;R&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org24f5c15"&gt;
&lt;p&gt;
Again, using homebrew.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install openblas
brew install pcre
brew install R
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Some packages that I know I'll need:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;R --slave &amp;lt;&amp;lt; EOF
packages &amp;lt;- c("lattice", "RSQLite", "latticeExtra", "argparse", "data.table", "tidyverse")
install.packages(packages, repos="http://cran.fhcrc.org/", dependencies=TRUE, clean=TRUE, Ncpus=4)
EOF
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Wow, this takes a long time!
&lt;/p&gt;

&lt;p&gt;
And while I'm at it:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew cask install rstudio
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org53eb21e" class="outline-2"&gt;
&lt;h2 id="org53eb21e"&gt;X11&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org53eb21e"&gt;
&lt;p&gt;
install Xquartz
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install caskroom/cask/xquartz
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
X11 key bindings so that the option key is used for Meta. Not so
relevant any more now that I rarely use emacs via X11 for remote
sessions.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cat &amp;gt; ~/.Xmodmap &amp;lt;&amp;lt;EOF
clear Mod1
clear Mod2
keycode 63 = Mode_switch
keycode 66 = Meta_L
add Mod1 = Meta_L
add Mod2 = Mode_switch
EOF
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org38a56bf" class="outline-2"&gt;
&lt;h2 id="org38a56bf"&gt;virtualbox and vagrant&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org38a56bf"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew cask install virtualbox
brew cask install vagrant
brew cask install vagrant-manager
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
On High Sierra, a kernel extension signing issue caused an error: instructions for a workaround are here: &lt;a href="https://github.com/caskroom/homebrew-cask/issues/39369"&gt;https://github.com/caskroom/homebrew-cask/issues/39369&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
After virtualbox is installed, go to preferences, and change default machine folder to ~/VirtualBox
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;available vagrant images:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;a href="https://app.vagrantup.com/boxes/search"&gt;https://app.vagrantup.com/boxes/search&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb61fbda" class="outline-3"&gt;
&lt;h3 id="orgb61fbda"&gt;install an ubuntu16.04 VM&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb61fbda"&gt;
&lt;p&gt;
see &lt;a href="https://app.vagrantup.com/ubuntu/boxes/xenial64"&gt;https://app.vagrantup.com/ubuntu/boxes/xenial64&lt;/a&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;mkdir -p ~/vagrant/xenial64
cd ~/vagrant/xenial64
vagrant init ubuntu/xenial64
vagrant up
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="notes"></category><category term="mac"></category></entry><entry><title>Using recursive CTEs for calculating taxonomic lineages</title><link href="https://nhoffman.github.io/borborygmi/recursive-cte-for-taxonomy.html" rel="alternate"></link><published>2017-07-07T00:00:00-07:00</published><updated>2017-07-07T00:00:00-07:00</updated><author><name>unknown</name></author><id>tag:nhoffman.github.io,2017-07-07:/borborygmi/recursive-cte-for-taxonomy.html</id><summary type="html">&lt;p&gt;
This topic falls into the category of "things that I didn't know that
I didn't know." Many of my projects involve the manipulation of
taxonomies, particularly the &lt;a href="https://www.ncbi.nlm.nih.gov/taxonomy"&gt;NCBI taxonomy&lt;/a&gt;, but I didn't understand
the efficiency with which it was possible to calculate a lineage in
SQL. I recently revisited the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
This topic falls into the category of "things that I didn't know that
I didn't know." Many of my projects involve the manipulation of
taxonomies, particularly the &lt;a href="https://www.ncbi.nlm.nih.gov/taxonomy"&gt;NCBI taxonomy&lt;/a&gt;, but I didn't understand
the efficiency with which it was possible to calculate a lineage in
SQL. I recently revisited the issue, and here's what I learned.
&lt;/p&gt;

&lt;p&gt;
The NCBI taxonomy is provided as a collection of tables that can be
downloaded in its entirety &lt;a href="ftp://ftp.ncbi.nih.gov/pub/taxonomy"&gt;by FTP&lt;/a&gt;. There are two tables in the
taxonomy database that we care about for the purposes of this
post. The first is &lt;code&gt;nodes&lt;/code&gt;. The table from the NCBI taxonomy contains
some additional fields that aren't important in this context, but at
its core, it looks something like this:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sql"&gt;create table nodes (
       tax_id integer,
       parent integer,
       rank text
);
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The second table that we will use later is called &lt;code&gt;names&lt;/code&gt;, with a
schema that (in its simplified form) looks like this:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sql"&gt;create table names (
       tax_id integer,
       tax_name text,
       is_primary boolean
);
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Multiple synonyms are allowed for each &lt;code&gt;tax_id&lt;/code&gt;; the column
&lt;code&gt;names.is_primary&lt;/code&gt; indicates which is the definitive name for the
organism (this isn't present in the table downloaded from NCBI but is
derived from other attributes).
&lt;/p&gt;

&lt;p&gt;
The taxonomic hierarchy is defined in &lt;code&gt;nodes&lt;/code&gt; using an &lt;a href="https://en.wikipedia.org/wiki/Adjacency_list"&gt;adjacency list&lt;/a&gt;
model. It turns out that relational databases supporting recursive
queries can easily traverse the graph defined by the model for a given
node. This is well-described &lt;a href="http://gbif.blogspot.com/2012/06/taxonomic-trees-in-postgresql.html"&gt;elsewhere&lt;/a&gt; (the linked post compares the
adjacency model with other representations of trees in sql).
&lt;/p&gt;

&lt;p&gt;
The query that we will use is called a &lt;a href="https://www.postgresql.org/docs/current/static/queries-with.html"&gt;recursive CTE&lt;/a&gt; (common table
expression):
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sql"&gt;WITH RECURSIVE a AS (
 SELECT tax_id, parent_id, rank
  FROM nodes
  WHERE tax_id = '1280'
UNION ALL
 SELECT p.tax_id, p.parent_id, p.rank
  FROM a JOIN nodes p ON a.parent_id = p.tax_id
)
SELECT * FROM a;
&lt;/pre&gt;
&lt;/div&gt;

&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;


&lt;colgroup&gt;
&lt;col class="org-right" /&gt;

&lt;col class="org-right" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;tax_id&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;parent_id&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;rank&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1280&lt;/td&gt;
&lt;td class="org-right"&gt;1279&lt;/td&gt;
&lt;td class="org-left"&gt;species&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1279&lt;/td&gt;
&lt;td class="org-right"&gt;90964&lt;/td&gt;
&lt;td class="org-left"&gt;genus&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;90964&lt;/td&gt;
&lt;td class="org-right"&gt;1385&lt;/td&gt;
&lt;td class="org-left"&gt;family&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1385&lt;/td&gt;
&lt;td class="org-right"&gt;91061&lt;/td&gt;
&lt;td class="org-left"&gt;order&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;91061&lt;/td&gt;
&lt;td class="org-right"&gt;1239&lt;/td&gt;
&lt;td class="org-left"&gt;class&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1239&lt;/td&gt;
&lt;td class="org-right"&gt;1783272&lt;/td&gt;
&lt;td class="org-left"&gt;phylum&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1783272&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-left"&gt;below_superkingdom&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;131567&lt;/td&gt;
&lt;td class="org-left"&gt;superkingdom&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;131567&lt;/td&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-left"&gt;below_root&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;root&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
And voila: we have traversed the tree from leaf to root, and in doing
so, the lineage is defined. I'm using postgresql for this example, but
sqlite supports recursive CTEs as well, and an identical query can be
used with both databases.
&lt;/p&gt;

&lt;p&gt;
At this point, we can easily add taxonomic names as well:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sql"&gt;WITH RECURSIVE a AS (
 SELECT tax_id, parent_id, rank
  FROM nodes
  WHERE tax_id = '1280'
UNION ALL
 SELECT p.tax_id, p.parent_id, p.rank
  FROM a JOIN nodes p ON a.parent_id = p.tax_id
)
SELECT a.tax_id, a.rank, names.tax_name
  FROM a JOIN names USING(tax_id)
  WHERE is_primary;
&lt;/pre&gt;
&lt;/div&gt;

&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;


&lt;colgroup&gt;
&lt;col class="org-right" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;tax_id&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;rank&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;tax_name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1280&lt;/td&gt;
&lt;td class="org-left"&gt;species&lt;/td&gt;
&lt;td class="org-left"&gt;Staphylococcus aureus&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1279&lt;/td&gt;
&lt;td class="org-left"&gt;genus&lt;/td&gt;
&lt;td class="org-left"&gt;Staphylococcus&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;90964&lt;/td&gt;
&lt;td class="org-left"&gt;family&lt;/td&gt;
&lt;td class="org-left"&gt;Staphylococcaceae&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1385&lt;/td&gt;
&lt;td class="org-left"&gt;order&lt;/td&gt;
&lt;td class="org-left"&gt;Bacillales&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;91061&lt;/td&gt;
&lt;td class="org-left"&gt;class&lt;/td&gt;
&lt;td class="org-left"&gt;Bacilli&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1239&lt;/td&gt;
&lt;td class="org-left"&gt;phylum&lt;/td&gt;
&lt;td class="org-left"&gt;Firmicutes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1783272&lt;/td&gt;
&lt;td class="org-left"&gt;below_superkingdom&lt;/td&gt;
&lt;td class="org-left"&gt;Terrabacteria group&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-left"&gt;superkingdom&lt;/td&gt;
&lt;td class="org-left"&gt;Bacteria&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;131567&lt;/td&gt;
&lt;td class="org-left"&gt;below_root&lt;/td&gt;
&lt;td class="org-left"&gt;cellular organisms&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-left"&gt;root&lt;/td&gt;
&lt;td class="org-left"&gt;root&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
It's worth pausing to point out an important feature of the
representation of the adjacency list model of the &lt;code&gt;nodes&lt;/code&gt; table
downloaded from NCBI: the root is identified as the node for which
&lt;code&gt;tax_id = 1&lt;/code&gt;, but the value of &lt;code&gt;parent_id&lt;/code&gt; for the root node is also
1! The recursive CTE as written expects a value of NULL in the
&lt;code&gt;parent_id&lt;/code&gt; field of the root node; with a value of 1, it will never
terminate, and your laptop will get quite hot! So do yourself a favor
and execute the following before trying this as home:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sql"&gt;UPDATE nodes set parent_id = NULL where tax_id = 1;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
As I mentioned, all of this is pretty well documented (as I learned
once I bothered to look). But what about a query for multiple tax_ids
at once? Is it as easy as including more than one in the query?
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sql"&gt;WITH RECURSIVE a AS (
 SELECT tax_id, parent_id, rank
  FROM nodes
  WHERE tax_id in ('562', '1280')
UNION ALL
 SELECT p.tax_id, p.parent_id, p.rank
  FROM a JOIN nodes p ON a.parent_id = p.tax_id
)
SELECT a.tax_id, a.rank, names.tax_name
  FROM a JOIN names USING(tax_id)
  WHERE is_primary;
&lt;/pre&gt;
&lt;/div&gt;

&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;


&lt;colgroup&gt;
&lt;col class="org-right" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;tax_id&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;rank&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;tax_name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1280&lt;/td&gt;
&lt;td class="org-left"&gt;species&lt;/td&gt;
&lt;td class="org-left"&gt;Staphylococcus aureus&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;562&lt;/td&gt;
&lt;td class="org-left"&gt;species&lt;/td&gt;
&lt;td class="org-left"&gt;Escherichia coli&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1279&lt;/td&gt;
&lt;td class="org-left"&gt;genus&lt;/td&gt;
&lt;td class="org-left"&gt;Staphylococcus&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;561&lt;/td&gt;
&lt;td class="org-left"&gt;genus&lt;/td&gt;
&lt;td class="org-left"&gt;Escherichia&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;90964&lt;/td&gt;
&lt;td class="org-left"&gt;family&lt;/td&gt;
&lt;td class="org-left"&gt;Staphylococcaceae&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;543&lt;/td&gt;
&lt;td class="org-left"&gt;family&lt;/td&gt;
&lt;td class="org-left"&gt;Enterobacteriaceae&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1385&lt;/td&gt;
&lt;td class="org-left"&gt;order&lt;/td&gt;
&lt;td class="org-left"&gt;Bacillales&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;91347&lt;/td&gt;
&lt;td class="org-left"&gt;order&lt;/td&gt;
&lt;td class="org-left"&gt;Enterobacterales&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;91061&lt;/td&gt;
&lt;td class="org-left"&gt;class&lt;/td&gt;
&lt;td class="org-left"&gt;Bacilli&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1236&lt;/td&gt;
&lt;td class="org-left"&gt;class&lt;/td&gt;
&lt;td class="org-left"&gt;Gammaproteobacteria&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1239&lt;/td&gt;
&lt;td class="org-left"&gt;phylum&lt;/td&gt;
&lt;td class="org-left"&gt;Firmicutes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1224&lt;/td&gt;
&lt;td class="org-left"&gt;phylum&lt;/td&gt;
&lt;td class="org-left"&gt;Proteobacteria&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1783272&lt;/td&gt;
&lt;td class="org-left"&gt;below_superkingdom&lt;/td&gt;
&lt;td class="org-left"&gt;Terrabacteria group&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-left"&gt;superkingdom&lt;/td&gt;
&lt;td class="org-left"&gt;Bacteria&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-left"&gt;superkingdom&lt;/td&gt;
&lt;td class="org-left"&gt;Bacteria&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;131567&lt;/td&gt;
&lt;td class="org-left"&gt;below_root&lt;/td&gt;
&lt;td class="org-left"&gt;cellular organisms&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;131567&lt;/td&gt;
&lt;td class="org-left"&gt;below_root&lt;/td&gt;
&lt;td class="org-left"&gt;cellular organisms&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-left"&gt;root&lt;/td&gt;
&lt;td class="org-left"&gt;root&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-left"&gt;root&lt;/td&gt;
&lt;td class="org-left"&gt;root&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Hmm, no, that doesn't work so well. Even if the ordering was right, we
would find it difficult to keep track of the individual lineages. So
maybe we can keep track?
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sql"&gt;WITH RECURSIVE a AS (
 SELECT tax_id as tid, 1 as ord, tax_id, parent_id, rank
  FROM nodes
  WHERE tax_id in ('562', '1280')
UNION ALL
 SELECT a.tid, a.ord + 1, p.tax_id, p.parent_id, p.rank
  FROM a JOIN nodes p ON a.parent_id = p.tax_id
)
SELECT a.tid, a.ord, a.tax_id, a.rank, names.tax_name
  FROM a JOIN names USING(tax_id)
  WHERE is_primary
  ORDER BY tid, ord;
&lt;/pre&gt;
&lt;/div&gt;

&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;


&lt;colgroup&gt;
&lt;col class="org-right" /&gt;

&lt;col class="org-right" /&gt;

&lt;col class="org-right" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;tid&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;ord&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;tax_id&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;rank&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;tax_name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1280&lt;/td&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;1280&lt;/td&gt;
&lt;td class="org-left"&gt;species&lt;/td&gt;
&lt;td class="org-left"&gt;Staphylococcus aureus&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1280&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;1279&lt;/td&gt;
&lt;td class="org-left"&gt;genus&lt;/td&gt;
&lt;td class="org-left"&gt;Staphylococcus&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1280&lt;/td&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;td class="org-right"&gt;90964&lt;/td&gt;
&lt;td class="org-left"&gt;family&lt;/td&gt;
&lt;td class="org-left"&gt;Staphylococcaceae&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1280&lt;/td&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;td class="org-right"&gt;1385&lt;/td&gt;
&lt;td class="org-left"&gt;order&lt;/td&gt;
&lt;td class="org-left"&gt;Bacillales&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1280&lt;/td&gt;
&lt;td class="org-right"&gt;5&lt;/td&gt;
&lt;td class="org-right"&gt;91061&lt;/td&gt;
&lt;td class="org-left"&gt;class&lt;/td&gt;
&lt;td class="org-left"&gt;Bacilli&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1280&lt;/td&gt;
&lt;td class="org-right"&gt;6&lt;/td&gt;
&lt;td class="org-right"&gt;1239&lt;/td&gt;
&lt;td class="org-left"&gt;phylum&lt;/td&gt;
&lt;td class="org-left"&gt;Firmicutes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1280&lt;/td&gt;
&lt;td class="org-right"&gt;7&lt;/td&gt;
&lt;td class="org-right"&gt;1783272&lt;/td&gt;
&lt;td class="org-left"&gt;below_superkingdom&lt;/td&gt;
&lt;td class="org-left"&gt;Terrabacteria group&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1280&lt;/td&gt;
&lt;td class="org-right"&gt;8&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-left"&gt;superkingdom&lt;/td&gt;
&lt;td class="org-left"&gt;Bacteria&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1280&lt;/td&gt;
&lt;td class="org-right"&gt;9&lt;/td&gt;
&lt;td class="org-right"&gt;131567&lt;/td&gt;
&lt;td class="org-left"&gt;below_root&lt;/td&gt;
&lt;td class="org-left"&gt;cellular organisms&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1280&lt;/td&gt;
&lt;td class="org-right"&gt;10&lt;/td&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-left"&gt;root&lt;/td&gt;
&lt;td class="org-left"&gt;root&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;562&lt;/td&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;562&lt;/td&gt;
&lt;td class="org-left"&gt;species&lt;/td&gt;
&lt;td class="org-left"&gt;Escherichia coli&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;562&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;561&lt;/td&gt;
&lt;td class="org-left"&gt;genus&lt;/td&gt;
&lt;td class="org-left"&gt;Escherichia&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;562&lt;/td&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;td class="org-right"&gt;543&lt;/td&gt;
&lt;td class="org-left"&gt;family&lt;/td&gt;
&lt;td class="org-left"&gt;Enterobacteriaceae&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;562&lt;/td&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;td class="org-right"&gt;91347&lt;/td&gt;
&lt;td class="org-left"&gt;order&lt;/td&gt;
&lt;td class="org-left"&gt;Enterobacterales&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;562&lt;/td&gt;
&lt;td class="org-right"&gt;5&lt;/td&gt;
&lt;td class="org-right"&gt;1236&lt;/td&gt;
&lt;td class="org-left"&gt;class&lt;/td&gt;
&lt;td class="org-left"&gt;Gammaproteobacteria&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;562&lt;/td&gt;
&lt;td class="org-right"&gt;6&lt;/td&gt;
&lt;td class="org-right"&gt;1224&lt;/td&gt;
&lt;td class="org-left"&gt;phylum&lt;/td&gt;
&lt;td class="org-left"&gt;Proteobacteria&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;562&lt;/td&gt;
&lt;td class="org-right"&gt;7&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-left"&gt;superkingdom&lt;/td&gt;
&lt;td class="org-left"&gt;Bacteria&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;562&lt;/td&gt;
&lt;td class="org-right"&gt;8&lt;/td&gt;
&lt;td class="org-right"&gt;131567&lt;/td&gt;
&lt;td class="org-left"&gt;below_root&lt;/td&gt;
&lt;td class="org-left"&gt;cellular organisms&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;562&lt;/td&gt;
&lt;td class="org-right"&gt;9&lt;/td&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-left"&gt;root&lt;/td&gt;
&lt;td class="org-left"&gt;root&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Ok, that's better! If we like, we can group and aggregate the lineages:
&lt;/p&gt;

&lt;p&gt;
(The results are shown using the equivalent of &lt;code&gt;psql -x&lt;/code&gt;; the first
line just provides a header row.)
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sql"&gt;SELECT 'value' as key;
WITH RECURSIVE a AS (
 SELECT tax_id as tid, 1 as ord, tax_id, parent_id, rank
  FROM nodes
  WHERE tax_id in ('562', '1280')
UNION ALL
 SELECT a.tid, a.ord + 1, p.tax_id, p.parent_id, p.rank
  FROM a JOIN nodes p ON a.parent_id = p.tax_id
)
SELECT a.tid, array_agg(a.tax_id), array_agg(a.rank), array_agg(names.tax_name)
  FROM a JOIN names USING(tax_id)
  WHERE is_primary
  GROUP BY tid;
&lt;/pre&gt;
&lt;/div&gt;

&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;


&lt;colgroup&gt;
&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;key&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;tid&lt;/td&gt;
&lt;td class="org-left"&gt;1280&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;array_agg&lt;/td&gt;
&lt;td class="org-left"&gt;{1280,1279,90964,1385,91061,1239,1783272,2,131567,1}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;array_agg&lt;/td&gt;
&lt;td class="org-left"&gt;{species,genus,family,order,class,phylum,below_superkingdom,superkingdom,below_root,root}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;array_agg&lt;/td&gt;
&lt;td class="org-left"&gt;{"Staphylococcus aureus",Staphylococcus,Staphylococcaceae,Bacillales,Bacilli,Firmicutes,"Terrabacteria group",Bacteria,"cellular organisms",root}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;tid&lt;/td&gt;
&lt;td class="org-left"&gt;562&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;array_agg&lt;/td&gt;
&lt;td class="org-left"&gt;{562,1,561,1224,543,131567,91347,2,1236}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;array_agg&lt;/td&gt;
&lt;td class="org-left"&gt;{species,root,genus,phylum,family,below_root,order,superkingdom,class}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;array_agg&lt;/td&gt;
&lt;td class="org-left"&gt;{"Escherichia coli",root,Escherichia,Proteobacteria,Enterobacteriaceae,"cellular organisms",Enterobacterales,Bacteria,Gammaproteobacteria}&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Here's another approach: accumulate values in an array in the
recursive expression, and then use the first value in the array to
identify the first tax_id in each lineage.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sql"&gt;WITH RECURSIVE a AS (
 SELECT tax_id as tid,
	parent_id as pid,
	rank,
	tax_id,
	ARRAY[tax_id] as lineage
  FROM nodes
  WHERE tax_id = '1280'
UNION ALL
  SELECT p.tax_id,
	 p.parent_id,
	 p.rank,
	 lineage[1],
	 lineage || ARRAY[p.tax_id]
  FROM a JOIN nodes p ON a.pid = p.tax_id
)
SELECT * FROM a;
&lt;/pre&gt;
&lt;/div&gt;

&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;


&lt;colgroup&gt;
&lt;col class="org-right" /&gt;

&lt;col class="org-right" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-right" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;tid&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;pid&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;rank&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;tax_id&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;lineage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1280&lt;/td&gt;
&lt;td class="org-right"&gt;1279&lt;/td&gt;
&lt;td class="org-left"&gt;species&lt;/td&gt;
&lt;td class="org-right"&gt;1280&lt;/td&gt;
&lt;td class="org-left"&gt;{1280}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1279&lt;/td&gt;
&lt;td class="org-right"&gt;90964&lt;/td&gt;
&lt;td class="org-left"&gt;genus&lt;/td&gt;
&lt;td class="org-right"&gt;1280&lt;/td&gt;
&lt;td class="org-left"&gt;{1280,1279}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;90964&lt;/td&gt;
&lt;td class="org-right"&gt;1385&lt;/td&gt;
&lt;td class="org-left"&gt;family&lt;/td&gt;
&lt;td class="org-right"&gt;1280&lt;/td&gt;
&lt;td class="org-left"&gt;{1280,1279,90964}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1385&lt;/td&gt;
&lt;td class="org-right"&gt;91061&lt;/td&gt;
&lt;td class="org-left"&gt;order&lt;/td&gt;
&lt;td class="org-right"&gt;1280&lt;/td&gt;
&lt;td class="org-left"&gt;{1280,1279,90964,1385}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;91061&lt;/td&gt;
&lt;td class="org-right"&gt;1239&lt;/td&gt;
&lt;td class="org-left"&gt;class&lt;/td&gt;
&lt;td class="org-right"&gt;1280&lt;/td&gt;
&lt;td class="org-left"&gt;{1280,1279,90964,1385,91061}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1239&lt;/td&gt;
&lt;td class="org-right"&gt;1783272&lt;/td&gt;
&lt;td class="org-left"&gt;phylum&lt;/td&gt;
&lt;td class="org-right"&gt;1280&lt;/td&gt;
&lt;td class="org-left"&gt;{1280,1279,90964,1385,91061,1239}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1783272&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-left"&gt;below_superkingdom&lt;/td&gt;
&lt;td class="org-right"&gt;1280&lt;/td&gt;
&lt;td class="org-left"&gt;{1280,1279,90964,1385,91061,1239,1783272}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;131567&lt;/td&gt;
&lt;td class="org-left"&gt;superkingdom&lt;/td&gt;
&lt;td class="org-right"&gt;1280&lt;/td&gt;
&lt;td class="org-left"&gt;{1280,1279,90964,1385,91061,1239,1783272,2}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;131567&lt;/td&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-left"&gt;below_root&lt;/td&gt;
&lt;td class="org-right"&gt;1280&lt;/td&gt;
&lt;td class="org-left"&gt;{1280,1279,90964,1385,91061,1239,1783272,2,131567}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;root&lt;/td&gt;
&lt;td class="org-right"&gt;1280&lt;/td&gt;
&lt;td class="org-left"&gt;{1280,1279,90964,1385,91061,1239,1783272,2,131567,1}&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
We only actually care about the final lineage when it terminates at
the root node.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sql"&gt;WITH RECURSIVE a AS (
 SELECT tax_id as tid,
	parent_id as pid,
	rank,
	tax_id,
	ARRAY[tax_id] as lineage
  FROM nodes
  WHERE tax_id = '1280'
UNION ALL
  SELECT p.tax_id,
	 p.parent_id,
	 p.rank,
	 lineage[1],
	 lineage || ARRAY[p.tax_id]
  FROM a JOIN nodes p ON a.pid = p.tax_id
)
SELECT tax_id, lineage FROM a
WHERE a.rank = 'root';
&lt;/pre&gt;
&lt;/div&gt;

&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;


&lt;colgroup&gt;
&lt;col class="org-right" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;tax_id&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;lineage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1280&lt;/td&gt;
&lt;td class="org-left"&gt;{1280,1279,90964,1385,91061,1239,1783272,2,131567,1}&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;
With some embellishment, we can see how this strategy can be used to
retrieve lineages plus additional annotation for multiple tax_ids (at
arbitrary ranks) as once.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sql"&gt;SELECT 'value' as key;
WITH RECURSIVE a AS (
 SELECT tax_id as tid,
	parent_id as pid,
	rank,
	tax_id,
	ARRAY[tax_id] as lineage,
	ARRAY[rank] as ranks
  FROM nodes
  WHERE tax_id in ('1279', '1280', '562')
UNION ALL
  SELECT p.tax_id,
	 p.parent_id,
	 p.rank,
	 lineage[1],
	 lineage || ARRAY[p.tax_id],
	 ranks || ARRAY[p.rank]
  FROM a JOIN nodes p ON a.pid = p.tax_id
)
SELECT tax_id, tax_name, nodes.rank, lineage, ranks
FROM a
JOIN nodes USING(tax_id)
JOIN names USING(tax_id)
WHERE a.rank = 'root'
AND names.is_primary;
&lt;/pre&gt;
&lt;/div&gt;

&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;


&lt;colgroup&gt;
&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;key&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;tax_id&lt;/td&gt;
&lt;td class="org-left"&gt;1279&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;tax_name&lt;/td&gt;
&lt;td class="org-left"&gt;Staphylococcus&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;rank&lt;/td&gt;
&lt;td class="org-left"&gt;genus&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;lineage&lt;/td&gt;
&lt;td class="org-left"&gt;{1279,90964,1385,91061,1239,1783272,2,131567,1}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;ranks&lt;/td&gt;
&lt;td class="org-left"&gt;{genus,family,order,class,phylum,below_superkingdom,superkingdom,below_root,root}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;tax_id&lt;/td&gt;
&lt;td class="org-left"&gt;562&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;tax_name&lt;/td&gt;
&lt;td class="org-left"&gt;Escherichia coli&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;rank&lt;/td&gt;
&lt;td class="org-left"&gt;species&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;lineage&lt;/td&gt;
&lt;td class="org-left"&gt;{562,561,543,91347,1236,1224,2,131567,1}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;ranks&lt;/td&gt;
&lt;td class="org-left"&gt;{species,genus,family,order,class,phylum,superkingdom,below_root,root}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;tax_id&lt;/td&gt;
&lt;td class="org-left"&gt;1280&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;tax_name&lt;/td&gt;
&lt;td class="org-left"&gt;Staphylococcus aureus&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;rank&lt;/td&gt;
&lt;td class="org-left"&gt;species&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;lineage&lt;/td&gt;
&lt;td class="org-left"&gt;{1280,1279,90964,1385,91061,1239,1783272,2,131567,1}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;ranks&lt;/td&gt;
&lt;td class="org-left"&gt;{species,genus,family,order,class,phylum,below_superkingdom,superkingdom,below_root,root}&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
How well does this scale? Both of the approaches executed in less than
one second for 1000 tax_id's, but took more like 40s for 2000, so not
fantastically well. But I expect the some optimization is possible.
&lt;/p&gt;

&lt;p&gt;
Unfortunately, in the absence of an ARRAY data type, this approach
does not work for sqlite, but you could do something similar by
concatenating strings (though I doubt that this would be very
efficient).
&lt;/p&gt;
</content><category term="sql"></category><category term="postgresql"></category><category term="taxonomy"></category></entry><entry><title>Setting up a new Mac (Sierra)</title><link href="https://nhoffman.github.io/borborygmi/mac-setup-sierra.html" rel="alternate"></link><published>2017-01-05T00:00:00-08:00</published><updated>2017-01-05T00:00:00-08:00</updated><author><name>unknown</name></author><id>tag:nhoffman.github.io,2017-01-05:/borborygmi/mac-setup-sierra.html</id><summary type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgc0476da"&gt;system settings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgbc74d63"&gt;turn off spelling autocorrect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org514a26e"&gt;unmap Control + left,right&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org54c3c85"&gt;First applications&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgec4a124"&gt;iTerm2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org6840003"&gt;Dropbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org850abd1"&gt;Developer tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org975eb2f"&gt;Junos pulse VPN client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orga42f68e"&gt;Microsoft Office 2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org7e7fe25"&gt;Others&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgd74c6e9"&gt;homebrew&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgd78eda1"&gt;X11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org188a031"&gt;Desktop apps using Cask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org152edab"&gt;homebrew API token&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org8ead36b"&gt;zsh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org49dfcff"&gt;git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org797654f"&gt;python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org91d3759"&gt;emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org35c04bd"&gt;R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org49c87fa"&gt;wkhtmltopdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org9403a5a"&gt;mail&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;i&gt;Edit 2017-01-09: provide upgrade path to Pulse …&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgc0476da"&gt;system settings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgbc74d63"&gt;turn off spelling autocorrect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org514a26e"&gt;unmap Control + left,right&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org54c3c85"&gt;First applications&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgec4a124"&gt;iTerm2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org6840003"&gt;Dropbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org850abd1"&gt;Developer tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org975eb2f"&gt;Junos pulse VPN client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orga42f68e"&gt;Microsoft Office 2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org7e7fe25"&gt;Others&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgd74c6e9"&gt;homebrew&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgd78eda1"&gt;X11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org188a031"&gt;Desktop apps using Cask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org152edab"&gt;homebrew API token&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org8ead36b"&gt;zsh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org49dfcff"&gt;git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org797654f"&gt;python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org91d3759"&gt;emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org35c04bd"&gt;R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org49c87fa"&gt;wkhtmltopdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org9403a5a"&gt;mail&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;i&gt;Edit 2017-01-09: provide upgrade path to Pulse Secure client v5.1&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
This post describes the steps that I followed to set up a new mac
running MacOS Sierra (10.12.2), in as close to the order in which I
did things as I could reproduce. The primary purpose is to document
what I did for when I perform a clean install of other machines;
hopefully others will also find it useful.
&lt;/p&gt;

&lt;p&gt;
This time around I really went all in on &lt;a href="http://brew.sh/"&gt;homebrew&lt;/a&gt;: I used homebrew to
install not only command line programs and languages (python, R), but
also as many desktop apps as I could (Chrome, x11) that would
otherwise have been installed manually by hunting down an
installer. When it wasn't entirely clear (to me) whether there might
be some advantage of getting a program from another project (Emacs,
Postgres.app), I did it the old fashioned way.
&lt;/p&gt;

&lt;p&gt;
Somewhat glossed over here are manual steps used to transfer
non-public dotfiles, credentials, etc. Here's a partial list of files
and directories that I copied directly from my old laptop:
&lt;/p&gt;

&lt;p&gt;
It's interesting that all none of these steps require an Apple ID -
usually I sign in first thing, but this time I held off.
&lt;/p&gt;

&lt;pre class="example"&gt;
tar -cf dotfiles.tar .Xmodmap .gitconfig .gnupg .pypirc .ssh
&lt;/pre&gt;

&lt;div id="outline-container-orgc0476da" class="outline-2"&gt;
&lt;h2 id="orgc0476da"&gt;system settings&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc0476da"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgbc74d63" class="outline-3"&gt;
&lt;h3 id="orgbc74d63"&gt;turn off spelling autocorrect&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgbc74d63"&gt;
&lt;pre class="example"&gt;
System Preferences --&amp;gt; Keyboard --&amp;gt; Text tab --&amp;gt; unselect "Correct spelling automatically" and others
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org514a26e" class="outline-3"&gt;
&lt;h3 id="org514a26e"&gt;unmap Control + left,right&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org514a26e"&gt;
&lt;p&gt;
I use Control plus the left and right arrow keys to move between
windows in emacs and tmux.
&lt;/p&gt;

&lt;pre class="example"&gt;
System Preferences --&amp;gt; Keyboard --&amp;gt; Shortcuts --&amp;gt; uncheck mission control: move left/right a space
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org54c3c85" class="outline-2"&gt;
&lt;h2 id="org54c3c85"&gt;First applications&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org54c3c85"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgec4a124" class="outline-3"&gt;
&lt;h3 id="orgec4a124"&gt;iTerm2&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgec4a124"&gt;
&lt;p&gt;
Update a few settings.
&lt;/p&gt;

&lt;p&gt;
Preferences &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Keys and do these things:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;select "Left/right option key acts as": +Esc&lt;/li&gt;
&lt;li&gt;+ &amp;#x2013;&amp;gt; Keyboard shortcut "OPT+&amp;lt;left arrow&amp;gt;": Send Escape sequence "b"&lt;/li&gt;
&lt;li&gt;+ &amp;#x2013;&amp;gt; Keyboard shortcut "OPT+&amp;lt;right arrow&amp;gt;": Send Escape sequence "f"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Default appearance:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Preferences &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Colors &amp;#x2013;&amp;gt; Load Presets &amp;#x2013;&amp;gt; Light Background&lt;/li&gt;
&lt;li&gt;Preferences &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Text &amp;#x2013;&amp;gt; Change Font &amp;#x2013;&amp;gt; 14 point&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6840003" class="outline-3"&gt;
&lt;h3 id="org6840003"&gt;Dropbox&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6840003"&gt;
&lt;p&gt;
Install from website
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org850abd1" class="outline-3"&gt;
&lt;h3 id="org850abd1"&gt;Developer tools&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org850abd1"&gt;
&lt;p&gt;
This can be done from the command line:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;xcode-select --install
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org975eb2f" class="outline-3"&gt;
&lt;h3 id="org975eb2f"&gt;Junos pulse VPN client&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org975eb2f"&gt;
&lt;p&gt;
There are some &lt;a href="https://forums.developer.apple.com/thread/51184"&gt;reports&lt;/a&gt; of version 5.1 being broken in Sierra. At the
time I'm writing this, my institution provides 5.1.9 (61653), which is
indeed broken. The internet helpfully provides a link to an older
version (we're trusting the University of South Florida, here):
&lt;a href="https://www.net.usf.edu/vpn/MacOS/JunosPulse.dmg"&gt;https://www.net.usf.edu/vpn/MacOS/JunosPulse.dmg&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Installing this, and then running the updater provides 5.1.10 (61733),
which seems to work.
&lt;/p&gt;

&lt;p&gt;
Instructions for UW are here: &lt;a href="https://networks.uwmedicine.org/content/sslvpn-frequently-asked-questions-14"&gt;https://networks.uwmedicine.org/content/sslvpn-frequently-asked-questions-14&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga42f68e" class="outline-3"&gt;
&lt;h3 id="orga42f68e"&gt;Microsoft Office 2016&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga42f68e"&gt;
&lt;p&gt;
The initial version of Excel (15.11) crashed on startup as widely
reported - this was fixed by updating to a version (15.29) provided by
Microsoft:
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://support.microsoft.com/en-us/kb/3187505"&gt;https://support.microsoft.com/en-us/kb/3187505&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7e7fe25" class="outline-3"&gt;
&lt;h3 id="org7e7fe25"&gt;Others&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7e7fe25"&gt;
&lt;ul class="org-ul"&gt;
&lt;li class="on"&gt;&lt;code&gt;[X]&lt;/code&gt; SizeUp - &lt;a href="http://www.irradiatedsoftware.com/"&gt;http://www.irradiatedsoftware.com/&lt;/a&gt; (license in Dropbox/software_licenses)&lt;/li&gt;
&lt;li class="on"&gt;&lt;code&gt;[X]&lt;/code&gt; HipChat client&lt;/li&gt;
&lt;li class="on"&gt;&lt;code&gt;[X]&lt;/code&gt; Dash 2&lt;/li&gt;
&lt;li class="on"&gt;&lt;code&gt;[X]&lt;/code&gt; Postgres.app &lt;a href="https://postgresapp.com"&gt;https://postgresapp.com&lt;/a&gt;&lt;/li&gt;
&lt;li class="on"&gt;&lt;code&gt;[X]&lt;/code&gt; PgAdmin &lt;a href="https://www.pgadmin.org"&gt;https://www.pgadmin.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd74c6e9" class="outline-2"&gt;
&lt;h2 id="orgd74c6e9"&gt;homebrew&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd74c6e9"&gt;
&lt;p&gt;
Homebrew no longer requires user-ownership of /usr/local, so things are pretty easy now:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
brew doctor
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Some packages I'll need off the bat to do just about anything
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install git
brew install wget
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
A number of packages are installed in the context of other
applications; here are additional packages that I know I'll use.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install autojump &amp;amp;&amp;amp; \
brew install gcc &amp;amp;&amp;amp; \
brew install graphviz &amp;amp;&amp;amp; \
brew install htop-osx &amp;amp;&amp;amp; \
brew install latex2rtf &amp;amp;&amp;amp; \
brew install pandoc &amp;amp;&amp;amp; \
brew install tmux &amp;amp;&amp;amp; \
brew install tree
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Note other packages installed in other sections as well.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd78eda1" class="outline-3"&gt;
&lt;h3 id="orgd78eda1"&gt;X11&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgd78eda1"&gt;
&lt;p&gt;
install Xquartz
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install Caskroom/cask/xquartz
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
X11 key bindings so that the option key is used for Meta..
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cat &amp;gt; ~/.Xmodmap &amp;lt;&amp;lt;EOF
clear Mod1
clear Mod2
keycode 63 = Mode_switch
keycode 66 = Meta_L
add Mod1 = Meta_L
add Mod2 = Mode_switch
EOF
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org188a031" class="outline-3"&gt;
&lt;h3 id="org188a031"&gt;Desktop apps using Cask&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org188a031"&gt;
&lt;p&gt;
Homebrew installs desktop apps too!
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew cask install google-chrome
brew cask install java
brew cask install mactex
brew cask install texmaker
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org152edab" class="outline-3"&gt;
&lt;h3 id="org152edab"&gt;homebrew API token&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org152edab"&gt;
&lt;p&gt;
Apparently lots of requests to GutHub via homebrew can hit a rate limit. There's a higher limit if you create an API token. See &lt;a href="https://gist.github.com/christopheranderton/8644743"&gt;https://gist.github.com/christopheranderton/8644743&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Here's the url for the token creation dialog:
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://github.com/settings/tokens/new?scopes=&amp;amp;description=Homebrew"&gt;https://github.com/settings/tokens/new?scopes=&amp;amp;description=Homebrew&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Make sure that all 'scopes' are unchecked. Once you generate the token, add to your shell profile:
&lt;/p&gt;

&lt;pre class="example"&gt;
export HOMEBREW_GITHUB_API_TOKEN=token_here
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8ead36b" class="outline-3"&gt;
&lt;h3 id="org8ead36b"&gt;zsh&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org8ead36b"&gt;
&lt;p&gt;
Install zsh with Homebrew
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install zsh
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Change shell to zsh
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;sudo -s
echo /usr/local/bin/zsh &amp;gt;&amp;gt; /etc/shells
exit
chsh -s /usr/local/bin/zsh $USER
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
zsh init files are in Dropbox/zsh. &lt;code&gt;~/.zshenv&lt;/code&gt; contains the following:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;for pth in $HOME/Dropbox $HOME/src $HOME; do
    if [[ -f $pth/zsh/zstartup ]]; then
	. $pth/zsh/zstartup
	break
    fi
done
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org49dfcff" class="outline-2"&gt;
&lt;h2 id="org49dfcff"&gt;git&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org49dfcff"&gt;
&lt;pre class="example"&gt;
git config --global user.name "My Name"
git config --global user.email me@email.com
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org797654f" class="outline-2"&gt;
&lt;h2 id="org797654f"&gt;python&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org797654f"&gt;
&lt;p&gt;
Use homebrew - see
&lt;a href="https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/Homebrew-and-Python.md"&gt;https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/Homebrew-and-Python.md&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Run &lt;code&gt;brew info python&lt;/code&gt; for required and optional dependencies
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;for pkg in sphinx-doc pkg-config readline sqlite homebrew/dupes/tcl-tk berkeley-db4; do brew install $pkg; done
brew install python --with-berkeley-db4 --with-tcl-tk
brew linkapps python
pip install -U pip
pip install -U setuptools
pip install -U virtualenv
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Install some python packages using homebrew - these are time consuming to install otherwise.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install numpy
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
And a few packages that I usually like to have around.
&lt;/p&gt;

&lt;p&gt;
Note that &lt;code&gt;scons&lt;/code&gt; wants to install man pages to &lt;code&gt;/usr/local/man&lt;/code&gt;, which is owned by root. You'll need to do this first:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;sudo mkdir -p /usr/local/man
sudo sudo chown $(whoami) /usr/local/man
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Now install the actual packages:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;pip install ansible
pip install csvkit
pip install reportlab
pip install scons
pip install jinja2
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Also install python3
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install python3 --with-tcl-tk
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org91d3759" class="outline-2"&gt;
&lt;h2 id="org91d3759"&gt;emacs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org91d3759"&gt;
&lt;p&gt;
Install latest emacs binary (25.1) from &lt;a href="http://emacsformacosx.com/"&gt;http://emacsformacosx.com/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Emacs needs a few homebrew packages
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install libressl
brew install aspell
brew install gpg
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Check out my .emacs.d and run setup scripts.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~
git clone git@github.com:nhoffman/.emacs.d.git
cd .emacs.d
git submodule init
git submodule update
bin/venv.sh
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
For elpy:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;pip install -r requirements.txt
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org35c04bd" class="outline-2"&gt;
&lt;h2 id="org35c04bd"&gt;R&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org35c04bd"&gt;
&lt;p&gt;
Again, using homebrew.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew tap homebrew/science
brew install r
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;R --slave &amp;lt;&amp;lt; EOF
packages &amp;lt;- c("ape", "sqldf", "ROCR", "lattice", "RSQLite", "latticeExtra", "argparse", "data.table")
install.packages(packages, repos="http://cran.fhcrc.org/", dependencies=TRUE, clean=TRUE)
EOF
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org49c87fa" class="outline-2"&gt;
&lt;h2 id="org49c87fa"&gt;wkhtmltopdf&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org49c87fa"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~/Downloads
wget 'http://download.gna.org/wkhtmltopdf/0.12/0.12.4/wkhtmltox-0.12.4_osx-cocoa-x86-64.pkg'
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Use installer - binary is &lt;code&gt;/usr/local/bin/wkhtmltopdf&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9403a5a" class="outline-2"&gt;
&lt;h2 id="org9403a5a"&gt;mail&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9403a5a"&gt;
&lt;p&gt;
&lt;a href="http://www.washington.edu/itconnect/connect/email/uw-email/configuring/os-x-mail6/"&gt;http://www.washington.edu/itconnect/connect/email/uw-email/configuring/os-x-mail6/&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="notes"></category><category term="mac"></category></entry><entry><title>Setup after clean install of El Capitan</title><link href="https://nhoffman.github.io/borborygmi/mac-setup-el-capitan.html" rel="alternate"></link><published>2015-11-02T00:00:00-08:00</published><updated>2015-11-02T00:00:00-08:00</updated><author><name>unknown</name></author><id>tag:nhoffman.github.io,2015-11-02:/borborygmi/mac-setup-el-capitan.html</id><summary type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgb619f6c"&gt;First applications&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org2a1f366"&gt;Developer tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgc8e5ad7"&gt;X11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgb7a8436"&gt;iTerm2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org2caa704"&gt;Others&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org39d9553"&gt;UW only&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org09930c5"&gt;system-level configuration&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org612d288"&gt;turn off spelling autocorrect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgfe880ad"&gt;turn off spaces key shortcuts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgbbaa119"&gt;homebrew&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org626243d"&gt;packages installed using homebrew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org2c8dc98"&gt;homebrew cask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org83452da"&gt;homebrew API token&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org4aa4b5d"&gt;zsh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org52c2f67"&gt;ssh&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org3e8fe0a"&gt;update /System/Library/LaunchAgents/org.openbsd.ssh-agent.plist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgea7c89c"&gt;create $ZSH_INITDIR/ssh-ask-keychain (called from start_ssh_agent.zsh …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgb619f6c"&gt;First applications&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org2a1f366"&gt;Developer tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgc8e5ad7"&gt;X11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgb7a8436"&gt;iTerm2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org2caa704"&gt;Others&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org39d9553"&gt;UW only&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org09930c5"&gt;system-level configuration&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org612d288"&gt;turn off spelling autocorrect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgfe880ad"&gt;turn off spaces key shortcuts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgbbaa119"&gt;homebrew&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org626243d"&gt;packages installed using homebrew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org2c8dc98"&gt;homebrew cask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org83452da"&gt;homebrew API token&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org4aa4b5d"&gt;zsh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org52c2f67"&gt;ssh&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org3e8fe0a"&gt;update /System/Library/LaunchAgents/org.openbsd.ssh-agent.plist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgea7c89c"&gt;create $ZSH_INITDIR/ssh-ask-keychain (called from start_ssh_agent.zsh)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgc0c4656"&gt;create $ZSH_INITDIR/start_ssh_agent.zsh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgee36bd9"&gt;git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org4d77aa0"&gt;emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgc7bf665"&gt;python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org33a8acb"&gt;R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org747bae3"&gt;mail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orge52ebf2"&gt;sshfs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orge6fad28"&gt;wkhtmltopdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I had enough issues after updating to El Capitan (the inability to save my
wifi password in the system keychain was the tipping point) that I
decided to perform a clean install. Here are some notes.
&lt;/p&gt;

&lt;div id="outline-container-orgb619f6c" class="outline-2"&gt;
&lt;h2 id="orgb619f6c"&gt;First applications&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb619f6c"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2a1f366" class="outline-3"&gt;
&lt;h3 id="org2a1f366"&gt;Developer tools&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2a1f366"&gt;
&lt;p&gt;
Pretty much the first thing any mac needs is the command line tools. This can be done from the command line:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;xcode-select --install
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc8e5ad7" class="outline-3"&gt;
&lt;h3 id="orgc8e5ad7"&gt;X11&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc8e5ad7"&gt;
&lt;p&gt;
Download and install Xquartz:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~/Downloads
wget http://xquartz.macosforge.org/downloads/SL/XQuartz-2.7.8.dmg
open XQuartz-2.7.8.dmg
sudo installer -pkg /Volumes/XQuartz-2.7.8/XQuartz.pkg -target /
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Note for next time: might be worth trying to use homebrew.
&lt;/p&gt;

&lt;p&gt;
X11 key bindings so that the option key is used for Meta..
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cat &amp;gt; ~/.Xmodmap &amp;lt;&amp;lt;EOF
clear Mod1
clear Mod2
keycode 63 = Mode_switch
keycode 66 = Meta_L
add Mod1 = Meta_L
add Mod2 = Mode_switch
EOF
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb7a8436" class="outline-3"&gt;
&lt;h3 id="orgb7a8436"&gt;iTerm2&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb7a8436"&gt;
&lt;p&gt;
Update a few settings.
&lt;/p&gt;

&lt;p&gt;
Preferences &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Keys and do these things:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;select "Left/right option key acts as": +Esc&lt;/li&gt;
&lt;li&gt;+ &amp;#x2013;&amp;gt; Keyboard shortcut "OPT+&amp;lt;left arrow&amp;gt;": Send Escape sequence "b"&lt;/li&gt;
&lt;li&gt;+ &amp;#x2013;&amp;gt; Keyboard shortcut "OPT+&amp;lt;right arrow&amp;gt;": Send Escape sequence "f"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Default appearance:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Preferences &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Colors &amp;#x2013;&amp;gt; Load Presets &amp;#x2013;&amp;gt; Light Background&lt;/li&gt;
&lt;li&gt;Preferences &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Text &amp;#x2013;&amp;gt; Change Font &amp;#x2013;&amp;gt; 14 point&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2caa704" class="outline-3"&gt;
&lt;h3 id="org2caa704"&gt;Others&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2caa704"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Dropbox&lt;/li&gt;
&lt;li&gt;SizeUp - &lt;a href="http://www.irradiatedsoftware.com/"&gt;http://www.irradiatedsoftware.com/&lt;/a&gt; (license in Dropbox/software_licenses)&lt;/li&gt;
&lt;li&gt;MacTex - download from &lt;a href="http://tug.org/mactex/"&gt;http://tug.org/mactex/&lt;/a&gt;
&lt;a href="http://mirror.ctan.org/systems/mac/mactex/MacTeX.pkg"&gt;http://mirror.ctan.org/systems/mac/mactex/MacTeX.pkg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HipChat client&lt;/li&gt;
&lt;li&gt;Chrome&lt;/li&gt;
&lt;li&gt;Dash 2 (App store)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org39d9553" class="outline-3"&gt;
&lt;h3 id="org39d9553"&gt;UW only&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org39d9553"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Sophos antivirus: &lt;a href="https://softy.cac.washington.edu/sophos/for-staff/"&gt;https://softy.cac.washington.edu/sophos/for-staff/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Junos Pulse (SSL VPN): &lt;a href="https://networks.uwmedicine.org/content/sslvpn-frequently-asked-questions-14"&gt;https://networks.uwmedicine.org/content/sslvpn-frequently-asked-questions-14&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org09930c5" class="outline-2"&gt;
&lt;h2 id="org09930c5"&gt;system-level configuration&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org09930c5"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org612d288" class="outline-3"&gt;
&lt;h3 id="org612d288"&gt;turn off spelling autocorrect&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org612d288"&gt;
&lt;p&gt;
System Preferences &amp;#x2013;&amp;gt; Language &amp;amp; Text &amp;#x2013;&amp;gt; Text tab &amp;#x2013;&amp;gt; unselect "Correct spelling automatically"
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgfe880ad" class="outline-3"&gt;
&lt;h3 id="orgfe880ad"&gt;turn off spaces key shortcuts&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgfe880ad"&gt;
&lt;p&gt;
System Preferences &amp;#x2013;&amp;gt; Keyboard &amp;#x2013;&amp;gt; Keyboard Shortcuts &amp;#x2013;&amp;gt; unselect C+{&amp;lt;-,-&amp;gt;}
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbbaa119" class="outline-2"&gt;
&lt;h2 id="orgbbaa119"&gt;homebrew&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbbaa119"&gt;
&lt;p&gt;
Note that El Capitan introduced &lt;a href="https://en.wikipedia.org/wiki/System_Integrity_Protection"&gt;System Integrity Protection (SIP)&lt;/a&gt;, which may need to be temporarily disabled during homebrew installation. See &lt;a href="https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/El_Capitan_and_Homebrew.md"&gt;https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/El_Capitan_and_Homebrew.md&lt;/a&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
brew doctor
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
If it becomes necessary to fix permissions:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;sudo chown -R $(whoami) /usr/local
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org626243d" class="outline-3"&gt;
&lt;h3 id="org626243d"&gt;packages installed using homebrew&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org626243d"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install homebrew/dupes/tcl-tk &amp;amp;&amp;amp; \
brew install aspell &amp;amp;&amp;amp; \
brew install autojump &amp;amp;&amp;amp; \
brew install berkeley-db4 &amp;amp;&amp;amp; \
brew install gcc &amp;amp;&amp;amp; \
brew install git &amp;amp;&amp;amp; \
brew install gpg &amp;amp;&amp;amp; \
brew install graphviz &amp;amp;&amp;amp; \
brew install htop-osx &amp;amp;&amp;amp; \
brew install latex2rtf &amp;amp;&amp;amp; \
brew install openssh &amp;amp;&amp;amp; \
brew install pandoc &amp;amp;&amp;amp; \
brew install pkg-config &amp;amp;&amp;amp; \
brew install readline &amp;amp;&amp;amp; \
brew install sqlite &amp;amp;&amp;amp; \
brew install tmux &amp;amp;&amp;amp; \
brew install tree &amp;amp;&amp;amp; \
brew install wget &amp;amp;&amp;amp; \
brew install zsh
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2c8dc98" class="outline-3"&gt;
&lt;h3 id="org2c8dc98"&gt;homebrew cask&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2c8dc98"&gt;
&lt;p&gt;
Command line installer for desktop applications. See &lt;a href="https://caskroom.github.io"&gt;https://caskroom.github.io&lt;/a&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew tap caskroom/cask
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Install some applications
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew cask install java
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org83452da" class="outline-3"&gt;
&lt;h3 id="org83452da"&gt;homebrew API token&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org83452da"&gt;
&lt;p&gt;
Apparently lots of requests to GutHub via homebrew can hit a rate limit. There's a higher limit if you create an API token. See &lt;a href="https://gist.github.com/christopheranderton/8644743"&gt;https://gist.github.com/christopheranderton/8644743&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Here's the url for the token creation dialog:
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://github.com/settings/tokens/new?scopes=&amp;amp;description=Homebrew"&gt;https://github.com/settings/tokens/new?scopes=&amp;amp;description=Homebrew&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Make sure that all 'scopes' are unchecked. Once you generate the token, add to your shell profile:
&lt;/p&gt;

&lt;pre class="example"&gt;
export HOMEBREW_GITHUB_API_TOKEN=token_here
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4aa4b5d" class="outline-3"&gt;
&lt;h3 id="org4aa4b5d"&gt;zsh&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4aa4b5d"&gt;
&lt;p&gt;
Install zsh with Homebrew above
&lt;/p&gt;

&lt;p&gt;
Change shell to zsh
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;sudo -s
echo /usr/local/bin/zsh &amp;gt;&amp;gt; /etc/shells
exit
chsh -s /usr/local/bin/zsh $USER
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
zsh init files are in Dropbox/zsh
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cat &amp;gt; ~/.zshenv &amp;lt;&amp;lt;EOF
. ~/Dropbox/zsh/zstartup
EOF
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org52c2f67" class="outline-2"&gt;
&lt;h2 id="org52c2f67"&gt;ssh&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org52c2f67"&gt;
&lt;p&gt;
After installing homebrew's openssh on El Capitan, ssh-agent no longer
seemed to work (in the sense that after using ssh-add to cache a
passphrase, I still got a system prompt when trying to ssh). This
seemed to be fixed by the instructions I found at the url below (my
version is functionally the same but uses PlistBuddy to edit the
plist):
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://coderwall.com/p/qdwcpg/using-the-latest-ssh-from-homebrew-on-osx"&gt;https://coderwall.com/p/qdwcpg/using-the-latest-ssh-from-homebrew-on-osx&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3e8fe0a" class="outline-3"&gt;
&lt;h3 id="org3e8fe0a"&gt;update /System/Library/LaunchAgents/org.openbsd.ssh-agent.plist&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3e8fe0a"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;sudo /usr/libexec/PlistBuddy /System/Library/LaunchAgents/org.openbsd.ssh-agent.plist&amp;lt;&amp;lt;EOF
Delete :ProgramArguments
Add :ProgramArguments array
Add :ProgramArguments: string /usr/local/bin/ssh-agent
Add :ProgramArguments: string -D
Add :ProgramArguments: string -t 1d
Save
Exit
EOF
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This should change the original value of &lt;code&gt;ProgramArguments&lt;/code&gt;:
&lt;/p&gt;

&lt;pre class="example" id="orgb8b571c"&gt;
&amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;
&amp;lt;array&amp;gt;
	&amp;lt;string&amp;gt;/usr/bin/ssh-agent&amp;lt;/string&amp;gt;
	&amp;lt;string&amp;gt;-l&amp;lt;/string&amp;gt;
&amp;lt;/array&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
to
&lt;/p&gt;

&lt;pre class="example" id="orgc765e44"&gt;
&amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;
&amp;lt;array&amp;gt;
	&amp;lt;string&amp;gt;/usr/local/bin/ssh-agent&amp;lt;/string&amp;gt;
	&amp;lt;string&amp;gt;-D&amp;lt;/string&amp;gt;
	&amp;lt;string&amp;gt;-t 1d&amp;lt;/string&amp;gt;
&amp;lt;/array&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
Now restart the service
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;launchctl unload /System/Library/LaunchAgents/org.openbsd.ssh-agent.plist
launchctl load -w /System/Library/LaunchAgents/org.openbsd.ssh-agent.plist
launchctl start org.openbsd.ssh-agent
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgea7c89c" class="outline-3"&gt;
&lt;h3 id="orgea7c89c"&gt;create $ZSH_INITDIR/ssh-ask-keychain (called from start_ssh_agent.zsh)&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgea7c89c"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cat ~/Dropbox/zsh/ssh-ask-keychain
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc0c4656" class="outline-3"&gt;
&lt;h3 id="orgc0c4656"&gt;create $ZSH_INITDIR/start_ssh_agent.zsh&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc0c4656"&gt;
&lt;p&gt;
(either as a file sourced from .zshrc, or as a code block in a login script)
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cat ~/Dropbox/zsh/ssh_environ.zsh
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgee36bd9" class="outline-2"&gt;
&lt;h2 id="orgee36bd9"&gt;git&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgee36bd9"&gt;
&lt;pre class="example"&gt;
git config --global user.name "My Name"
git config --global user.email me@email.com
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4d77aa0" class="outline-2"&gt;
&lt;h2 id="org4d77aa0"&gt;emacs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4d77aa0"&gt;
&lt;p&gt;
Install emacs24 binary from &lt;a href="http://emacsformacosx.com/"&gt;http://emacsformacosx.com/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://emacsformacosx.com/emacs-builds/Emacs-24.5-1-universal.dmg"&gt;http://emacsformacosx.com/emacs-builds/Emacs-24.5-1-universal.dmg&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Check out my .emacs.d
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~
git clone git@github.com:nhoffman/.emacs.d.git
git submodule init
git submodule update
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc7bf665" class="outline-2"&gt;
&lt;h2 id="orgc7bf665"&gt;python&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc7bf665"&gt;
&lt;p&gt;
Use homebrew - see
&lt;a href="https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/Homebrew-and-Python.md"&gt;https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/Homebrew-and-Python.md&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Run &lt;code&gt;brew info python&lt;/code&gt; for required and optional dependencies
(installed above).
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install python --with-berkeley-db4 --with-tcl-tk
brew linkapps python
pip install -U pip
pip install -U setuptools
pip install -U virtualenv
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Install some python packages using homebrew - these are time consuming to install otherwise.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install homebrew/python/numpy
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Install some other packages to the system using pip.
&lt;/p&gt;

&lt;p&gt;
For elpy:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;pip install -r &amp;lt;(curl https://raw.githubusercontent.com/jorgenschaefer/elpy/master/requirements.txt)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
ansible
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;sudo mkdir /usr/share/ansible
sudo chown -R $(whoami) /usr/share/ansible
pip install ansible
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Others
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;pip install csvkit
pip install reportlab
pip install scons
pip install jinja2
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org33a8acb" class="outline-2"&gt;
&lt;h2 id="org33a8acb"&gt;R&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org33a8acb"&gt;
&lt;p&gt;
Really doubling down on homebrew this time around:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew tap homebrew/science
brew install r
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;R --slave &amp;lt;&amp;lt; EOF
packages &amp;lt;- c("ape", "sqldf", "ROCR", "lattice", "RSQLite", "latticeExtra", "argparse", "data.table")
install.packages(packages, repos="http://cran.fhcrc.org/", dependencies=TRUE, clean=TRUE)
EOF
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org747bae3" class="outline-2"&gt;
&lt;h2 id="org747bae3"&gt;mail&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org747bae3"&gt;
&lt;p&gt;
&lt;a href="http://www.washington.edu/itconnect/connect/email/uw-email/configuring/os-x-mail6/"&gt;http://www.washington.edu/itconnect/connect/email/uw-email/configuring/os-x-mail6/&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge52ebf2" class="outline-2"&gt;
&lt;h2 id="orge52ebf2"&gt;sshfs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge52ebf2"&gt;
&lt;p&gt;
Provided by the project &lt;a href="http://osxfuse.github.io/"&gt;http://osxfuse.github.io/&lt;/a&gt; - the links below
are for binaries provided as installers.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~/Downloads
wget http://sourceforge.net/projects/osxfuse/files/osxfuse-2.8.2/osxfuse-2.8.2.dmg
wget https://github.com/osxfuse/sshfs/releases/download/osxfuse-sshfs-2.5.0/sshfs-2.5.0.pkg
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge6fad28" class="outline-2"&gt;
&lt;h2 id="orge6fad28"&gt;wkhtmltopdf&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge6fad28"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~/Downloads
wget 'http://wkhtmltopdf.googlecode.com/files/wkhtmltopdf.dmg'
open wkhtmltopdf.dmg
cp -r /Volumes/wkhtmltopdf/wkhtmltopdf.app /Applications
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Now create an alias:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;alias wkhtmltopdf='/Applications/wkhtmltopdf.app/Contents/MacOS/wkhtmltopdf'
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="notes"></category><category term="mac"></category></entry><entry><title>Setup for VirtualBox VM running Ubuntu 14.04 on OS X Mavericks</title><link href="https://nhoffman.github.io/borborygmi/virtualbox-setup.html" rel="alternate"></link><published>2015-02-06T00:00:00-08:00</published><updated>2015-02-06T00:00:00-08:00</updated><author><name>unknown</name></author><id>tag:nhoffman.github.io,2015-02-06:/borborygmi/virtualbox-setup.html</id><summary type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org5c02ba4"&gt;VirtualBox preferences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org3c432fe"&gt;Create an Ubuntu 14.04 VM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org30af5db"&gt;Set up an IP address&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Here are my notes for setting up an Ubuntu VM to work on some web
applications. This is intended to be a sandbox for development, so
I'll err on the side of convenience (at …&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org5c02ba4"&gt;VirtualBox preferences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org3c432fe"&gt;Create an Ubuntu 14.04 VM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org30af5db"&gt;Set up an IP address&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Here are my notes for setting up an Ubuntu VM to work on some web
applications. This is intended to be a sandbox for development, so
I'll err on the side of convenience (at the expense of security, since
the VM should never be accessible from outside of the host
machine). I'm doing this on a machine running OS X Mavericks. Much of
the content was adapted from this really excellent post:
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://leemendelowitz.github.io/blog/ubuntu-server-virtualbox.html"&gt;https://leemendelowitz.github.io/blog/ubuntu-server-virtualbox.html&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
I also went on to provide local network access via a static IP
address. I chose not to include the guest additions or a shared
directory - I wanted to interact with this VM as if it were a remote
host.
&lt;/p&gt;

&lt;div id="outline-container-org5c02ba4" class="outline-2"&gt;
&lt;h2 id="org5c02ba4"&gt;VirtualBox preferences&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5c02ba4"&gt;
&lt;p&gt;
Install VirtualBox from the vendor's website.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;vboxmanage --version
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
4.3.20r96996
&lt;/pre&gt;


&lt;p&gt;
First, there are some application-level settings that should be
modified right off the bat.
&lt;/p&gt;

&lt;p&gt;
Rename the default location for VirtualBox resources to something sensible.
&lt;/p&gt;

&lt;pre class="example"&gt;
VirtualBox -&amp;gt; Preferences -&amp;gt; Default Machine Folder -&amp;gt; ~/VirtualBox
&lt;/pre&gt;


&lt;p&gt;
Create a host-only network. Go to
&lt;/p&gt;

&lt;pre class="example"&gt;
VirtualBox -&amp;gt; Preferences -&amp;gt; Network -&amp;gt; Host Only Networks
&lt;/pre&gt;


&lt;p&gt;
and from here, click on the little green icon with a plus on the right -
this creates the host-only network &lt;code&gt;vboxnet0&lt;/code&gt;. We'll need this later.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3c432fe" class="outline-2"&gt;
&lt;h2 id="org3c432fe"&gt;Create an Ubuntu 14.04 VM&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3c432fe"&gt;
&lt;p&gt;
Download ubuntu-14.04.1-server-amd64.iso &lt;a href="http://www.ubuntu.com/download/server"&gt;here&lt;/a&gt; (we'll move it into
$VBOXDIR below).
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;VBOXDIR="$HOME/VirtualBox"
VM_NAME="Ubuntu14.04-1"
UBUNTU_ISO_PATH="${VBOXDIR:?}/ubuntu-14.04.1-server-amd64.iso"
VM_HD_PATH="${VBOXDIR:?}/${VM_NAME:?}.vdi"
mkdir -p "${VBOXDIR:?}"
mv ~/Downloads/ubuntu-14.04.1-server-amd64.iso "${VBOXDIR:?}"
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Create the VM.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;vboxmanage createvm --name ${VM_NAME:?} --ostype Ubuntu_64 --register
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
Virtual machine 'Ubuntu14.04-1' is created and registered.
UUID: 58826a23-fceb-4a03-b7c3-cc22c975ccec
Settings file: '/Users/nhoffman/VirtualBox/Ubuntu14.04-1/Ubuntu14.04-1.vbox'
&lt;/pre&gt;


&lt;p&gt;
I have to confess that I never could have figured these command out
without the post above. The ones defining HD and memory allocations
seemed pretty obvious. The last three lines will allow us to ssh into
the VM once the OS is installed (see below). If I could wish for one
thing from the VirtualBox application, it would be to generate the
corresponding &lt;code&gt;vboxmanage&lt;/code&gt; command from a menu action.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;vboxmanage createhd --filename ${VM_HD_PATH:?} --size 12288 # size in MB (12GB)
vboxmanage storagectl ${VM_NAME:?} --name "SATA Controller" --add sata --controller IntelAHCI
vboxmanage storageattach ${VM_NAME:?} --storagectl "SATA Controller" --port 0 --device 0 --type hdd --medium ${VM_HD_PATH:?}
vboxmanage storagectl ${VM_NAME:?} --name "IDE Controller" --add ide
vboxmanage storageattach ${VM_NAME:?} --storagectl "IDE Controller" --port 0 --device 0 --type dvddrive --medium ${UBUNTU_ISO_PATH:?}
vboxmanage modifyvm ${VM_NAME:?} --ioapic on
vboxmanage modifyvm ${VM_NAME:?} --memory 1024 --vram 128
vboxmanage modifyvm ${VM_NAME:?} --nic1 nat
vboxmanage modifyvm ${VM_NAME:?} --natpf1 "guestssh,tcp,,2222,,22"
vboxmanage modifyvm ${VM_NAME:?} --natdnshostresolver1 on
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Ok! This should result in a bootable VM. Here goes the first boot.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;vboxmanage startvm ${VM_NAME:?}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Now we let Ubuntu install itself. I chose the default for each option
and provided some extremely boring and insecure host settings:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;hostname: ubuntu&lt;/li&gt;
&lt;li&gt;full name: ubuntu&lt;/li&gt;
&lt;li&gt;username: ubuntu&lt;/li&gt;
&lt;li&gt;password: ubuntu&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Obviously this would be a terrible idea for a real system (as are an
ssh key without a passphrase, and allowing sudo without a password,
both of which I will be guilty of below).
&lt;/p&gt;

&lt;p&gt;
Once the system is installed, perform an upgrade and install the bare
essentials that will allow us to ssh in.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get -y upgrade
sudo apt-get install -y openssh-server
sudo shutdown -h now
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This is a good time to make a snapshot ("clean-image"). From now on,
I'll run the VM "headless" and ssh in to avoid having to use the
horrible VirtualBox terminal.
&lt;/p&gt;

&lt;pre class="example"&gt;
vboxmanage startvm Ubuntu14.04-1 --type headless
&lt;/pre&gt;


&lt;p&gt;
For now, we can ssh in using port 2222 redirected to localhost, but in
a minute, we'll give the VM an IP address.
&lt;/p&gt;

&lt;pre class="example"&gt;
ssh -p 2222 ubuntu@localhost
&lt;/pre&gt;


&lt;p&gt;
Now I'll degrade the security of my little VM sandbox even further by
allowing the ubuntu user to sudo without a password. Edit the sudoers
file:
&lt;/p&gt;

&lt;pre class="example"&gt;
sudo visudo
&lt;/pre&gt;


&lt;p&gt;
And add the following lines:
&lt;/p&gt;

&lt;pre class="example"&gt;
# ubuntu user can sudo without password
ubuntu ALL= NOPASSWD: ALL
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org30af5db" class="outline-2"&gt;
&lt;h2 id="org30af5db"&gt;Set up an IP address&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org30af5db"&gt;
&lt;p&gt;
I pieced together the following with the help of the following posts:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://www.websightdesigns.com/posts/view/how-to-set-up-a-local-web-server-with-virtualbox-on-mac-os-x"&gt;http://www.websightdesigns.com/posts/view/how-to-set-up-a-local-web-server-with-virtualbox-on-mac-os-x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://anupriti.blogspot.com/2014/10/invalid-settings-detected-virtualbox.html"&gt;http://anupriti.blogspot.com/2014/10/invalid-settings-detected-virtualbox.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.virtualbox.org/manual/ch06.html"&gt;https://www.virtualbox.org/manual/ch06.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
First power off the VM.
&lt;/p&gt;

&lt;pre class="example"&gt;
vboxmanage controlvm Ubuntu14.04-1 poweroff
&lt;/pre&gt;


&lt;p&gt;
Now we need to create host-only network. I would have loved to know how to do this using vboxmanage. Go to the Setting for this VM:
&lt;/p&gt;

&lt;pre class="example"&gt;
Settings -&amp;gt; Network -&amp;gt; Adapter2 -&amp;gt; Enable Network Adapter
&lt;/pre&gt;


&lt;ul class="org-ul"&gt;
&lt;li&gt;Attached to: Host-only Adapter&lt;/li&gt;
&lt;li&gt;Name: vboxnet0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
(remember, we created &lt;code&gt;vboxnet0&lt;/code&gt; in the application-level
configuration settings at the top).
&lt;/p&gt;

&lt;p&gt;
Power the VM back on and ssh in as above, then modify
&lt;code&gt;/etc/network/interfaces&lt;/code&gt; as shown.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;sudo -s
cat &amp;gt;&amp;gt; /etc/network/interfaces &amp;lt;&amp;lt;EOF

auto eth1
iface eth1 inet static
address 192.168.56.101
netmask 255.255.255.0
EOF
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
After a restart, you should be able to ping the VM at &lt;code&gt;192.168.56.101&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
This should work, too:
&lt;/p&gt;

&lt;pre class="example"&gt;
ssh ubuntu@192.168.56.101
&lt;/pre&gt;


&lt;p&gt;
And if you run this from the VM
&lt;/p&gt;

&lt;pre class="example"&gt;
python -m SimpleHTTPServer
&lt;/pre&gt;


&lt;p&gt;
you should be able to point your browser to
&lt;code&gt;http://192.168.56.101:8000&lt;/code&gt; and see a directory listing of &lt;code&gt;$HOME&lt;/code&gt;!
Better yet, add an entry to &lt;code&gt;/etc/hosts&lt;/code&gt; on the host machine:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;sudo -s
cp /etc/hosts /etc/hosts.bak
cat &amp;gt;&amp;gt; /etc/hosts &amp;lt;&amp;lt;EOF

# for VirtualBox VM Ubuntu14.04-1
192.168.56.101 ubuntu1
EOF
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
and browse to the following address:
&lt;/p&gt;

&lt;pre class="example"&gt;
http://ubuntu1:8000
&lt;/pre&gt;


&lt;p&gt;
Now make a ssh key pair for this VM and install the public key.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~/.ssh
ssh-keygen -f vm-unsafe
ssh ubuntu@192.168.56.101 'mkdir -p -m 700 ~/.ssh; cat - &amp;gt; ~/.ssh/authorized_keys; chmod 600 ~/.ssh/*' &amp;lt; ~/.ssh/vm-unsafe.pub
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Finally, create an entry in &lt;code&gt;~/.ssh/config&lt;/code&gt; (on the host machine, of
course) to create an alias for the VM:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;Host ubuntu1
     HostName 192.168.56.101
     User ubuntu
     IdentityFile ~/.ssh/vm-unsafe
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Now you can ssh in without a prompt for a password:
&lt;/p&gt;

&lt;pre class="example"&gt;
ssh ubuntu1
&lt;/pre&gt;


&lt;p&gt;
Time for another snapshot! ("ssh-ok")
&lt;/p&gt;

&lt;p&gt;
That's enough for now. It kills me that there are so many manual steps
in this process - more of them could probably be performed via the
command line given more time and patience than I have at this point!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="notes"></category><category term="linux"></category><category term="mac"></category><category term="virtualbox"></category></entry><entry><title>Compiling bcl2fastq v2.15 on Ubuntu 12.04 and 14.04</title><link href="https://nhoffman.github.io/borborygmi/compiling-bcl2fastq-on-ubuntu.html" rel="alternate"></link><published>2014-08-27T00:00:00-07:00</published><updated>2014-08-27T00:00:00-07:00</updated><author><name>unknown</name></author><id>tag:nhoffman.github.io,2014-08-27:/borborygmi/compiling-bcl2fastq-on-ubuntu.html</id><summary type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgb659852"&gt;Ubuntu 14.04 (Trusty Tahr)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org55a4465"&gt;Ubuntu 12.04 (Precise Pangolin)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Illumina provides a program for demultiplexing sequencing output
called &lt;code&gt;bcl2fastq&lt;/code&gt;. They get a gold star for releasing the source -
the downside is that they release binaries only for RHEL/CentOS, and
no build instructions for Ubuntu. So …&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgb659852"&gt;Ubuntu 14.04 (Trusty Tahr)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org55a4465"&gt;Ubuntu 12.04 (Precise Pangolin)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Illumina provides a program for demultiplexing sequencing output
called &lt;code&gt;bcl2fastq&lt;/code&gt;. They get a gold star for releasing the source -
the downside is that they release binaries only for RHEL/CentOS, and
no build instructions for Ubuntu. So how hard could it be?
&lt;/p&gt;

&lt;div id="outline-container-orgb659852" class="outline-2"&gt;
&lt;h2 id="orgb659852"&gt;Ubuntu 14.04 (Trusty Tahr)&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb659852"&gt;
&lt;p&gt;
I thought I'd start here since the packages are more up to date (turns
out it's a good thing I did, see the morass below). There's some
documentation from Illumina for compiling from source &lt;a href="http://supportres.illumina.com/documents/documentation/software_documentation/bcl2fastq/bcl2fastq-v2-0-user-guide-15051736-a.pdf"&gt;here&lt;/a&gt;. There's
not a lot to go on, other than a list of dependencies, which boils
down to:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;zlib&lt;/li&gt;
&lt;li&gt;librt&lt;/li&gt;
&lt;li&gt;libpthread&lt;/li&gt;
&lt;li&gt;gcc 4.1.2 (with c++)&lt;/li&gt;
&lt;li&gt;boost 1.54 (with its dependencies)&lt;/li&gt;
&lt;li&gt;cmake 2.8.9&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Really the only tricky part was figuring out the required packages,
which didn't correspond particularly well to the list of dependencies
above. I didn't bother trying to install specific version of any of
the dependencies other than boost 1.54.
&lt;/p&gt;

&lt;p&gt;
On an Amazon AWS EC2 instance (m3.medium, ubuntu-trusty-14.04-amd64-server-20140607.1 ami-e7b8c0d7):
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;sudo apt-get update
sudo apt-get upgrade
sudo apt-get install zlibc
sudo apt-get install libc6 # provides librt and libpthread
sudo apt-get install gcc
sudo apt-get install g++
sudo apt-get install libboost1.54-all-dev
sudo apt-get install cmake
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
From there, compilation more or less works as advertised:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;wget ftp://webdata2:webdata2@ussd-ftp.illumina.com/downloads/Software/bcl2fastq/bcl2fastq2-v2.15.0.4.tar.gz
tar -xf bcl2fastq2-v2.15.0.4.tar.gz
cd bcl2fastq
mkdir build
cd build
PREFIX=/usr/local
sudo mkdir -p ${PREFIX:?}
../src/configure --prefix=${PREFIX:?}
make
sudo make install
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
We wanted this version to coexist with an older one, so I renamed
the executable:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;sudo mv $PREFIX/bin/bcl2fastq $PREFIX/bin/bcl2fastq2
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org55a4465" class="outline-2"&gt;
&lt;h2 id="org55a4465"&gt;Ubuntu 12.04 (Precise Pangolin)&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org55a4465"&gt;
&lt;p&gt;
Emboldened, I went on to 12.04. This was a lot more painful. Lots of
trail and error. Here's what I came up with. More or less the same as
above at first (m3.medium, ubuntu-precise-12.04-amd64-server-20140717
ami-23f78e13):
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;sudo apt-get update
sudo apt-get upgrade
sudo apt-get install zlibc
sudo apt-get install libc6 # provides librt and libpthread
sudo apt-get install gcc
sudo apt-get install g++
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
We'll also need libboost version 1.54; to do this, we need to add a
third-party ppa (&lt;a href="https://launchpad.net/~boost-latest/+archive/ubuntu/ppa"&gt;https://launchpad.net/~boost-latest/+archive/ubuntu/ppa&lt;/a&gt;).
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;sudo apt-get install python-software-properties
sudo add-apt-repository ppa:boost-latest/ppa
sudo apt-get update
sudo apt-get install libboost1.54-all-dev
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
I tried to install cmake 2.8.9 from various ppa's but kept getting
errors when I compiled &lt;code&gt;bcl2fastq&lt;/code&gt;. So, source it is.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;sudo apt-get build-dep cmake
wget http://www.cmake.org/files/v2.8/cmake-2.8.9.tar.gz
tar -xf cmake-2.8.9.tar.gz
cd cmake-2.8.9
./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; sudo make install
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Finally, an error complaining about the absence of &lt;code&gt;sys/stat.h&lt;/code&gt;. I found good advice &lt;a href="http://askubuntu.com/questions/414110/wheres-my-usr-include-sys-directory"&gt;here&lt;/a&gt;:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;sudo mkdir -p /usr/include/sys
sudo ln -s /usr/include/x86_64-linux-gnu/sys/stat.h /usr/include/sys/stat.h
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
After all of that, compiling bcl2fasta worked as described for 14.04.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="notes"></category><category term="linux"></category></entry><entry><title>Creating lists containing variables</title><link href="https://nhoffman.github.io/borborygmi/lists-with-variables.html" rel="alternate"></link><published>2014-06-12T00:00:00-07:00</published><updated>2014-06-12T00:00:00-07:00</updated><author><name>unknown</name></author><id>tag:nhoffman.github.io,2014-06-12:/borborygmi/lists-with-variables.html</id><summary type="html">&lt;p&gt;
I learned a bit about list creation in elisp today. Here's how you join a list of strings in elisp:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-elisp"&gt;(mapconcat #'identity '("" "path" "to" "someplace") "/")
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
But I learned (thanks to &lt;a href="http://stackoverflow.com/users/113848/legoscia"&gt;legoscia&lt;/a&gt; on &lt;a href="http://stackoverflow.com/questions/24188100"&gt;stackoverflow&lt;/a&gt;) that simply
replacing an element in the list with a variable results in an error:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-elisp"&gt;(let ((path …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;
I learned a bit about list creation in elisp today. Here's how you join a list of strings in elisp:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-elisp"&gt;(mapconcat #'identity '("" "path" "to" "someplace") "/")
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
But I learned (thanks to &lt;a href="http://stackoverflow.com/users/113848/legoscia"&gt;legoscia&lt;/a&gt; on &lt;a href="http://stackoverflow.com/questions/24188100"&gt;stackoverflow&lt;/a&gt;) that simply
replacing an element in the list with a variable results in an error:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-elisp"&gt;(let ((path "someplace"))
  (mapconcat #'identity '("" "path" "to" path) "/"))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
Wrong type argument: sequencep, path
&lt;/pre&gt;


&lt;p&gt;
It turns out that a list constructed using a single quote includes
symbols (and not the corresponding values) in the list.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-elisp"&gt;(let ((path "someplace"))
  (print '("" "path" "to" path)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;

("" "path" "to" path)
&lt;/pre&gt;


&lt;p&gt;
Instead, create the list either using the &lt;code&gt;list&lt;/code&gt; function, or with a
backquote and a comma:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-elisp"&gt;(let ((path "someplace"))
  (print (list "" "path" "to" path))
  (print `("" "path" "to" ,path)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;

("" "path" "to" "someplace")

("" "path" "to" "someplace")
&lt;/pre&gt;


&lt;p&gt;
Yikes, that second syntax is&amp;#x2026; not intuitive. It turns out that the &lt;a href="http://www.gnu.org/software/emacs/manual/html_node/elisp/Backquote.html"&gt;backquote&lt;/a&gt; syntax exists just for this purpose:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Backquote constructs allow you to quote a list, but selectively
evaluate elements of that list&amp;#x2026; The special marker ',' inside of the
argument to backquote indicates a value that isn't constant. The Emacs
Lisp evaluator evaluates the argument of ',', and puts the value in
the list structure.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
Well, that's good to know. I needed to take it a step further, because
I was actually trying to store the value of a variable in an
&lt;code&gt;alist&lt;/code&gt;. Again, the familiar syntax for defining an alist stored the
symbol instead of the value:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-elisp"&gt;(let ((path "someplace"))
  (print '((:prologue . path))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;

((:prologue . path))
&lt;/pre&gt;


&lt;p&gt;
Nope.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-elisp"&gt;(let ((path "someplace"))
  (print (list `(:prologue . ,path))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;

((:prologue . "someplace"))
&lt;/pre&gt;


&lt;p&gt;
Much better.
&lt;/p&gt;
</content><category term="notes"></category><category term="elisp"></category></entry><entry><title>A practical introduction to databases and data management</title><link href="https://nhoffman.github.io/borborygmi/database-intro.html" rel="alternate"></link><published>2014-06-11T00:00:00-07:00</published><updated>2014-06-11T00:00:00-07:00</updated><author><name>unknown</name></author><id>tag:nhoffman.github.io,2014-06-11:/borborygmi/database-intro.html</id><summary type="html">&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;i&gt;Edit 2015-07-26: added a section on date formatting&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i&gt;Edit 2016-07-11: add reference to Tidy Data&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
This post contains the content of a lecture prepared for Laboratory Medicine residents as part of a series on medical informatics.
&lt;/p&gt;

&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org0c0c769"&gt;Objectives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org2eb8ea4"&gt;Relational database terminology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org66f0ae5"&gt;Relations&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orge13d0be"&gt;one to one&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org3042c9b"&gt;one to many …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;i&gt;Edit 2015-07-26: added a section on date formatting&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i&gt;Edit 2016-07-11: add reference to Tidy Data&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
This post contains the content of a lecture prepared for Laboratory Medicine residents as part of a series on medical informatics.
&lt;/p&gt;

&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org0c0c769"&gt;Objectives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org2eb8ea4"&gt;Relational database terminology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org66f0ae5"&gt;Relations&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orge13d0be"&gt;one to one&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org3042c9b"&gt;one to many&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgbf88cde"&gt;many to many&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org0855c1f"&gt;Data types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org202ca42"&gt;SQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org445eabf"&gt;Some examples of relational database operations using SQL&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orge3e2c52"&gt;select&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org2b1d012"&gt;join&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgae99700"&gt;group and aggregate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org1a821ac"&gt;Hierarchical databases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgd642258"&gt;Data management patterns and antipatterns&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orga627cb3"&gt;name fields sensibly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgbb3304d"&gt;don't mix data types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org9fe7967"&gt;tall, not wide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgbe717df"&gt;be consistent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgb6d944c"&gt;use multiple tables (normalize the data)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgc1cb91c"&gt;Use a standard format for dates and times&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;table id="org5951f75" class="table table-striped table-bordered table-condensed" style="display: none;"&gt;


&lt;colgroup&gt;
&lt;col class="org-right" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-right" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;pkey&lt;/td&gt;
&lt;td class="org-left"&gt;mrn&lt;/td&gt;
&lt;td class="org-left"&gt;name&lt;/td&gt;
&lt;td class="org-right"&gt;dob&lt;/td&gt;
&lt;td class="org-left"&gt;sex&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-left"&gt;U123456&lt;/td&gt;
&lt;td class="org-left"&gt;Roger Rabbit&lt;/td&gt;
&lt;td class="org-right"&gt;1939-04-01&lt;/td&gt;
&lt;td class="org-left"&gt;M&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-left"&gt;U654321&lt;/td&gt;
&lt;td class="org-left"&gt;Jessica Krupnick&lt;/td&gt;
&lt;td class="org-right"&gt;1924-10-27&lt;/td&gt;
&lt;td class="org-left"&gt;F&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;table id="orga0213e4" class="table table-striped table-bordered table-condensed" style="display: none;"&gt;


&lt;colgroup&gt;
&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;doc_id&lt;/td&gt;
&lt;td class="org-left"&gt;doc_name&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;P01&lt;/td&gt;
&lt;td class="org-left"&gt;Dr. Spock&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;P02&lt;/td&gt;
&lt;td class="org-left"&gt;Dr. Horrible&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;P03&lt;/td&gt;
&lt;td class="org-left"&gt;Dr. Strangelove&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;table id="org86b4fad" class="table table-striped table-bordered table-condensed" style="display: none;"&gt;


&lt;colgroup&gt;
&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;doc_id&lt;/td&gt;
&lt;td class="org-left"&gt;mrn&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;P01&lt;/td&gt;
&lt;td class="org-left"&gt;U123456&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;P01&lt;/td&gt;
&lt;td class="org-left"&gt;U654321&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;P02&lt;/td&gt;
&lt;td class="org-left"&gt;U654321&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;P03&lt;/td&gt;
&lt;td class="org-left"&gt;U123456&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;table id="org51ab9b9" class="table table-striped table-bordered table-condensed" style="display: none;"&gt;


&lt;colgroup&gt;
&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-right" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-right" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;mrn&lt;/td&gt;
&lt;td class="org-left"&gt;accession&lt;/td&gt;
&lt;td class="org-right"&gt;date&lt;/td&gt;
&lt;td class="org-left"&gt;battery_code&lt;/td&gt;
&lt;td class="org-left"&gt;test_code&lt;/td&gt;
&lt;td class="org-right"&gt;value&lt;/td&gt;
&lt;td class="org-left"&gt;flag&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;U123456&lt;/td&gt;
&lt;td class="org-left"&gt;Acc1&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-02&lt;/td&gt;
&lt;td class="org-left"&gt;BMP&lt;/td&gt;
&lt;td class="org-left"&gt;GLU&lt;/td&gt;
&lt;td class="org-right"&gt;135.0&lt;/td&gt;
&lt;td class="org-left"&gt;H&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;U123456&lt;/td&gt;
&lt;td class="org-left"&gt;Acc1&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-02&lt;/td&gt;
&lt;td class="org-left"&gt;BMP&lt;/td&gt;
&lt;td class="org-left"&gt;K&lt;/td&gt;
&lt;td class="org-right"&gt;4.0&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;U123456&lt;/td&gt;
&lt;td class="org-left"&gt;Acc2&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-03&lt;/td&gt;
&lt;td class="org-left"&gt;CMP&lt;/td&gt;
&lt;td class="org-left"&gt;GLU&lt;/td&gt;
&lt;td class="org-right"&gt;90.0&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;U123456&lt;/td&gt;
&lt;td class="org-left"&gt;Acc2&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-03&lt;/td&gt;
&lt;td class="org-left"&gt;CMP&lt;/td&gt;
&lt;td class="org-left"&gt;K&lt;/td&gt;
&lt;td class="org-right"&gt;2.7&lt;/td&gt;
&lt;td class="org-left"&gt;L&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;U654321&lt;/td&gt;
&lt;td class="org-left"&gt;Acc3&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-02&lt;/td&gt;
&lt;td class="org-left"&gt;CMP&lt;/td&gt;
&lt;td class="org-left"&gt;GLU&lt;/td&gt;
&lt;td class="org-right"&gt;85.0&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;U654321&lt;/td&gt;
&lt;td class="org-left"&gt;Acc3&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-02&lt;/td&gt;
&lt;td class="org-left"&gt;CMP&lt;/td&gt;
&lt;td class="org-left"&gt;K&lt;/td&gt;
&lt;td class="org-right"&gt;4.1&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;U654321&lt;/td&gt;
&lt;td class="org-left"&gt;Acc4&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-03&lt;/td&gt;
&lt;td class="org-left"&gt;BMP&lt;/td&gt;
&lt;td class="org-left"&gt;GLU&lt;/td&gt;
&lt;td class="org-right"&gt;75.0&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;U654321&lt;/td&gt;
&lt;td class="org-left"&gt;Acc4&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-03&lt;/td&gt;
&lt;td class="org-left"&gt;BMP&lt;/td&gt;
&lt;td class="org-left"&gt;K&lt;/td&gt;
&lt;td class="org-right"&gt;4.2&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;table id="org40b8801" class="table table-striped table-bordered table-condensed" style="display: none;"&gt;


&lt;colgroup&gt;
&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-right" /&gt;

&lt;col class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;test_name&lt;/td&gt;
&lt;td class="org-left"&gt;test_code&lt;/td&gt;
&lt;td class="org-left"&gt;ref_range&lt;/td&gt;
&lt;td class="org-right"&gt;range_low&lt;/td&gt;
&lt;td class="org-right"&gt;range_hi&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Glucose&lt;/td&gt;
&lt;td class="org-left"&gt;GLU&lt;/td&gt;
&lt;td class="org-left"&gt;62 - 125&lt;/td&gt;
&lt;td class="org-right"&gt;62&lt;/td&gt;
&lt;td class="org-right"&gt;125&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Potassium&lt;/td&gt;
&lt;td class="org-left"&gt;K&lt;/td&gt;
&lt;td class="org-left"&gt;3.7 - 5.2&lt;/td&gt;
&lt;td class="org-right"&gt;3.7&lt;/td&gt;
&lt;td class="org-right"&gt;5.2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;table id="org4545108" class="table table-striped table-bordered table-condensed" style="display: none;"&gt;


&lt;colgroup&gt;
&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;battery_code&lt;/td&gt;
&lt;td class="org-left"&gt;battery_name&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;CMP&lt;/td&gt;
&lt;td class="org-left"&gt;Comprehensive Metabolic Panel&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;BMP&lt;/td&gt;
&lt;td class="org-left"&gt;Basic Metabolic Panel&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;table id="org0187702" class="table table-striped table-bordered table-condensed" style="display: none;"&gt;


&lt;colgroup&gt;
&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;battery_code&lt;/td&gt;
&lt;td class="org-left"&gt;test_code&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;CMP&lt;/td&gt;
&lt;td class="org-left"&gt;GLU&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;CMP&lt;/td&gt;
&lt;td class="org-left"&gt;K&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;BMP&lt;/td&gt;
&lt;td class="org-left"&gt;GLU&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;BMP&lt;/td&gt;
&lt;td class="org-left"&gt;K&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;div id="outline-container-org0c0c769" class="outline-2"&gt;
&lt;h2 id="org0c0c769"&gt;Objectives&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0c0c769"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;be aware that relational databases are a thing and can be described using some terms.&lt;/li&gt;
&lt;li&gt;get to know the different types of relations.&lt;/li&gt;
&lt;li&gt;see some examples of SQL in action.&lt;/li&gt;
&lt;li&gt;make a connection between the above and some useful habits (and harmful anti-patterns) for organizing laboratory and experimental data.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2eb8ea4" class="outline-2"&gt;
&lt;h2 id="org2eb8ea4"&gt;Relational database terminology&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2eb8ea4"&gt;
&lt;dl class="org-dl"&gt;
&lt;dt&gt;relational database&lt;/dt&gt;&lt;dd&gt;a tabular database with defined "relations" (which can be described in terms of &lt;a href="http://en.wikipedia.org/wiki/Relational_algebra"&gt;relational algebra&lt;/a&gt;) among elements within and between tables.&lt;/dd&gt;
&lt;dt&gt;row&lt;/dt&gt;&lt;dd&gt;contains a &lt;b&gt;tuple&lt;/b&gt; or &lt;b&gt;record&lt;/b&gt; representing a single item.&lt;/dd&gt;
&lt;dt&gt;column&lt;/dt&gt;&lt;dd&gt;represents an &lt;b&gt;attribute&lt;/b&gt; or &lt;b&gt;field&lt;/b&gt; and corresponds to a labeled element of a record; all elements within a column are of the same data type.&lt;/dd&gt;
&lt;dt&gt;table&lt;/dt&gt;&lt;dd&gt;a set of rows and columns.&lt;/dd&gt;
&lt;/dl&gt;


&lt;div id="orga28e833" class="figure"&gt;
&lt;p&gt;&lt;img src="database-intro/984px-Relational_database_terms.svg.png" alt="984px-Relational_database_terms.svg.png" /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 1: &lt;/span&gt;Components of a table from a relational database. Source: &lt;a href="http://en.wikipedia.org/wiki/Relational_database"&gt;wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;dl class="org-dl"&gt;
&lt;dt&gt;primary key&lt;/dt&gt;&lt;dd&gt;a field (or multiple fields in combination) that uniquely identify a row. Can either be &lt;b&gt;natural&lt;/b&gt; (i.e., consisting of attributes that already exist in the table), or &lt;b&gt;surrogate&lt;/b&gt; (i.e., a new attribute with no "real world" meaning created for the purpose). An example of a combination of attributes serving as a primary key: name + DOB&lt;/dd&gt;
&lt;/dl&gt;

&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;


&lt;colgroup&gt;
&lt;col class="org-right" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-right" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;pkey&lt;/td&gt;
&lt;td class="org-left"&gt;mrn&lt;/td&gt;
&lt;td class="org-left"&gt;name&lt;/td&gt;
&lt;td class="org-right"&gt;dob&lt;/td&gt;
&lt;td class="org-left"&gt;sex&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-left"&gt;U123456&lt;/td&gt;
&lt;td class="org-left"&gt;Roger Rabbit&lt;/td&gt;
&lt;td class="org-right"&gt;1939-04-01&lt;/td&gt;
&lt;td class="org-left"&gt;M&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-left"&gt;U654321&lt;/td&gt;
&lt;td class="org-left"&gt;Jessica Krupnick&lt;/td&gt;
&lt;td class="org-right"&gt;1924-10-27&lt;/td&gt;
&lt;td class="org-left"&gt;F&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;dl class="org-dl"&gt;
&lt;dt&gt;index&lt;/dt&gt;&lt;dd&gt;a data structure that improves the efficiency of data manipulation by reorganizing or clustering elements, typically as a tree.&lt;/dd&gt;
&lt;dt&gt;normalization&lt;/dt&gt;&lt;dd&gt;when data is arranged to eliminate redundancy by dividing fields into separate tables, a database is said to be &lt;b&gt;&lt;a href="http://en.wikipedia.org/wiki/Database_normalization"&gt;normalized&lt;/a&gt;&lt;/b&gt;. There is a tradeoff between normalization and complexity: a database may not be fully normalized to make queries simpler or more efficient (eg, by requiring fewer joins).&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org66f0ae5" class="outline-2"&gt;
&lt;h2 id="org66f0ae5"&gt;Relations&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org66f0ae5"&gt;
&lt;p&gt;
For more details, see &lt;a href="http://en.wikipedia.org/wiki/Cardinality_(data_modeling)"&gt;http://en.wikipedia.org/wiki/Cardinality_(data_modeling)&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge13d0be" class="outline-3"&gt;
&lt;h3 id="orge13d0be"&gt;one to one&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge13d0be"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;describes the relationship between two or more elements in which each element uniquely identifies the other (likely to be true only in a specific context).&lt;/li&gt;
&lt;li&gt;represented by elements in the same row&lt;/li&gt;
&lt;li&gt;eg, name &amp;lt;&amp;#x2013;&amp;gt; mrn (but think about whether this is always true!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Graphically:
&lt;/p&gt;


&lt;div id="org95cf54a" class="figure"&gt;
&lt;p&gt;&lt;img src="database-intro/one_to_one.png" alt="one_to_one.png" /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
And in our database:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sqlite"&gt;select mrn, name from patients;
&lt;/pre&gt;
&lt;/div&gt;

&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;


&lt;colgroup&gt;
&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;mrn&lt;/td&gt;
&lt;td class="org-left"&gt;name&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;U123456&lt;/td&gt;
&lt;td class="org-left"&gt;Roger Rabbit&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;U654321&lt;/td&gt;
&lt;td class="org-left"&gt;Jessica Krupnick&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3042c9b" class="outline-3"&gt;
&lt;h3 id="org3042c9b"&gt;one to many&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3042c9b"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;in the context of a database, is represented by a pair of tables, in which an element or row can be related to multiple rows in another table&lt;/li&gt;
&lt;/ul&gt;


&lt;div id="orgcd214bf" class="figure"&gt;
&lt;p&gt;&lt;img src="database-intro/one_to_many.png" alt="one_to_many.png" /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
In our database:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sqlite"&gt;select name, mrn, accession
from patients
join results using(mrn)
group by accession
order by mrn;
&lt;/pre&gt;
&lt;/div&gt;

&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;


&lt;colgroup&gt;
&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;name&lt;/td&gt;
&lt;td class="org-left"&gt;mrn&lt;/td&gt;
&lt;td class="org-left"&gt;accession&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Roger Rabbit&lt;/td&gt;
&lt;td class="org-left"&gt;U123456&lt;/td&gt;
&lt;td class="org-left"&gt;Acc1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Roger Rabbit&lt;/td&gt;
&lt;td class="org-left"&gt;U123456&lt;/td&gt;
&lt;td class="org-left"&gt;Acc2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Jessica Krupnick&lt;/td&gt;
&lt;td class="org-left"&gt;U654321&lt;/td&gt;
&lt;td class="org-left"&gt;Acc3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Jessica Krupnick&lt;/td&gt;
&lt;td class="org-left"&gt;U654321&lt;/td&gt;
&lt;td class="org-left"&gt;Acc4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbf88cde" class="outline-3"&gt;
&lt;h3 id="orgbf88cde"&gt;many to many&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgbf88cde"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;an entity in table A maps to more than one entity in table B, and vice-versa.&lt;/li&gt;
&lt;li&gt;a many-to-many relation between two tables is represented via a third &lt;b&gt;junction table&lt;/b&gt; or &lt;b&gt;cross-reference table&lt;/b&gt;.&lt;/li&gt;
&lt;li&gt;for example, each patient may see more than one physician, and each physician sees many patients.&lt;/li&gt;
&lt;/ul&gt;


&lt;div id="org5cca9c4" class="figure"&gt;
&lt;p&gt;&lt;img src="database-intro/many_to_many.png" alt="many_to_many.png" /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
In our relational database, this relation requires three tables, one for each of patients and physicians:
&lt;/p&gt;

&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;


&lt;colgroup&gt;
&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;doc_id&lt;/td&gt;
&lt;td class="org-left"&gt;doc_name&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;P01&lt;/td&gt;
&lt;td class="org-left"&gt;Dr. Spock&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;P02&lt;/td&gt;
&lt;td class="org-left"&gt;Dr. Horrible&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;P03&lt;/td&gt;
&lt;td class="org-left"&gt;Dr. Strangelove&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
And a junction table defining the many-to-many relationships:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sqlite" id="org4e8d4b2"&gt;select * from physician_patient;
&lt;/pre&gt;
&lt;/div&gt;

&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;


&lt;colgroup&gt;
&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;doc_id&lt;/td&gt;
&lt;td class="org-left"&gt;mrn&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;P01&lt;/td&gt;
&lt;td class="org-left"&gt;U123456&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;P01&lt;/td&gt;
&lt;td class="org-left"&gt;U654321&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;P02&lt;/td&gt;
&lt;td class="org-left"&gt;U654321&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;P03&lt;/td&gt;
&lt;td class="org-left"&gt;U123456&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Now we can view all physician-patient relationships using a three-way join
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sqlite"&gt;select *
from patients
join physician_patient using(mrn)
join physicians using(doc_id);
&lt;/pre&gt;
&lt;/div&gt;

&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;


&lt;colgroup&gt;
&lt;col class="org-right" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-right" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;pkey&lt;/td&gt;
&lt;td class="org-left"&gt;mrn&lt;/td&gt;
&lt;td class="org-left"&gt;name&lt;/td&gt;
&lt;td class="org-right"&gt;dob&lt;/td&gt;
&lt;td class="org-left"&gt;sex&lt;/td&gt;
&lt;td class="org-left"&gt;doc_id&lt;/td&gt;
&lt;td class="org-left"&gt;doc_name&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-left"&gt;U123456&lt;/td&gt;
&lt;td class="org-left"&gt;Roger Rabbit&lt;/td&gt;
&lt;td class="org-right"&gt;1939-04-01&lt;/td&gt;
&lt;td class="org-left"&gt;M&lt;/td&gt;
&lt;td class="org-left"&gt;P01&lt;/td&gt;
&lt;td class="org-left"&gt;Dr. Spock&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-left"&gt;U123456&lt;/td&gt;
&lt;td class="org-left"&gt;Roger Rabbit&lt;/td&gt;
&lt;td class="org-right"&gt;1939-04-01&lt;/td&gt;
&lt;td class="org-left"&gt;M&lt;/td&gt;
&lt;td class="org-left"&gt;P03&lt;/td&gt;
&lt;td class="org-left"&gt;Dr. Strangelove&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-left"&gt;U654321&lt;/td&gt;
&lt;td class="org-left"&gt;Jessica Krupnick&lt;/td&gt;
&lt;td class="org-right"&gt;1924-10-27&lt;/td&gt;
&lt;td class="org-left"&gt;F&lt;/td&gt;
&lt;td class="org-left"&gt;P01&lt;/td&gt;
&lt;td class="org-left"&gt;Dr. Spock&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-left"&gt;U654321&lt;/td&gt;
&lt;td class="org-left"&gt;Jessica Krupnick&lt;/td&gt;
&lt;td class="org-right"&gt;1924-10-27&lt;/td&gt;
&lt;td class="org-left"&gt;F&lt;/td&gt;
&lt;td class="org-left"&gt;P02&lt;/td&gt;
&lt;td class="org-left"&gt;Dr. Horrible&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0855c1f" class="outline-2"&gt;
&lt;h2 id="org0855c1f"&gt;Data types&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0855c1f"&gt;
&lt;p&gt;
Most databases and programming languages make a distinction between various &lt;b&gt;data types&lt;/b&gt; (integers, real numbers, text, binary data, etc). Why is this important?
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Operations may be defined for some data types but not others (eg, division makes sense for real numbers but not text).&lt;/li&gt;
&lt;li&gt;Different data types require different amounts of space for storage. For example, in MySQL, a column containing an integer representation of true/false (eg, a &lt;b&gt;boolean&lt;/b&gt;) requires only 1 byte per element, whereas the string "True" will typically occupy at least 4 bytes. This can become important when anticipating database requirements or managing large amounts of data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
In an SQL database, data types are defined along with the table schema:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sqlite"&gt;.schema results
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
CREATE TABLE IF NOT EXISTS "results"(
"mrn" TEXT, "accession" TEXT, "date" TEXT, "battery_code" TEXT,
 "test_code" TEXT, "value" TEXT, "flag" TEXT);
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org202ca42" class="outline-2"&gt;
&lt;h2 id="org202ca42"&gt;SQL&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org202ca42"&gt;
&lt;p&gt;
SQL (originally SEQUEL for &lt;i&gt;Structured English Query Language&lt;/i&gt;) is a programming language for managing relational databases. Although versions of SQL are defined in internationally-recognized standards, various dialects are used depending on the implementation. Many relational database programs are out there. Some examples of relational database products using SQL that you are likely to come across include:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt; (free/open source)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.sqlite.org/"&gt;SQLite&lt;/a&gt; (free/open source)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mysql.com/"&gt;MySQL&lt;/a&gt; (free/open source)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.microsoft.com/en-us/server-cloud/products/sql-server/default.aspx"&gt;SQL Server&lt;/a&gt; (Microsoft, one of its flagship products)&lt;/li&gt;
&lt;li&gt;Various &lt;a href="http://www.oracle.com"&gt;Oracle&lt;/a&gt; products (expensive and enterprise-y)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
SQL was designed to be accessible to non-technical users!
&lt;/p&gt;

&lt;p&gt;
Of these database engines, SQLite is probably the easiest to try out -
unlike the others, the database consists of a single, portable file
that can be accessed using either a command line interface or various
GUI's available for your favorite platform (SQLite is found &lt;a href="http://www.sqlite.org/mostdeployed.html"&gt;pretty
much everywhere&lt;/a&gt;). For example, &lt;a href="database-intro/results.db"&gt;here&lt;/a&gt; is the SQLite database used for
the examples in this post. If you're on a Mac, try this after
downloading to your Downloads folder:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;open Terminal.app (press CMD+SPACE and type Term&amp;#x2026;)&lt;/li&gt;
&lt;li&gt;type this:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~/Downloads
sqlite3 results.db
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
You should see something like this:
&lt;/p&gt;

&lt;pre class="example" id="org037f3e0"&gt;
SQLite version 3.7.13 2012-07-17 17:46:21
Enter ".help" for instructions
Enter SQL statements terminated with a ";"
sqlite&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
Go ahead and try out some of the examples above. You can also download
a GUI database browser (&lt;a href="http://en.wikipedia.org/wiki/SQLite"&gt;Wikipedia&lt;/a&gt; has a list) and try out your queries
there.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org445eabf" class="outline-2"&gt;
&lt;h2 id="org445eabf"&gt;Some examples of relational database operations using SQL&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org445eabf"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge3e2c52" class="outline-3"&gt;
&lt;h3 id="orge3e2c52"&gt;select&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge3e2c52"&gt;
&lt;p&gt;
This query returns the entire table named &lt;code&gt;results&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sqlite"&gt;select * from results;
&lt;/pre&gt;
&lt;/div&gt;

&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;


&lt;colgroup&gt;
&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-right" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-right" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;mrn&lt;/td&gt;
&lt;td class="org-left"&gt;accession&lt;/td&gt;
&lt;td class="org-right"&gt;date&lt;/td&gt;
&lt;td class="org-left"&gt;battery_code&lt;/td&gt;
&lt;td class="org-left"&gt;test_code&lt;/td&gt;
&lt;td class="org-right"&gt;value&lt;/td&gt;
&lt;td class="org-left"&gt;flag&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;U123456&lt;/td&gt;
&lt;td class="org-left"&gt;Acc1&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-02&lt;/td&gt;
&lt;td class="org-left"&gt;BMP&lt;/td&gt;
&lt;td class="org-left"&gt;GLU&lt;/td&gt;
&lt;td class="org-right"&gt;135.0&lt;/td&gt;
&lt;td class="org-left"&gt;H&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;U123456&lt;/td&gt;
&lt;td class="org-left"&gt;Acc1&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-02&lt;/td&gt;
&lt;td class="org-left"&gt;BMP&lt;/td&gt;
&lt;td class="org-left"&gt;K&lt;/td&gt;
&lt;td class="org-right"&gt;4.0&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;U123456&lt;/td&gt;
&lt;td class="org-left"&gt;Acc2&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-03&lt;/td&gt;
&lt;td class="org-left"&gt;CMP&lt;/td&gt;
&lt;td class="org-left"&gt;GLU&lt;/td&gt;
&lt;td class="org-right"&gt;90.0&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;U123456&lt;/td&gt;
&lt;td class="org-left"&gt;Acc2&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-03&lt;/td&gt;
&lt;td class="org-left"&gt;CMP&lt;/td&gt;
&lt;td class="org-left"&gt;K&lt;/td&gt;
&lt;td class="org-right"&gt;2.7&lt;/td&gt;
&lt;td class="org-left"&gt;L&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;U654321&lt;/td&gt;
&lt;td class="org-left"&gt;Acc3&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-02&lt;/td&gt;
&lt;td class="org-left"&gt;CMP&lt;/td&gt;
&lt;td class="org-left"&gt;GLU&lt;/td&gt;
&lt;td class="org-right"&gt;85.0&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;U654321&lt;/td&gt;
&lt;td class="org-left"&gt;Acc3&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-02&lt;/td&gt;
&lt;td class="org-left"&gt;CMP&lt;/td&gt;
&lt;td class="org-left"&gt;K&lt;/td&gt;
&lt;td class="org-right"&gt;4.1&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;U654321&lt;/td&gt;
&lt;td class="org-left"&gt;Acc4&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-03&lt;/td&gt;
&lt;td class="org-left"&gt;BMP&lt;/td&gt;
&lt;td class="org-left"&gt;GLU&lt;/td&gt;
&lt;td class="org-right"&gt;75.0&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;U654321&lt;/td&gt;
&lt;td class="org-left"&gt;Acc4&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-03&lt;/td&gt;
&lt;td class="org-left"&gt;BMP&lt;/td&gt;
&lt;td class="org-left"&gt;K&lt;/td&gt;
&lt;td class="org-right"&gt;4.2&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Use a &lt;code&gt;where&lt;/code&gt; clause to specify a subset of rows.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sqlite"&gt;select * from results where test_code = 'GLU' order by date;
&lt;/pre&gt;
&lt;/div&gt;

&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;


&lt;colgroup&gt;
&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-right" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-right" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;mrn&lt;/td&gt;
&lt;td class="org-left"&gt;accession&lt;/td&gt;
&lt;td class="org-right"&gt;date&lt;/td&gt;
&lt;td class="org-left"&gt;battery_code&lt;/td&gt;
&lt;td class="org-left"&gt;test_code&lt;/td&gt;
&lt;td class="org-right"&gt;value&lt;/td&gt;
&lt;td class="org-left"&gt;flag&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;U123456&lt;/td&gt;
&lt;td class="org-left"&gt;Acc1&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-02&lt;/td&gt;
&lt;td class="org-left"&gt;BMP&lt;/td&gt;
&lt;td class="org-left"&gt;GLU&lt;/td&gt;
&lt;td class="org-right"&gt;135.0&lt;/td&gt;
&lt;td class="org-left"&gt;H&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;U654321&lt;/td&gt;
&lt;td class="org-left"&gt;Acc3&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-02&lt;/td&gt;
&lt;td class="org-left"&gt;CMP&lt;/td&gt;
&lt;td class="org-left"&gt;GLU&lt;/td&gt;
&lt;td class="org-right"&gt;85.0&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;U123456&lt;/td&gt;
&lt;td class="org-left"&gt;Acc2&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-03&lt;/td&gt;
&lt;td class="org-left"&gt;CMP&lt;/td&gt;
&lt;td class="org-left"&gt;GLU&lt;/td&gt;
&lt;td class="org-right"&gt;90.0&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;U654321&lt;/td&gt;
&lt;td class="org-left"&gt;Acc4&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-03&lt;/td&gt;
&lt;td class="org-left"&gt;BMP&lt;/td&gt;
&lt;td class="org-left"&gt;GLU&lt;/td&gt;
&lt;td class="org-right"&gt;75.0&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
You can also specify a subset of columns.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sqlite"&gt;select mrn, date, value from results where test_code = 'GLU' order by date;
&lt;/pre&gt;
&lt;/div&gt;

&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;


&lt;colgroup&gt;
&lt;col class="org-left" /&gt;

&lt;col class="org-right" /&gt;

&lt;col class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;mrn&lt;/td&gt;
&lt;td class="org-right"&gt;date&lt;/td&gt;
&lt;td class="org-right"&gt;value&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;U123456&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-02&lt;/td&gt;
&lt;td class="org-right"&gt;135.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;U654321&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-02&lt;/td&gt;
&lt;td class="org-right"&gt;85.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;U123456&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-03&lt;/td&gt;
&lt;td class="org-right"&gt;90.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;U654321&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-03&lt;/td&gt;
&lt;td class="org-right"&gt;75.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2b1d012" class="outline-3"&gt;
&lt;h3 id="org2b1d012"&gt;join&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2b1d012"&gt;
&lt;p&gt;
Relations between tables are specified using a &lt;code&gt;join&lt;/code&gt; clause. Here's a two-way join between two tables, &lt;code&gt;patients&lt;/code&gt; and &lt;code&gt;results&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sqlite"&gt;select * from patients join results using(mrn);
&lt;/pre&gt;
&lt;/div&gt;

&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;


&lt;colgroup&gt;
&lt;col class="org-right" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-right" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-right" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-right" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;pkey&lt;/td&gt;
&lt;td class="org-left"&gt;mrn&lt;/td&gt;
&lt;td class="org-left"&gt;name&lt;/td&gt;
&lt;td class="org-right"&gt;dob&lt;/td&gt;
&lt;td class="org-left"&gt;sex&lt;/td&gt;
&lt;td class="org-left"&gt;accession&lt;/td&gt;
&lt;td class="org-right"&gt;date&lt;/td&gt;
&lt;td class="org-left"&gt;battery_code&lt;/td&gt;
&lt;td class="org-left"&gt;test_code&lt;/td&gt;
&lt;td class="org-right"&gt;value&lt;/td&gt;
&lt;td class="org-left"&gt;flag&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-left"&gt;U123456&lt;/td&gt;
&lt;td class="org-left"&gt;Roger Rabbit&lt;/td&gt;
&lt;td class="org-right"&gt;1939-04-01&lt;/td&gt;
&lt;td class="org-left"&gt;M&lt;/td&gt;
&lt;td class="org-left"&gt;Acc1&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-02&lt;/td&gt;
&lt;td class="org-left"&gt;BMP&lt;/td&gt;
&lt;td class="org-left"&gt;GLU&lt;/td&gt;
&lt;td class="org-right"&gt;135.0&lt;/td&gt;
&lt;td class="org-left"&gt;H&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-left"&gt;U123456&lt;/td&gt;
&lt;td class="org-left"&gt;Roger Rabbit&lt;/td&gt;
&lt;td class="org-right"&gt;1939-04-01&lt;/td&gt;
&lt;td class="org-left"&gt;M&lt;/td&gt;
&lt;td class="org-left"&gt;Acc1&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-02&lt;/td&gt;
&lt;td class="org-left"&gt;BMP&lt;/td&gt;
&lt;td class="org-left"&gt;K&lt;/td&gt;
&lt;td class="org-right"&gt;4.0&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-left"&gt;U123456&lt;/td&gt;
&lt;td class="org-left"&gt;Roger Rabbit&lt;/td&gt;
&lt;td class="org-right"&gt;1939-04-01&lt;/td&gt;
&lt;td class="org-left"&gt;M&lt;/td&gt;
&lt;td class="org-left"&gt;Acc2&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-03&lt;/td&gt;
&lt;td class="org-left"&gt;CMP&lt;/td&gt;
&lt;td class="org-left"&gt;GLU&lt;/td&gt;
&lt;td class="org-right"&gt;90.0&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-left"&gt;U123456&lt;/td&gt;
&lt;td class="org-left"&gt;Roger Rabbit&lt;/td&gt;
&lt;td class="org-right"&gt;1939-04-01&lt;/td&gt;
&lt;td class="org-left"&gt;M&lt;/td&gt;
&lt;td class="org-left"&gt;Acc2&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-03&lt;/td&gt;
&lt;td class="org-left"&gt;CMP&lt;/td&gt;
&lt;td class="org-left"&gt;K&lt;/td&gt;
&lt;td class="org-right"&gt;2.7&lt;/td&gt;
&lt;td class="org-left"&gt;L&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-left"&gt;U654321&lt;/td&gt;
&lt;td class="org-left"&gt;Jessica Krupnick&lt;/td&gt;
&lt;td class="org-right"&gt;1924-10-27&lt;/td&gt;
&lt;td class="org-left"&gt;F&lt;/td&gt;
&lt;td class="org-left"&gt;Acc3&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-02&lt;/td&gt;
&lt;td class="org-left"&gt;CMP&lt;/td&gt;
&lt;td class="org-left"&gt;GLU&lt;/td&gt;
&lt;td class="org-right"&gt;85.0&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-left"&gt;U654321&lt;/td&gt;
&lt;td class="org-left"&gt;Jessica Krupnick&lt;/td&gt;
&lt;td class="org-right"&gt;1924-10-27&lt;/td&gt;
&lt;td class="org-left"&gt;F&lt;/td&gt;
&lt;td class="org-left"&gt;Acc3&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-02&lt;/td&gt;
&lt;td class="org-left"&gt;CMP&lt;/td&gt;
&lt;td class="org-left"&gt;K&lt;/td&gt;
&lt;td class="org-right"&gt;4.1&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-left"&gt;U654321&lt;/td&gt;
&lt;td class="org-left"&gt;Jessica Krupnick&lt;/td&gt;
&lt;td class="org-right"&gt;1924-10-27&lt;/td&gt;
&lt;td class="org-left"&gt;F&lt;/td&gt;
&lt;td class="org-left"&gt;Acc4&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-03&lt;/td&gt;
&lt;td class="org-left"&gt;BMP&lt;/td&gt;
&lt;td class="org-left"&gt;GLU&lt;/td&gt;
&lt;td class="org-right"&gt;75.0&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-left"&gt;U654321&lt;/td&gt;
&lt;td class="org-left"&gt;Jessica Krupnick&lt;/td&gt;
&lt;td class="org-right"&gt;1924-10-27&lt;/td&gt;
&lt;td class="org-left"&gt;F&lt;/td&gt;
&lt;td class="org-left"&gt;Acc4&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-03&lt;/td&gt;
&lt;td class="org-left"&gt;BMP&lt;/td&gt;
&lt;td class="org-left"&gt;K&lt;/td&gt;
&lt;td class="org-right"&gt;4.2&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre class="example"&gt;
select patients.name, results.date, tests.test_name, results.value, results.flag
from results
join tests using(test_code)
join patients using(mrn)
where test_code = 'K';
&lt;/pre&gt;

&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;


&lt;colgroup&gt;
&lt;col class="org-left" /&gt;

&lt;col class="org-right" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-right" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;name&lt;/td&gt;
&lt;td class="org-right"&gt;date&lt;/td&gt;
&lt;td class="org-left"&gt;test_name&lt;/td&gt;
&lt;td class="org-right"&gt;value&lt;/td&gt;
&lt;td class="org-left"&gt;flag&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Roger Rabbit&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-02&lt;/td&gt;
&lt;td class="org-left"&gt;Potassium&lt;/td&gt;
&lt;td class="org-right"&gt;4.0&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Roger Rabbit&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-03&lt;/td&gt;
&lt;td class="org-left"&gt;Potassium&lt;/td&gt;
&lt;td class="org-right"&gt;2.7&lt;/td&gt;
&lt;td class="org-left"&gt;L&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Jessica Krupnick&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-02&lt;/td&gt;
&lt;td class="org-left"&gt;Potassium&lt;/td&gt;
&lt;td class="org-right"&gt;4.1&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Jessica Krupnick&lt;/td&gt;
&lt;td class="org-right"&gt;2014-06-03&lt;/td&gt;
&lt;td class="org-left"&gt;Potassium&lt;/td&gt;
&lt;td class="org-right"&gt;4.2&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgae99700" class="outline-3"&gt;
&lt;h3 id="orgae99700"&gt;group and aggregate&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgae99700"&gt;
&lt;pre class="example"&gt;
select name, test_code, min(value)
from patients join results using(mrn)
group by mrn, test_code;
&lt;/pre&gt;

&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;


&lt;colgroup&gt;
&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;name&lt;/td&gt;
&lt;td class="org-left"&gt;test_code&lt;/td&gt;
&lt;td class="org-right"&gt;min(value)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Roger Rabbit&lt;/td&gt;
&lt;td class="org-left"&gt;GLU&lt;/td&gt;
&lt;td class="org-right"&gt;135.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Roger Rabbit&lt;/td&gt;
&lt;td class="org-left"&gt;K&lt;/td&gt;
&lt;td class="org-right"&gt;2.7&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Jessica Krupnick&lt;/td&gt;
&lt;td class="org-left"&gt;GLU&lt;/td&gt;
&lt;td class="org-right"&gt;75.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Jessica Krupnick&lt;/td&gt;
&lt;td class="org-left"&gt;K&lt;/td&gt;
&lt;td class="org-right"&gt;4.1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1a821ac" class="outline-2"&gt;
&lt;h2 id="org1a821ac"&gt;Hierarchical databases&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1a821ac"&gt;
&lt;p&gt;
Hierarchical databases organize data in a tree-like structure. Data is represented as a graph of one-to-many (parent -&amp;gt; child) relations.
&lt;/p&gt;


&lt;div id="org27f4410" class="figure"&gt;
&lt;p&gt;&lt;img src="database-intro/hierarchical.png" alt="hierarchical.png" /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;hierarchical databases are arguably &lt;a href="http://healthcaresecurity.wordpress.com/2010/10/12/why-are-hierarchical-databases-like-mumps-still-popular-in-healthcare/"&gt;extremely well-suited for modeling healthcare data&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;can be used to efficiently represent data that would otherwise require many tables in a well-normalized relational database.&lt;/li&gt;
&lt;li&gt;depending on the structure of the hierarchy, certain queries can be extremely efficient: eg, all orders for Patient 1 can be found by traversing only the subtree containing data for that patient, which might represent only a tiny fraction of the entire database.&lt;/li&gt;
&lt;li&gt;other sorts of queries can be extremely inefficient: eg, finding all results of a certain type might require traversal of the entire tree!&lt;/li&gt;
&lt;li&gt;guess what: major healthcare applications such as the VA system (VistA), Sunquest FlexiLab, and many Epic products use a hierarchical database implemented using the &lt;a href="http://en.wikipedia.org/wiki/MUMPS"&gt;MUMPS&lt;/a&gt; language.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd642258" class="outline-2"&gt;
&lt;h2 id="orgd642258"&gt;Data management patterns and antipatterns&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd642258"&gt;
&lt;p&gt;
A basic understanding of database applications, relations, and data
types can help guide good practices for managing data. It makes
perfect sense to organize and collect (limited amounts of) data in a
spreadsheet, but it helps a lot to anticipate that you may want to
transfer that data into a database or use software for statistical
analysis or producing graphical output (such as R). This is a lot
easier if you keep a few rules in mind. Here are some tips. Note that
&lt;a href="http://vita.had.co.nz/papers/tidy-data.pdf"&gt;Tidy Data&lt;/a&gt; by Hadley Wickham provides an excellent discussion of the
ways in which data can be "tidy" or "messy."
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga627cb3" class="outline-3"&gt;
&lt;h3 id="orga627cb3"&gt;name fields sensibly&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga627cb3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;When naming column headers, stick to lowercase letters and
underscores only (numbers are ok after the first character).&lt;/li&gt;
&lt;/ul&gt;

&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;


&lt;colgroup&gt;
&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;bad&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;good&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;Patient #&lt;/td&gt;
&lt;td class="org-left"&gt;patient_id&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;infection?&lt;/td&gt;
&lt;td class="org-left"&gt;is_infected&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;If you have multiple tables, be careful to name fields consistently
(don't use "DOB" in one place and "birth_date" in another).&lt;/li&gt;
&lt;li&gt;If possible, don't use &lt;a href="http://en.wikipedia.org/wiki/Category:SQL_keywords"&gt;SQL keywords&lt;/a&gt; for column names.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbb3304d" class="outline-3"&gt;
&lt;h3 id="orgbb3304d"&gt;don't mix data types&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgbb3304d"&gt;
&lt;p&gt;
Values in a column are expected to be the same data type. Some
databases will produce an error if you try to mix data types (eq,
putting a string in a column identified as an integer type). Others
may attempt to &lt;b&gt;coerce&lt;/b&gt; data to the same type, producing unexpected
results. Even without an error, mixing data types greatly complicates
writing queries. For example, how can we find values greater than 10
in this table?
&lt;/p&gt;

&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;


&lt;colgroup&gt;
&lt;col class="org-right" /&gt;

&lt;col class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;run_id&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;cancelled&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;td class="org-right"&gt;11&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;lt; 2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;5&lt;/td&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
In this case, it's better to create another column to contain the
non-numeric values.
&lt;/p&gt;

&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;


&lt;colgroup&gt;
&lt;col class="org-right" /&gt;

&lt;col class="org-right" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;run_id&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;value&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;comment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;5&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;cancelled&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;td class="org-right"&gt;11&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;lt; 2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;5&lt;/td&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9fe7967" class="outline-3"&gt;
&lt;h3 id="org9fe7967"&gt;tall, not wide&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org9fe7967"&gt;
&lt;p&gt;
Excel and EMR applications have made us accustomed to viewing data as
a square matrix.
&lt;/p&gt;

&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;


&lt;colgroup&gt;
&lt;col class="org-left" /&gt;

&lt;col class="org-right" /&gt;

&lt;col class="org-right" /&gt;

&lt;col class="org-right" /&gt;

&lt;col class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;test_name&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;2014-01-01&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;2014-01-02&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;2014-01-03&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;2014-01-04&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;Sodium&lt;/td&gt;
&lt;td class="org-right"&gt;135.0&lt;/td&gt;
&lt;td class="org-right"&gt;137.0&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-right"&gt;150.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Potassium&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-right"&gt;3.5&lt;/td&gt;
&lt;td class="org-right"&gt;4.0&lt;/td&gt;
&lt;td class="org-right"&gt;3.7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
This is great for some purposes: it allows us to easily compare the
values of these two tests for this one patient over time. Or perhaps
the square is transposed:
&lt;/p&gt;

&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;


&lt;colgroup&gt;
&lt;col class="org-right" /&gt;

&lt;col class="org-right" /&gt;

&lt;col class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;date&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Sodium&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Potassium&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;2014-01-01&lt;/td&gt;
&lt;td class="org-right"&gt;135.0&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2014-01-02&lt;/td&gt;
&lt;td class="org-right"&gt;137.0&lt;/td&gt;
&lt;td class="org-right"&gt;3.5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2014-01-03&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-right"&gt;4.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2014-01-04&lt;/td&gt;
&lt;td class="org-right"&gt;150.0&lt;/td&gt;
&lt;td class="org-right"&gt;3.7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
However, both of these are lousy formats for storing or manipulating
data:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;they are likely to be &lt;b&gt;sparse&lt;/b&gt;, where many cells are missing data,
and requiring as many columns as there are dates (first table) or
tests (second table) in the entire data set.&lt;/li&gt;
&lt;li&gt;adding data for an addition test or patient is cumbersome.&lt;/li&gt;
&lt;li&gt;it is not possible to associate additional attributes with each value.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Here's an improved representation of the above data:
&lt;/p&gt;

&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;


&lt;colgroup&gt;
&lt;col class="org-left" /&gt;

&lt;col class="org-right" /&gt;

&lt;col class="org-right" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;test_name&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;date&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;value&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;method&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;comment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;Sodium&lt;/td&gt;
&lt;td class="org-right"&gt;2014-01-01&lt;/td&gt;
&lt;td class="org-right"&gt;135.0&lt;/td&gt;
&lt;td class="org-left"&gt;serum&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Sodium&lt;/td&gt;
&lt;td class="org-right"&gt;2014-01-02&lt;/td&gt;
&lt;td class="org-right"&gt;137.0&lt;/td&gt;
&lt;td class="org-left"&gt;ABG&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Sodium&lt;/td&gt;
&lt;td class="org-right"&gt;2014-01-04&lt;/td&gt;
&lt;td class="org-right"&gt;150.0&lt;/td&gt;
&lt;td class="org-left"&gt;serum&lt;/td&gt;
&lt;td class="org-left"&gt;confirmed in duplicate&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Potassium&lt;/td&gt;
&lt;td class="org-right"&gt;2014-01-02&lt;/td&gt;
&lt;td class="org-right"&gt;3.5&lt;/td&gt;
&lt;td class="org-left"&gt;ABG&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Potassium&lt;/td&gt;
&lt;td class="org-right"&gt;2014-01-03&lt;/td&gt;
&lt;td class="org-right"&gt;4.0&lt;/td&gt;
&lt;td class="org-left"&gt;serum&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Potassium&lt;/td&gt;
&lt;td class="org-right"&gt;2014-01-04&lt;/td&gt;
&lt;td class="org-right"&gt;3.7&lt;/td&gt;
&lt;td class="org-left"&gt;serum&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
This table has a fixed number of columns. Adding new data is as simple
as tacking rows onto the bottom. We can annotate values with arbitrary
attributes, such as methods or comments. It's even easy to aggregate
data from multiple patients by adding another column.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbe717df" class="outline-3"&gt;
&lt;h3 id="orgbe717df"&gt;be consistent&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgbe717df"&gt;
&lt;p&gt;
Composing queries will be easier if you are consistent in your representations of the data. I've frequently come across data like this:
&lt;/p&gt;

&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;


&lt;colgroup&gt;
&lt;col class="org-right" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;subject&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;antibiotics&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;growth&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;antibiotic&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-left"&gt;Y&lt;/td&gt;
&lt;td class="org-left"&gt;+&lt;/td&gt;
&lt;td class="org-left"&gt;azith.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-left"&gt;N&lt;/td&gt;
&lt;td class="org-left"&gt;-&lt;/td&gt;
&lt;td class="org-left"&gt;azithromycin&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;td class="org-left"&gt;yes&lt;/td&gt;
&lt;td class="org-left"&gt;+&lt;/td&gt;
&lt;td class="org-left"&gt;penicillin&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;td class="org-left"&gt;n&lt;/td&gt;
&lt;td class="org-left"&gt;+&lt;/td&gt;
&lt;td class="org-left"&gt;Penicillin&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;within a column, pick a value and stick with it - it's awfully hard to write a query that accommodates multiple variants of the same term or concept.&lt;/li&gt;
&lt;li&gt;be consistent from column to column, as well. In the example above, we see both yes/no and +/- used as boolean values. How about this instead:&lt;/li&gt;
&lt;/ul&gt;

&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;


&lt;colgroup&gt;
&lt;col class="org-right" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;subject&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;antibiotics&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;growth&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;antibiotic&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-left"&gt;yes&lt;/td&gt;
&lt;td class="org-left"&gt;yes&lt;/td&gt;
&lt;td class="org-left"&gt;azithromycin&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-left"&gt;no&lt;/td&gt;
&lt;td class="org-left"&gt;no&lt;/td&gt;
&lt;td class="org-left"&gt;azithromycin&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;td class="org-left"&gt;yes&lt;/td&gt;
&lt;td class="org-left"&gt;yes&lt;/td&gt;
&lt;td class="org-left"&gt;penicillin&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;td class="org-left"&gt;no&lt;/td&gt;
&lt;td class="org-left"&gt;yes&lt;/td&gt;
&lt;td class="org-left"&gt;penicillin&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb6d944c" class="outline-3"&gt;
&lt;h3 id="orgb6d944c"&gt;use multiple tables (normalize the data)&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb6d944c"&gt;
&lt;p&gt;
Here's where understanding relations is useful. When I ask for data
from the laboratory system, I typically get results back that look
something like this:
&lt;/p&gt;

&lt;pre class="example"&gt;
select results.*, b.battery_name, t.test_name, t.ref_range from results
join tests t using(test_code)
join batteries b using(battery_code);
&lt;/pre&gt;

&lt;p&gt;
(The data isn't actually stored like this in the database, but when
the request for data includes all of the above fields, it winds up
denormalized in the process of fitting it into a single output table).
&lt;/p&gt;

&lt;p&gt;
In this table, test_code uniquely identifies test_name and ref_range,
and battery_code uniquely identifies battery_name, so there's no need
to include the last three columns in our table of results (imagine
having millions of rows like this) - we can store these test and
battery attributes in separate tables and perform joins as necessary.
&lt;/p&gt;

&lt;p&gt;
It's worth having a look at the classic short article &lt;a href="http://www.bkent.net/Doc/simple5.htm"&gt;A Simple Guide
to Five Normal Forms in Relational Database Theory&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc1cb91c" class="outline-3"&gt;
&lt;h3 id="orgc1cb91c"&gt;Use a standard format for dates and times&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc1cb91c"&gt;

&lt;div id="org29a7823" class="figure"&gt;
&lt;p&gt;&lt;img src="database-intro/iso_8601.png" alt="iso_8601.png" /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 2: &lt;/span&gt;Obligatory xkcd (&lt;a href="https://xkcd.com/1179/"&gt;https://xkcd.com/1179/&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
American humans might write today's date as 7/23/15, or perhaps
07/23/2015 or July 23, 2015; European humans might write it as 23 July
2015 or 23/7/15.
&lt;/p&gt;

&lt;p&gt;
None of these formats are&amp;#x2026; (trying to be polite here) exactly
optimal. For one thing, neither format results in alphanumeric sorting
in chronological order. But much worse, it's hard to guess exactly
what format the date is actually in, so parsing is a chore.
&lt;/p&gt;

&lt;p&gt;
It turns out that there's a standard for representing dates and times
that addresses these issues, and also allows the representation of
time zone (which we won't get into right now): this standard is called
&lt;a href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO 8601&lt;/a&gt;. Using this standard, today would be written
2015-07-23. Please be nice and write dates like this. Follow the link
to read more (you will learn that right now the ISO 8601 timestamp is
something like 2015-07-23T16:55:02+17:00).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="lectures"></category><category term="laboratory"></category></entry><entry><title>sqlite dict factory</title><link href="https://nhoffman.github.io/borborygmi/dict-factory.html" rel="alternate"></link><published>2014-06-10T00:00:00-07:00</published><updated>2014-06-10T00:00:00-07:00</updated><author><name>unknown</name></author><id>tag:nhoffman.github.io,2014-06-10:/borborygmi/dict-factory.html</id><summary type="html">&lt;p&gt;
Probably not as efficient as using the sqlite3.Row class, but works
when actual dict objects are required. Adapted from
&lt;a href="https://docs.python.org/2/library/sqlite3.html"&gt;https://docs.python.org/2/library/sqlite3.html&lt;/a&gt;.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;import sqlite3

def dict_factory(cursor, row):
    return {col[0]: row[idx] for idx, col in enumerate(cursor.description)}

con = sqlite3.connect(":memory …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;
Probably not as efficient as using the sqlite3.Row class, but works
when actual dict objects are required. Adapted from
&lt;a href="https://docs.python.org/2/library/sqlite3.html"&gt;https://docs.python.org/2/library/sqlite3.html&lt;/a&gt;.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;import sqlite3

def dict_factory(cursor, row):
    return {col[0]: row[idx] for idx, col in enumerate(cursor.description)}

con = sqlite3.connect(":memory:")
con.row_factory = dict_factory
cur = con.cursor()
cur.execute("select 1 as a")
print cur.fetchone()
&lt;/pre&gt;
&lt;/div&gt;
</content><category term="notes"></category><category term="python"></category><category term="sqlite"></category></entry><entry><title>Creating a site with Pelican and org-mode</title><link href="https://nhoffman.github.io/borborygmi/getting-started.html" rel="alternate"></link><published>2014-05-26T00:00:00-07:00</published><updated>2014-05-26T00:00:00-07:00</updated><author><name>unknown</name></author><id>tag:nhoffman.github.io,2014-05-26:/borborygmi/getting-started.html</id><summary type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org3146357"&gt;org-mode integration&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org0d57eac"&gt;Arranging content in subdirectories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org709558a"&gt;Syntax highlighting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org5524a88"&gt;Choosing a theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org113a139"&gt;Hosting on github pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org22e399a"&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Never one to pass up the opportunity for yak-shaving, I thought I'd
finally try to settle on a publishing platform for various notes and
other content that I have scattered about …&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org3146357"&gt;org-mode integration&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org0d57eac"&gt;Arranging content in subdirectories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org709558a"&gt;Syntax highlighting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org5524a88"&gt;Choosing a theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org113a139"&gt;Hosting on github pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org22e399a"&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Never one to pass up the opportunity for yak-shaving, I thought I'd
finally try to settle on a publishing platform for various notes and
other content that I have scattered about on the web. The repository
is &lt;a href="https://github.com/nhoffman/borborygmi"&gt;on GitHub.&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
I much prefer to generate content in org-mode, but I couldn't manage
to get org-publish to organize content in the way I wanted, or to be
easily compiled in batch mode. When I learned that the &lt;a href="http://docs.getpelican.com/en/latest/index.html"&gt;Pelican&lt;/a&gt; static
site generator could import html and saw &lt;a href="http://msnyder.info/posts/2013/12/introducing-pelicorg/"&gt;another effort&lt;/a&gt; to use the two
together, I thought I'd give it a shot.
&lt;/p&gt;

&lt;div id="outline-container-org3146357" class="outline-2"&gt;
&lt;h2 id="org3146357"&gt;org-mode integration&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3146357"&gt;
&lt;p&gt;
At a basic level, integration with org-mode is pretty simple: Pelican
can import html content with page metadata provided in the
header. Since I already have some tools for exporting org-mode from
the command line (the project is named &lt;a href="https://github.com/nhoffman/org-export"&gt;org-export&lt;/a&gt;), it was pretty easy
to write a utility for this purpose.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;org-export pelican -h
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
Command line options:

 --infile     path to input .org file
 --outfile    path to output .html file (use base name of infile by
              default)
 --add-langs  comma-delimited list of additional languages to enable
              in code blocks

&lt;/pre&gt;


&lt;p&gt;
The utility renders the just body of the page (leaving all of the
styling, etc to Pelican) and provides page metadata in the header, for
example:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;head ../content/getting-started.html
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example" id="orga96d768"&gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;Creating a site with Pelican and org-mode&amp;lt;/title&amp;gt;
        &amp;lt;meta name="authors" content="Noah Hoffman"&amp;gt;
        &amp;lt;meta name="date" content="2014-05-26"&amp;gt;
        &amp;lt;meta name="category" content="org-mode"&amp;gt;
        &amp;lt;meta name="tags" content="org-mode, pelican, elisp"&amp;gt;
        &amp;lt;meta name="save_as" content="getting-started.html"&amp;gt;
        &amp;lt;meta name="url" content="getting-started.html"&amp;gt;
    &amp;lt;/head&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
Specifying "save_as" and "url" was more convenient than trying to
guess how Pelican would name the page.
&lt;/p&gt;

&lt;p&gt;
The org-mode source for each post is compiled to html and placed in
pelican's &lt;code&gt;content&lt;/code&gt; directory, where it is subsequently added to the
site using &lt;code&gt;pelican content&lt;/code&gt;. I liked that compiling each org-mode
file to html is performed separately from rendering the content with
Pelican: the former step is relatively slow, and a build tool can
easily be used to render only pages that have changed (I use &lt;a href="http://www.scons.org/"&gt;scons&lt;/a&gt;).
&lt;/p&gt;

&lt;p&gt;
There were a couple of tricky bits, though.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0d57eac" class="outline-3"&gt;
&lt;h3 id="org0d57eac"&gt;Arranging content in subdirectories&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0d57eac"&gt;
&lt;p&gt;
First, I wanted to be able to create subdirectories containing data or
images for specific posts (as opposed to lumping them all together in
a single directory). Pelican doesn't seem to support this. So the
SConstruct file manages the creation of subdirectories in Pelican's
output directory and also copes page data and images there.
&lt;/p&gt;

&lt;p&gt;
Then, when writing posts, you just need to remain aware of the
location of the data directory for a post relative to the org-mode
source; this relationship is preserved in the final output. Note that
the output of plotting operations should also be saved to the post's
subdirectory (eg, &lt;code&gt;plot1.png&lt;/code&gt;).
&lt;/p&gt;

&lt;p&gt;
Let's look at the organization of content and intermediate files for
this post. Here's the working directory when the org-mode source is
evaluated:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;pwd
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
/__w/borborygmi/borborygmi/org-content
&lt;/pre&gt;


&lt;p&gt;
The org-mode source is here:
&lt;/p&gt;

&lt;pre class="example"&gt;
../org-content/getting-started.org
../org-content/getting-started:
Perameles_gunni.jpg
&lt;/pre&gt;


&lt;p&gt;
Here is the intermediate html body for the post (note that these paths
are relative to the org-mode source):
&lt;/p&gt;

&lt;pre class="example"&gt;
../content/getting-started.html
&lt;/pre&gt;


&lt;p&gt;
And the final output:
&lt;/p&gt;

&lt;p&gt;
An additional complication is that the files for the index and
individual posts are at the top level of the output directory, but
other pages (in categories, tags, etc) are in subdirectories. Rather
than muck around with modifying linking behavior in Pelican, I just
fixed things up in the latter files with lxml in the script
&lt;code&gt;fix_urls.py&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org709558a" class="outline-3"&gt;
&lt;h3 id="org709558a"&gt;Syntax highlighting&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org709558a"&gt;
&lt;p&gt;
A lot of trial and error was required to export code blocks with
colorized syntax highlighting, and I still can't say I fully
understand why the final configuration seems to work when others I
tried didn't. But here are a few of the bits of magic that were required.
&lt;/p&gt;

&lt;p&gt;
Requiring the &lt;code&gt;htmlize&lt;/code&gt; package alone seems to be sufficient to
produce colorized syntax highlighting when exporting interactively
from within emacs. But an identical configuration did not result in
colorized output when exporting in batch mode using &lt;code&gt;org-export
pelican&lt;/code&gt;. I finally came across advice someplace to use the
&lt;code&gt;color-theme&lt;/code&gt; package along with some custom themes. Turns out that
after installing &lt;code&gt;color-theme&lt;/code&gt; along with &lt;code&gt;color-theme-github&lt;/code&gt;, simply
adding
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(require 'color-theme-github)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
was enough to produce colorized output. Go figure.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5524a88" class="outline-2"&gt;
&lt;h2 id="org5524a88"&gt;Choosing a theme&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5524a88"&gt;
&lt;p&gt;
There are plenty of choices over at &lt;a href="https://github.com/getpelican/pelican-themes"&gt;the pelican-themes repository&lt;/a&gt;, and
there were a number that seemed to work well (for the time being)
without any modification at all.
&lt;/p&gt;

&lt;p&gt;
For convenience, I just added the themes repository as a git submodule.
&lt;/p&gt;

&lt;p&gt;
Here are some I liked at first glance:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;bootstrap&lt;/li&gt;
&lt;li&gt;bootlex&lt;/li&gt;
&lt;li&gt;dev-random2 (though I'd have to do some translation)&lt;/li&gt;
&lt;li&gt;tuxlite_tbs&lt;/li&gt;
&lt;li&gt;tuxlite_zf (although I prefer more contrast between text and code)&lt;/li&gt;
&lt;li&gt;zurb-F5-basic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I finally settled on tuxlite_tbs (thanks, &lt;a href="https://github.com/chanux"&gt;chanux&lt;/a&gt;), and made a local version, which I've modified minimally thus far.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org113a139" class="outline-2"&gt;
&lt;h2 id="org113a139"&gt;Hosting on github pages&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org113a139"&gt;
&lt;p&gt;
Thanks to the magical &lt;a href="https://github.com/davisp/ghp-import"&gt;ghp-import&lt;/a&gt;, hosting on GitHub pages is as easy as
&lt;/p&gt;

&lt;pre class="example"&gt;
ghp-import -p output
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org22e399a" class="outline-2"&gt;
&lt;h2 id="org22e399a"&gt;Examples&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org22e399a"&gt;
&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;
&lt;caption class="t-above"&gt;&lt;span class="table-number"&gt;Table 1:&lt;/span&gt; An org-mode table&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;

&lt;col class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;here's&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;a&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;table&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;with&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;values&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;in&lt;/td&gt;
&lt;td class="org-left"&gt;some&lt;/td&gt;
&lt;td class="org-left"&gt;cells&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;div id="org74b61c0" class="figure"&gt;
&lt;p&gt;&lt;img src="getting-started/Perameles_gunni.jpg" alt="Perameles_gunni.jpg" /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 1: &lt;/span&gt;Hey, a &lt;a href="http://en.wikipedia.org/wiki/File:Perameles_gunni.jpg"&gt;bandicoot&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;span class="listing-number"&gt;Listing 1: &lt;/span&gt;Example of an R plot, output file specified in the code block.&lt;/label&gt;&lt;pre class="src src-R"&gt;png('getting-started/plot1.png')
plot(qnorm)
invisible(dev.off())
&lt;/pre&gt;
&lt;/div&gt;


&lt;div id="org6ed3003" class="figure"&gt;
&lt;p&gt;&lt;img src="getting-started/plot1.png" alt="plot1.png" /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;span class="listing-number"&gt;Listing 2: &lt;/span&gt;Example of an R plot, output file specified in the header.&lt;/label&gt;&lt;pre class="src src-R"&gt;plot(1:10)
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;span class="listing-number"&gt;Listing 3: &lt;/span&gt;A python code block with output&lt;/label&gt;&lt;pre class="src src-python"&gt;for i in range(3):
    print 'hello' + '!' * i
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;span class="listing-number"&gt;Listing 4: &lt;/span&gt;An sqlite3 code block producing an html-formatted table&lt;/label&gt;&lt;pre class="src src-sqlite"&gt;.header on
create table foo (bar, baz);
insert into foo values('a', 1);
insert into foo values('b', 2);
select * from foo;
&lt;/pre&gt;
&lt;/div&gt;

&lt;table class="table table-striped table-bordered table-condensed" style="width: auto;"&gt;


&lt;colgroup&gt;
&lt;col class="org-left" /&gt;

&lt;col class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;bar&lt;/td&gt;
&lt;td class="org-right"&gt;baz&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;a&lt;/td&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;b&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="org-mode"></category><category term="org-mode"></category></entry><entry><title>Setting up a new mac</title><link href="https://nhoffman.github.io/borborygmi/mac-setup.html" rel="alternate"></link><published>2013-10-20T00:00:00-07:00</published><updated>2013-10-20T00:00:00-07:00</updated><author><name>unknown</name></author><id>tag:nhoffman.github.io,2013-10-20:/borborygmi/mac-setup.html</id><summary type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orga50df1d"&gt;First applications&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org023ab57"&gt;Developer tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orge4456c3"&gt;X11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgbce20b2"&gt;Others&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org11deff8"&gt;system-level configuration&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org5b4e7ab"&gt;turn off spelling autocorrect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org4e87355"&gt;fix scroll direction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org33ed61e"&gt;turn off spaces key shortcuts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org7939030"&gt;ssh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgb434f2d"&gt;homebrew&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org1acb414"&gt;stuff installed using homebrew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org0dc0eb0"&gt;zsh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgb1760e9"&gt;git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgaa28ae5"&gt;iTerm2 settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgef14e8d"&gt;emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgd10330d"&gt;python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org5d10f4b"&gt;R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org3df102f"&gt;mail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org31e6d30"&gt;sshfs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org9b08260"&gt;wkhtmltopdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
These are my notes that I took while setting up a …&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orga50df1d"&gt;First applications&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org023ab57"&gt;Developer tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orge4456c3"&gt;X11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgbce20b2"&gt;Others&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org11deff8"&gt;system-level configuration&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org5b4e7ab"&gt;turn off spelling autocorrect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org4e87355"&gt;fix scroll direction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org33ed61e"&gt;turn off spaces key shortcuts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org7939030"&gt;ssh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgb434f2d"&gt;homebrew&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org1acb414"&gt;stuff installed using homebrew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org0dc0eb0"&gt;zsh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgb1760e9"&gt;git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgaa28ae5"&gt;iTerm2 settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgef14e8d"&gt;emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgd10330d"&gt;python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org5d10f4b"&gt;R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org3df102f"&gt;mail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org31e6d30"&gt;sshfs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org9b08260"&gt;wkhtmltopdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
These are my notes that I took while setting up a macbook Air near the
end of 2013, with incremental updates when I remember to add
them.
&lt;/p&gt;

&lt;dl class="org-dl"&gt;
&lt;dt&gt;Oct 2014&lt;/dt&gt;&lt;dd&gt;increment versions of various applications, update for Yoesmite&lt;/dd&gt;
&lt;/dl&gt;

&lt;div id="outline-container-orga50df1d" class="outline-2"&gt;
&lt;h2 id="orga50df1d"&gt;First applications&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga50df1d"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org023ab57" class="outline-3"&gt;
&lt;h3 id="org023ab57"&gt;Developer tools&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org023ab57"&gt;
&lt;p&gt;
Pretty much the first thing any mac needs is the command line tools. These can be installed from within the Xcode application, available as a download from the Apple app store (&lt;a href="https://developer.apple.com/xcode/downloads/"&gt;https://developer.apple.com/xcode/downloads/&lt;/a&gt;). Note that this requires an apple id, even though the download is free. Once Xcode is installed, install the command line tools via the Xcode preferences: &lt;a href="http://slashusr.wordpress.com/2012/07/27/os-x-mountain-lion-need-to-reinstall-xcode-command-line-tools/"&gt;http://slashusr.wordpress.com/2012/07/27/os-x-mountain-lion-need-to-reinstall-xcode-command-line-tools/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Edit: there appears to be another way to install the developer tools that does not require an apple ID - just run the following command:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;xcode-select --install
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Looks like you can even agree to the license from the command line using
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;sudo xcodebuild -license
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
See &lt;a href="http://apple.stackexchange.com/questions/88535/how-to-download-the-command-line-tools-for-xcode-without-the-downloads-for-devel"&gt;http://apple.stackexchange.com/questions/88535/how-to-download-the-command-line-tools-for-xcode-without-the-downloads-for-devel&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge4456c3" class="outline-3"&gt;
&lt;h3 id="orge4456c3"&gt;X11&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge4456c3"&gt;
&lt;p&gt;
Download and install Xquartz &lt;a href="http://xquartz.macosforge.org/downloads/SL/XQuartz-2.7.7.dmg"&gt;http://xquartz.macosforge.org/downloads/SL/XQuartz-2.7.7.dmg&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
X11 key bindings so that the option key is used for Meta..
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cat &amp;gt; ~/.Xmodmap &amp;lt;&amp;lt;EOF
clear Mod1
clear Mod2
keycode 63 = Mode_switch
keycode 66 = Meta_L
add Mod1 = Meta_L
add Mod2 = Mode_switch
EOF
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbce20b2" class="outline-3"&gt;
&lt;h3 id="orgbce20b2"&gt;Others&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgbce20b2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Chrome&lt;/li&gt;
&lt;li&gt;iTerm2 (see settings below)&lt;/li&gt;
&lt;li&gt;Dropbox&lt;/li&gt;
&lt;li&gt;SizeUp - &lt;a href="http://www.irradiatedsoftware.com/"&gt;http://www.irradiatedsoftware.com/&lt;/a&gt; (license in Dropbox/software_licenses)&lt;/li&gt;
&lt;li&gt;MacTex - download from &lt;a href="http://tug.org/mactex/"&gt;http://tug.org/mactex/&lt;/a&gt;
&lt;a href="http://mirror.ctan.org/systems/mac/mactex/MacTeX.pkg"&gt;http://mirror.ctan.org/systems/mac/mactex/MacTeX.pkg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org11deff8" class="outline-2"&gt;
&lt;h2 id="org11deff8"&gt;system-level configuration&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org11deff8"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5b4e7ab" class="outline-3"&gt;
&lt;h3 id="org5b4e7ab"&gt;turn off spelling autocorrect&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5b4e7ab"&gt;
&lt;p&gt;
System Preferences &amp;#x2013;&amp;gt; Language &amp;amp; Text &amp;#x2013;&amp;gt; Text tab &amp;#x2013;&amp;gt; unselect "Correct spelling automatically"
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4e87355" class="outline-3"&gt;
&lt;h3 id="org4e87355"&gt;fix scroll direction&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4e87355"&gt;
&lt;p&gt;
System Preferences &amp;#x2013;&amp;gt; Trackpad &amp;#x2013;&amp;gt; Scroll &amp;amp; Zoom &amp;#x2013;&amp;gt; unselect "scroll direction: natural"
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org33ed61e" class="outline-3"&gt;
&lt;h3 id="org33ed61e"&gt;turn off spaces key shortcuts&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org33ed61e"&gt;
&lt;p&gt;
System Preferences &amp;#x2013;&amp;gt; Keyboard &amp;#x2013;&amp;gt; Keyboard Shortcuts &amp;#x2013;&amp;gt; unselect C+{&amp;lt;-,-&amp;gt;}
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7939030" class="outline-2"&gt;
&lt;h2 id="org7939030"&gt;ssh&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7939030"&gt;
&lt;p&gt;
Copy my default private key.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb434f2d" class="outline-2"&gt;
&lt;h2 id="orgb434f2d"&gt;homebrew&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb434f2d"&gt;
&lt;p&gt;
Be bloody, bold, and resolute:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
brew doctor
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Had to fix permissions:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;sudo chown -R $(whoami) /usr/local
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1acb414" class="outline-3"&gt;
&lt;h3 id="org1acb414"&gt;stuff installed using homebrew&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1acb414"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;brew install aspell &amp;amp;&amp;amp; \
brew install autojump &amp;amp;&amp;amp; \
brew install gcc &amp;amp;&amp;amp; \
brew install git &amp;amp;&amp;amp; \
brew install gpg &amp;amp;&amp;amp; \
brew install graphviz &amp;amp;&amp;amp; \
brew install htop-osx &amp;amp;&amp;amp; \
brew install latex2rtf &amp;amp;&amp;amp; \
brew install pandoc &amp;amp;&amp;amp; \
brew install readline &amp;amp;&amp;amp; \
brew install tmux &amp;amp;&amp;amp; \
brew install tree &amp;amp;&amp;amp; \
brew install wget &amp;amp;&amp;amp; \
brew install zsh
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0dc0eb0" class="outline-3"&gt;
&lt;h3 id="org0dc0eb0"&gt;zsh&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0dc0eb0"&gt;
&lt;p&gt;
Install zsh with Homebrew above
&lt;/p&gt;

&lt;p&gt;
Note that zsh files are in Dropbox/zsh
&lt;/p&gt;

&lt;p&gt;
Change shell to zsh
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;sudo -s
echo /usr/local/bin/zsh &amp;gt;&amp;gt; /etc/shells
mv /etc/zshenv /etc/zprofile
exit
chsh -s /usr/local/bin/zsh $USER

cat &amp;gt; .zshrc &amp;lt;&amp;lt;EOF
export USR_ZSH_INITDIR=~/Dropbox/zsh
. ~/Dropbox/zsh/zshrc
EOF
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb1760e9" class="outline-2"&gt;
&lt;h2 id="orgb1760e9"&gt;git&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb1760e9"&gt;
&lt;pre class="example"&gt;
git config --global user.name "Noah Hoffman"
git config --global user.email noah.hoffman@gmail.com
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgaa28ae5" class="outline-2"&gt;
&lt;h2 id="orgaa28ae5"&gt;iTerm2 settings&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgaa28ae5"&gt;
&lt;p&gt;
Preferences &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Keys and do these things:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;select "Left/right option key acts as": +Esc&lt;/li&gt;
&lt;li&gt;+ &amp;#x2013;&amp;gt; Keyboard shortcut "OPT+&amp;lt;left arrow&amp;gt;": Send Escape sequence "b"&lt;/li&gt;
&lt;li&gt;+ &amp;#x2013;&amp;gt; Keyboard shortcut "OPT+&amp;lt;right arrow&amp;gt;": Send Escape sequence "f"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Preferences &amp;#x2013;&amp;gt; Profiles &amp;#x2013;&amp;gt; Colors &amp;#x2013;&amp;gt; Load Presets &amp;#x2013;&amp;gt; Light Background
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgef14e8d" class="outline-2"&gt;
&lt;h2 id="orgef14e8d"&gt;emacs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgef14e8d"&gt;
&lt;p&gt;
Install emacs24 binary from &lt;a href="http://emacsformacosx.com/"&gt;http://emacsformacosx.com/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://emacsformacosx.com/emacs-builds/Emacs-24.3-universal-10.6.8.dmg"&gt;http://emacsformacosx.com/emacs-builds/Emacs-24.3-universal-10.6.8.dmg&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Check out my .emacs.d
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~
git clone git@github.com:nhoffman/.emacs.d.git
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd10330d" class="outline-2"&gt;
&lt;h2 id="orgd10330d"&gt;python&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd10330d"&gt;
&lt;p&gt;
Doesn't work out so well using homebrew, so let's install from source. Note that we did install readline with homebrew above.
&lt;/p&gt;

&lt;p&gt;
Here's a nice reference: &lt;a href="http://arvinderkang.com/2012/07/06/a-virtualized-python-setup-on-os-x-lion/"&gt;http://arvinderkang.com/2012/07/06/a-virtualized-python-setup-on-os-x-lion/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
To remove all user-installed packages:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;rm -r /usr/local/lib/python2.7/site-packages
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;mkdir -p ~/src
cd ~/src &amp;amp;&amp;amp; \
wget http://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgz &amp;amp;&amp;amp; \
tar -xf Python-2.7.9.tgz &amp;amp;&amp;amp; \
cd Python-2.7.9 &amp;amp;&amp;amp; \
export LDFLAGS=-L/usr/local/opt/readline/lib &amp;amp;&amp;amp; \
export CPPFLAGS=-I/usr/local/opt/readline/include &amp;amp;&amp;amp; \
./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Note that installation does not require sudo because now I own /usr/local according to homebrew's preferences.
&lt;/p&gt;

&lt;p&gt;
Install pip (see &lt;a href="http://www.pip-installer.org/en/latest/installing.html"&gt;http://www.pip-installer.org/en/latest/installing.html&lt;/a&gt;)
&lt;/p&gt;

&lt;p&gt;
(Beginning with pip v1.5.1, get-pip.py provides setuptools and no longer requires setuptools to be installed first.)
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~/src
wget https://raw.github.com/pypa/pip/master/contrib/get-pip.py
chmod +x get-pip.py
./get-pip.py --force-reinstall
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Even better: starting with python 2.7.9, you can bootstrap install pip
directly from the standard library:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;python -m ensurepip --upgrade
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
And install some python packages. Some of these packages take a while
to compile, and it's nice to save compiled versions of wheels so that
they can be included in a virtualenv - the &lt;code&gt;bioy&lt;/code&gt; package includes a
script that help set this up. First, we'll need some requirements.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~/src
wget -N https://raw.githubusercontent.com/jorgenschaefer/elpy/master/requirements.txt
cat &amp;gt;&amp;gt; requirements.txt &amp;lt;&amp;lt;EOF
numpy
pandas
csvkit
pep8
autopep8
# pygraphviz
reportlab
jinja2
EOF
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Now create the wheels for these packages and save them in a system-level directory.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~/src
git clone git@github.com:nhoffman/bioy.git
bioy/dev/build_wheels.sh --wheelstreet /usr/local/share/python/wheels --requirements requirements.txt
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Now these packages can be quickly be installed to the system or a virtualenv using these wheels:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;pip install --use-wheel --find-links=/usr/local/share/python/wheels/2.7.8 -r requirements.txt
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
scons doesn't work with pip
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~/src
wget -N http://prdownloads.sourceforge.net/scons/scons-2.3.4.tar.gz &amp;amp;&amp;amp; \
tar -xf scons-2.3.4.tar.gz &amp;amp;&amp;amp; \
cd scons-2.3.4 &amp;amp;&amp;amp; \
python setup.py install
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
ansible
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;sudo mkdir /usr/share/ansible
sudo chown -R $(whoami) /usr/share/ansible
pip install ansible
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5d10f4b" class="outline-2"&gt;
&lt;h2 id="org5d10f4b"&gt;R&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5d10f4b"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~/src
wget http://cran.fhcrc.org/bin/macosx/R-3.1.1-mavericks.pkg &amp;amp;&amp;amp; \
sudo installer -pkg R-3.1.1-mavericks.pkg -target /
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;sudo R --slave &amp;lt;&amp;lt; EOF
packages &amp;lt;- c("ape", "sqldf", "ROCR", "lattice", "RSQLite", "latticeExtra", "argparse", "data.table")
install.packages(packages, repos="http://cran.fhcrc.org/", dependencies=TRUE, clean=TRUE)
EOF
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3df102f" class="outline-2"&gt;
&lt;h2 id="org3df102f"&gt;mail&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3df102f"&gt;
&lt;p&gt;
&lt;a href="http://www.washington.edu/itconnect/connect/email/uw-email/configuring/os-x-mail6/"&gt;http://www.washington.edu/itconnect/connect/email/uw-email/configuring/os-x-mail6/&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org31e6d30" class="outline-2"&gt;
&lt;h2 id="org31e6d30"&gt;sshfs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org31e6d30"&gt;
&lt;p&gt;
Now provided by the project &lt;a href="http://osxfuse.github.io/"&gt;http://osxfuse.github.io/&lt;/a&gt; - the links below are for binaries provided as installers.
&lt;/p&gt;

&lt;p&gt;
Edit 11/2014: updated versions for yosemite
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~/Downloads
wget http://sourceforge.net/projects/osxfuse/files/osxfuse-2.7.2/osxfuse-2.7.2.dmg
wget https://github.com/osxfuse/sshfs/releases/download/osxfuse-sshfs-2.5.0/sshfs-2.5.0.pkg
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9b08260" class="outline-2"&gt;
&lt;h2 id="org9b08260"&gt;wkhtmltopdf&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9b08260"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cd ~/src
wget 'http://wkhtmltopdf.googlecode.com/files/wkhtmltopdf.dmg'
open wkhtmltopdf.dmg
cp -r /Volumes/wkhtmltopdf/wkhtmltopdf.app /Applications
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Now create an alias:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;alias wkhtmltopdf='/Applications/wkhtmltopdf.app/Contents/MacOS/wkhtmltopdf'
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="notes"></category><category term="mac"></category></entry><entry><title>Installing R packages</title><link href="https://nhoffman.github.io/borborygmi/installing-r-packages.html" rel="alternate"></link><published>2010-03-22T00:00:00-07:00</published><updated>2010-03-22T00:00:00-07:00</updated><author><name>unknown</name></author><id>tag:nhoffman.github.io,2010-03-22:/borborygmi/installing-r-packages.html</id><summary type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org7cd9cc8"&gt;Installing from CRAN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org63ba366"&gt;Bioconductor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgb3f8715"&gt;R-forge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org8d04deb"&gt;Installing packages locally&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org2dec8a8"&gt;Reloading a package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Notes to myself about installing R packages.
&lt;/p&gt;

&lt;div id="outline-container-org7cd9cc8" class="outline-2"&gt;
&lt;h2 id="org7cd9cc8"&gt;Installing from CRAN&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7cd9cc8"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-R"&gt;install.packages(c("ape","sqldf","ROCR"), repos="http://cran.fhcrc.org/", dependencies=TRUE, clean=TRUE)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org63ba366" class="outline-2"&gt;
&lt;h2 id="org63ba366"&gt;Bioconductor&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org63ba366"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-R"&gt;source("http://bioconductor.org/biocLite.R")
biocLite(c("Biostrings","BSgenome …&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org7cd9cc8"&gt;Installing from CRAN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org63ba366"&gt;Bioconductor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgb3f8715"&gt;R-forge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org8d04deb"&gt;Installing packages locally&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org2dec8a8"&gt;Reloading a package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Notes to myself about installing R packages.
&lt;/p&gt;

&lt;div id="outline-container-org7cd9cc8" class="outline-2"&gt;
&lt;h2 id="org7cd9cc8"&gt;Installing from CRAN&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7cd9cc8"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-R"&gt;install.packages(c("ape","sqldf","ROCR"), repos="http://cran.fhcrc.org/", dependencies=TRUE, clean=TRUE)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org63ba366" class="outline-2"&gt;
&lt;h2 id="org63ba366"&gt;Bioconductor&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org63ba366"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-R"&gt;source("http://bioconductor.org/biocLite.R")
biocLite(c("Biostrings","BSgenome")) # for example
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Update all of bioconductor
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-R"&gt;source("http://bioconductor.org/biocLite.R")
update.packages(rep=biocinstallRepos(), ask=FALSE)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Check out and install a package (eg, Biostrings) from the Subversion repository. See &lt;a href="http://wiki.fhcrc.org/bioc/SvnHowTo"&gt;http://wiki.fhcrc.org/bioc/SvnHowTo&lt;/a&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-R"&gt;svn checkout --username=readonly --password=readonly https://hedgehog.fhcrc.org/bioconductor/trunk/madman/Rpacks/Biostrings
R CMD INSTALL Biostrings
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb3f8715" class="outline-2"&gt;
&lt;h2 id="orgb3f8715"&gt;R-forge&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb3f8715"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-R"&gt;install.packages("packagename",repos="http://R-Forge.R-project.org")
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Read-only subversion repository may be checked out using
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-R"&gt;svn checkout svn://svn.r-forge.r-project.org/svnroot/packagename
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8d04deb" class="outline-2"&gt;
&lt;h2 id="org8d04deb"&gt;Installing packages locally&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8d04deb"&gt;
&lt;p&gt;
If you can't (or don't want to) install packages to the system R location, you can create a local library. For example:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-R"&gt;echo 'R_LIBS_USER="~/R/library"' &amp;gt;  $HOME/.Renviron
mkdir -p ~/R/library
R CMD INSTALL --library=~/R/library somepackage.gz
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2dec8a8" class="outline-2"&gt;
&lt;h2 id="org2dec8a8"&gt;Reloading a package&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2dec8a8"&gt;
&lt;p&gt;
Calling &lt;code&gt;library()&lt;/code&gt; after a package has already been loaded does not update the namespace with updates if the library has changed (eg, during package development). Instead, do something like this:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-R"&gt;relibrary &amp;lt;- function(pkg){
    unloadNamespace(pkg)
    library(pkg, character.only=TRUE)
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="notes"></category><category term="R-language"></category></entry></feed>