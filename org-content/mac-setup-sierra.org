#+TITLE: Setup new Mac (Sierra)
#+DATE: 2017-01-5
#+CATEGORY: notes
#+PROPERTY: TAGS mac
#+PROPERTY: eval never
#+OPTIONS: ^:nil

* system settings
** turn off spelling autocorrect
System Preferences --> Keyboard --> Text tab --> unselect "Correct spelling automatically" and others

* First applications

** iTerm2

Update a few settings.

Preferences --> Profiles --> Keys and do these things:
- select "Left/right option key acts as": +Esc
- + --> Keyboard shortcut "OPT+<left arrow>": Send Escape sequence "b"
- + --> Keyboard shortcut "OPT+<right arrow>": Send Escape sequence "f"

Default appearance:

- Preferences --> Profiles --> Colors --> Load Presets --> Light Background
- Preferences --> Profiles --> Text --> Change Font --> 14 point

** Dropbox

Install from website

** Developer tools

Pretty much the first thing any mac needs is the command line tools. This can be done from the command line:

#+BEGIN_SRC sh
xcode-select --install
#+END_SRC

** X11

Download and install Xquartz:

#+BEGIN_SRC sh
cd ~/Downloads
wget http://xquartz.macosforge.org/downloads/SL/XQuartz-2.7.8.dmg
open XQuartz-2.7.8.dmg
sudo installer -pkg /Volumes/XQuartz-2.7.8/XQuartz.pkg -target /
#+END_SRC

Note for next time: might be worth trying to use homebrew.

X11 key bindings so that the option key is used for Meta..

#+BEGIN_SRC sh
cat > ~/.Xmodmap <<EOF
clear Mod1
clear Mod2
keycode 63 = Mode_switch
keycode 66 = Meta_L
add Mod1 = Meta_L
add Mod2 = Mode_switch
EOF
#+END_SRC

** Others

- [X] SizeUp - http://www.irradiatedsoftware.com/ (license in Dropbox/software_licenses)
- [ ] MacTex - download from http://tug.org/mactex/ http://mirror.ctan.org/systems/mac/mactex/MacTeX.pkg
- [ ] HipChat client
- [ ] Chrome
- [ ] Dash 2

** UW only

- Sophos antivirus: https://softy.cac.washington.edu/sophos/for-staff/
- Junos Pulse (SSL VPN): https://networks.uwmedicine.org/content/sslvpn-frequently-asked-questions-14


* homebrew

Homebrew no longer requires user-ownership of /usr/local, so things are pretty easy now:

#+BEGIN_SRC sh
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
brew doctor
#+END_SRC

Some packages I'll need off the bat to do just about anything

#+BEGIN_SRC sh
brew install git
brew install wget
#+END_SRC


A number of packages are installed in the context of other
applications; here are additional packages that I know I'll use.

#+BEGIN_SRC sh
brew install homebrew/dupes/tcl-tk && \
brew install autojump && \
brew install berkeley-db4 && \
brew install gcc && \
brew install graphviz && \
brew install htop-osx && \
brew install latex2rtf && \
brew install pandoc && \
brew install pkg-config && \
brew install readline && \
brew install sqlite && \
brew install tmux && \
brew install tree && \
#+END_SRC

** homebrew cask

Command line installer for desktop applications. See https://caskroom.github.io

#+BEGIN_SRC sh
brew tap caskroom/cask
#+END_SRC

Install some applications

#+BEGIN_SRC sh
brew cask install java
#+END_SRC

** homebrew API token

Apparently lots of requests to GutHub via homebrew can hit a rate limit. There's a higher limit if you create an API token. See https://gist.github.com/christopheranderton/8644743

Here's the url for the token creation dialog:

https://github.com/settings/tokens/new?scopes=&description=Homebrew

Make sure that all 'scopes' are unchecked. Once you generate the token, add to your shell profile:

: export HOMEBREW_GITHUB_API_TOKEN=token_here

** zsh

Install zsh with Homebrew above

#+BEGIN_SRC sh
brew install zsh
#+END_SRC

Change shell to zsh

#+BEGIN_SRC sh
sudo -s
echo /usr/local/bin/zsh >> /etc/shells
exit
chsh -s /usr/local/bin/zsh $USER
#+END_SRC

zsh init files are in Dropbox/zsh

#+BEGIN_SRC sh
cat > ~/.zshenv <<EOF
. ~/Dropbox/zsh/zstartup
EOF
#+END_SRC

* ssh

After installing homebrew's openssh on El Capitan, ssh-agent no longer
seemed to work (in the sense that after using ssh-add to cache a
passphrase, I still got a system prompt when trying to ssh). This
seemed to be fixed by the instructions I found at the url below (my
version is functionally the same but uses PlistBuddy to edit the
plist):

https://coderwall.com/p/qdwcpg/using-the-latest-ssh-from-homebrew-on-osx

** update /System/Library/LaunchAgents/org.openbsd.ssh-agent.plist

#+BEGIN_SRC sh
sudo /usr/libexec/PlistBuddy /System/Library/LaunchAgents/org.openbsd.ssh-agent.plist<<EOF
Delete :ProgramArguments
Add :ProgramArguments array
Add :ProgramArguments: string /usr/local/bin/ssh-agent
Add :ProgramArguments: string -D
Add :ProgramArguments: string -t 1d
Save
Exit
EOF
#+END_SRC

This should change the original value of =ProgramArguments=:

#+BEGIN_EXAMPLE
<key>ProgramArguments</key>
<array>
	<string>/usr/bin/ssh-agent</string>
	<string>-l</string>
</array>
#+END_EXAMPLE

to

#+BEGIN_EXAMPLE
<key>ProgramArguments</key>
<array>
	<string>/usr/local/bin/ssh-agent</string>
	<string>-D</string>
	<string>-t 1d</string>
</array>
#+END_EXAMPLE

Now restart the service

#+BEGIN_SRC sh
launchctl unload /System/Library/LaunchAgents/org.openbsd.ssh-agent.plist
launchctl load -w /System/Library/LaunchAgents/org.openbsd.ssh-agent.plist
launchctl start org.openbsd.ssh-agent
#+END_SRC

** create $ZSH_INITDIR/ssh-ask-keychain (called from start_ssh_agent.zsh)

#+BEGIN_SRC sh :results output :export results :eval yes
cat ~/Dropbox/zsh/ssh-ask-keychain
#+END_SRC

** create $ZSH_INITDIR/start_ssh_agent.zsh

(either as a file sourced from .zshrc, or as a code block in a login script)

#+BEGIN_SRC sh :results output :export results :eval yes
cat ~/Dropbox/zsh/ssh_environ.zsh
#+END_SRC

* git

 : git config --global user.name "My Name"
 : git config --global user.email me@email.com

* emacs

Install latest emacs binary (25.1) from http://emacsformacosx.com/

Emacs needs a few homebrew packages

#+BEGIN_SRC sh
brew install libressl
brew install aspell
brew install gpg
#+END_SRC

Check out my .emacs.d and run setup scripts.

#+BEGIN_SRC sh
cd ~
git clone git@github.com:nhoffman/.emacs.d.git
cd .emacs.d
git submodule init
git submodule update
#+END_SRC

* python

Use homebrew - see
https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/Homebrew-and-Python.md

Run =brew info python= for required and optional dependencies

#+BEGIN_SRC sh
for pkg in sphinx-doc pkg-config readline sqlite homebrew/dupes/tcl-tk berkeley-db4; do brew install $pkg; done
brew install python --with-berkeley-db4 --with-tcl-tk
brew linkapps python
pip install -U pip
pip install -U setuptools
pip install -U virtualenv
#+END_SRC

Install some python packages using homebrew - these are time consuming to install otherwise.

#+BEGIN_SRC sh
brew install homebrew/python/numpy
#+END_SRC

Install some other packages to the system using pip.

For elpy:

#+BEGIN_SRC sh
pip install -r <(curl https://raw.githubusercontent.com/jorgenschaefer/elpy/master/requirements.txt)
#+END_SRC

ansible

#+BEGIN_SRC sh
sudo mkdir /usr/share/ansible
sudo chown -R $(whoami) /usr/share/ansible
pip install ansible
#+END_SRC

Others

#+BEGIN_SRC sh
pip install csvkit
pip install reportlab
pip install scons
pip install jinja2
#+END_SRC

* R

Really doubling down on homebrew this time around:

#+BEGIN_SRC sh
brew tap homebrew/science
brew install r
#+END_SRC

#+BEGIN_SRC sh
R --slave << EOF
packages <- c("ape", "sqldf", "ROCR", "lattice", "RSQLite", "latticeExtra", "argparse", "data.table")
install.packages(packages, repos="http://cran.fhcrc.org/", dependencies=TRUE, clean=TRUE)
EOF
#+END_SRC

* mail

http://www.washington.edu/itconnect/connect/email/uw-email/configuring/os-x-mail6/

* sshfs

Provided by the project http://osxfuse.github.io/ - the links below
are for binaries provided as installers.

#+BEGIN_SRC sh
cd ~/Downloads
wget http://sourceforge.net/projects/osxfuse/files/osxfuse-2.8.2/osxfuse-2.8.2.dmg
wget https://github.com/osxfuse/sshfs/releases/download/osxfuse-sshfs-2.5.0/sshfs-2.5.0.pkg
#+END_SRC

* wkhtmltopdf

#+BEGIN_SRC sh
cd ~/Downloads
wget 'http://wkhtmltopdf.googlecode.com/files/wkhtmltopdf.dmg'
open wkhtmltopdf.dmg
cp -r /Volumes/wkhtmltopdf/wkhtmltopdf.app /Applications
#+END_SRC

Now create an alias:

#+BEGIN_SRC sh
alias wkhtmltopdf='/Applications/wkhtmltopdf.app/Contents/MacOS/wkhtmltopdf'
#+END_SRC

